<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Code Compile | Rodrigo Martins]]></title>
  <link href="http://rrmartins.github.com/blog/categories/code-compile/atom.xml" rel="self"/>
  <link href="http://rrmartins.github.com/"/>
  <updated>2012-03-07T21:27:26-03:00</updated>
  <id>http://rrmartins.github.com/</id>
  <author>
    <name><![CDATA[Rodrigo Martins]]></name>
    <email><![CDATA[rodrigo@rrmartins.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A importância das metáforas]]></title>
    <link href="http://rrmartins.github.com/blog/2012/03/05/a-importancia-das-metaforas/"/>
    <updated>2012-03-05T22:47:00-03:00</updated>
    <id>http://rrmartins.github.com/blog/2012/03/05/a-importancia-das-metaforas</id>
    <content type="html"><![CDATA[<p>Olá amigos nerd's... Continuando os estudos...</p>


<p><strong> A importância das metáforas! </strong></p>

<!-- more -->


<p>Desenvolvimentos importantes com freqüência, surgir de analogias. Ao comparar tópico
você entende mal a algo similar você entender melhor,
você pode vir acima com idéias que resultaria em uma melhor compreensão do
lessfamiliar tópico. Este uso da metáfora é chamada de "modelagem".
A história da ciência está cheia de descobertas baseada na exploração
o poder das metáforas. O químico Kekulé teve um sonho em que viu
uma cobra agarrar a cauda em sua boca. Quando ele acordou, percebeu que um
estrutura molecular com base em forma de anel semelhante seria responsável por
as propriedades de benzeno. Experimentação mais
confirmou a hipótese (Barbour 1966).</p>

<p>A teoria cinética dos gases foi baseada em um modelo de "sinuca".
As moléculas de gás foram pensados ​​para ter massa e colidem elasticamente,
como fazer bolas de bilhar, e muitos teoremas úteis foram desenvolvidos a partir deste modelo.</p>

<p>A teoria ondulatória da luz foi desenvolvido em grande parte por explorar
semelhanças entre luz e som. Luz e som tem amplitude (brilho,
Sonoridade), freqüência (cor, altura), e outras propriedades em comum.
A comparação entre as teorias de ondas de som e luz foi tão produtivo
scientista que passou um grande esforço à procura de um meio que
se propagar o som se propaga via aérea luz. Eles ainda lhe deram um nome
- "Éter" - mas nunca encontraram o meio. A analogia foi tão frutífera
em algumas formas provou ser enganosa neste caso.</p>

<p>Em geral, o poder dos modelos é que eles estão vivas e pode ser apreendido como
conjuntos conceituais. Eles sugerem propriedades, relações e adicionais
áreas de investigação. Às vezes, um modelo sugere áreas de investigação que são enganosas,
caso em que a metáfora tem sido sobrecarregados. Quando o cientista parecia
para o éter, que seu modelo sobrecarregado.</p>

<p>Como você poderia esperar, algumas metáforas são melhores que outros.
Uma boa metáfora é simples, se relaciona bem com metáfora relevantes,
e explica grande parte das evidências experimentais e outros fenômenos observados.</p>

<p>Aguardem... Em breve novos conteudos!!!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Metáforas de Desenvolvimento de Software]]></title>
    <link href="http://rrmartins.github.com/blog/2012/03/05/metaforas-de-desenvolvimento-de-software/"/>
    <updated>2012-03-05T20:53:00-03:00</updated>
    <id>http://rrmartins.github.com/blog/2012/03/05/metaforas-de-desenvolvimento-de-software</id>
    <content type="html"><![CDATA[<p>Olá amigos nerd's... Continuando os estudos...</p>


<p><strong> Metáforas para uma compreensão mais rica de Desenvolvimento de Software </strong></p>

<!-- more -->


<p>Ciência da Computação tem uma parte da linguagem mais colorida de qualquer campo.
Em que outro campo você pode andar em uma sala estéril, cuidadosamente controlada no
20° C, e encontrar os vírus, cavalos de Tróia, <a href="http://cartilha.cert.br/malware/sec6.html" target=_blank>worms</a>, bugs, bombas, falha,
chamas, trocadores de sexo torcidas, e erros fatais?</p>

<p>Essas metáforas gráficas descrevem fenômenos de software específicos.
Igualmente metáforas vivas descrevem fenômenos mais amplos, e você pode usá-los
para melhorar a sua compreensão do processo de desenvolvimento de software.</p>

<p>O resto do livro não dependem diretamente da discussão de metáforas
neste capítulo. Ignorá-lo se você quiser chegar às sugestões práticas.
Leia-o se você quer pensar sobre desenvolvimento de software de forma mais clara.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Por que Construção de Software é Importante? - Parte 2]]></title>
    <link href="http://rrmartins.github.com/blog/2012/03/03/por-que-construcao-de-software-e-importante-parte-2/"/>
    <updated>2012-03-03T19:55:00-03:00</updated>
    <id>http://rrmartins.github.com/blog/2012/03/03/por-que-construcao-de-software-e-importante-parte-2</id>
    <content type="html"><![CDATA[<p>Olá amigos nerd's... Continuando os estudos...</p>


<p><strong> Por que Construção de Software é Importante? - Parte 2</strong></p>

<!-- more -->


<p>
Com foco na construção, a produtividade do programador indivídual pode
  melhorar enormemente. Um estudo clássico de Sackman, Erikson e Grant mostrou
  que a produtividade dos programadores individuais variaram por um fator de 10 a 20
  durante a construção (1968). Desde o seu estudo, seus resultados têm
  se confirmado por numerosos outros estudos (...). Este livro, ajuda a todos os programadores
  aprender tecnicas que já são utilizados pelos melhores programadores.
</p>


<p>
  Produto de construção, o código-fonte, é muitas vezes a única
  descrição precisa do software. Em muitos projetos, a documentação só
  disponível para os programadores é o próprio código. Requisitos e especificações
  documentos de projeto pode ir fora da data, mas o código fonte é sempre atualizado.
  Consequentemente, é imperativo que o código fonte de ser o mais alto possível
  qualidade. A aplicação consistente de técnicas para melhoria do código-fonte
  faz a diferença entre um aparelho de Rube Goldberg e uma análise detalhada,
  corrigir, e um programa informativo portanto. Tais técnicas são mais
  efectivamente aplicado durante a construção.
 </p>


<p> <p>
  A construção é a única atividade que está garantido para ser feito.
  O projeto de software ideal passa por desenvolvimento de requisitos cuidadoso e
  projeto arquitetônico antes do início da construção. O projeto ideal
  sofre abrangente, o teste do sistema estatisticamente controlada após
  construção.
 </p>
 <p>
  Imperfeitos, projetos do mundo real, no entanto, muitas vezes ignorar exigências
  e design para pular para a construção. Eles deixam de testes, porque eles têm
  muitos erros para corrigir e eles ficar sem tempo.
  Mas não importa o quão apressado ou mal planejado um projeto é que você não pode
  cair de construção, é onde a borracha encontra a estrada.
 </p>
 <p>
  Melhorar a construção é, assim, uma forma de melhorar a qualquer desenvolvimento de software
  esforço, não importa o quão abreviado.
  </p></p>

<p>Texto retirado do livro Code Compile, de Steve McConnell.
Até a proxima amigos... :D</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pontos Chaves Para a Construção de Software!]]></title>
    <link href="http://rrmartins.github.com/blog/2012/03/01/pontos-chaves/"/>
    <updated>2012-03-01T13:31:00-03:00</updated>
    <id>http://rrmartins.github.com/blog/2012/03/01/pontos-chaves</id>
    <content type="html"><![CDATA[<p>
Pontos-chaves Para a Construção de Software!
</p>


<p>
-> Construção de software é a atividade central no desenvolvimento de software;
construção é a única atividade que está garantida a acontecer em cada projeto.
</p>


<p>
-> As atividades principais da construção estão detalhadas design, codificação,
depuração, integração e testes de desenvolvedor
(testes unitários e testes de integração).
</p>


<p>
-> Outros termos comuns para construção são "codificação" e "programação".
</p>


<p>
-> A qualidade da construção afeta substancialmente
a qualidade do software.
</p>


<p>
-> Na análise final, o seu entendimento de como fazer construção determina
como um bom programador você é, e esse é o assunto do resto do livro.
</p>


<p>Texto retirado do livro Code Compile, de Steve McConnell.</p>

<p>"Conhecimento nunca é de mais!" (<a href="http://twitter.com/sfalsin">@sfalsin</a>)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Por que Construção de Software é Importante?]]></title>
    <link href="http://rrmartins.github.com/blog/2012/02/29/por-que-construcao-de-software-e-importante/"/>
    <updated>2012-02-29T23:46:00-03:00</updated>
    <id>http://rrmartins.github.com/blog/2012/02/29/por-que-construcao-de-software-e-importante</id>
    <content type="html"><![CDATA[<p>Olá amigos nerd's... Continuando os estudos...</p>


<p>Agora vou falar um outro capitulo... Que é sobre:<br/>
<strong> Por que Construção de Software é Importante? </strong></p>

<!-- more -->


<p>
Uma vez que você está lendo este livro, provavelmente você concorda que a melhoria
  qualidade do software e a produtividade do desenvolvedor é importante. Muitos dos mais de hoje
  projetos interessantes usar software intensamente. A Internet,
  efeitos especiais de cinema, médicos de suporte de vida de sistemas, programas espaciais, aeronáutica,
  alta velocidade de análise financeira e pesquisa científica são alguns exemplos ao poucos.
  Esses projetos e mais projetos convetional podem se beneficiar
  melhores práticas, porque muitos dos fundamentos são os mesmos.
</p>


<p></p>

<p>
  Se você concorda que a melhoria de desenvolvimento de software é importante, em geral,
  a pergunta para você como leitor deste livro torna-se,
  Por que é a construção de um foco importante?
 </p>


<p> <p>
  Eis o porquê:
  Construção é uma grande parte do desenvolvimento mercadoria software.
  Dependendo do tamanho do projecto, a construção tipicamente
  leva 30 a 80 por cento do tempo total gasto em um projeto.
  Qualquer coisa que leva até que o tempo de projeto muito é obrigado a
  afetar o sucesso do projeto.
 </p>
 <p>
  A construção é a atividade central no desenvolvimento de software.
  Requisitos e arquitetura são feitas antes da construção
  de modo que você pode construção de forma eficaz. O teste do sistema (no estrito
  sensação de testes independentes) é feito após a construção para verificar
  que a construção verificar que a construção foi feito correctamente.
  Construção está no centro do processo de desenvolvimento de software.
</p></p>

<p>Vale a pena estudar... :D</p>

<br/>


<p>Até a proxima amigos... :D</p>
]]></content>
  </entry>
  
</feed>
