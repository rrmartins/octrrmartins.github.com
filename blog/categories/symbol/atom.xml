<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: symbol | Rodrigo Martins]]></title>
  <link href="http://rrmartins.com/blog/categories/symbol/atom.xml" rel="self"/>
  <link href="http://rrmartins.com/"/>
  <updated>2015-09-17T19:05:08-03:00</updated>
  <id>http://rrmartins.com/</id>
  <author>
    <name><![CDATA[Rodrigo Martins]]></name>
    <email><![CDATA[rodrigo@rrmartins.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[As duas faces de String]]></title>
    <link href="http://rrmartins.com/blog/2013/04/28/as-duas-faces-de-string/"/>
    <updated>2013-04-28T16:30:00-03:00</updated>
    <id>http://rrmartins.com/blog/2013/04/28/as-duas-faces-de-string</id>
    <content type="html"><![CDATA[<!--more-->


<p>Às vezes, uma boa maneira de explicar um assunto problemático é se engajar em uma ficção um pouco criativa. Você começa com uma
explicação simplista e, uma vez que se aprofunda um pouco, você trabalha o seu caminho de lá para voltar para o mundo real.
Com este espírito, vou começar a exploração de símbolos com uma ligeira simplificação: Símbolos são realmente apenas strings.
Isto não é tão improvável quanto parece: Pense sobre a string &ldquo;dog&rdquo; e seu primo mais próximo simbólico :dog. A única coisa que
bate no rosto sobre esses dois objetos é que eles são ambos essencialmente três personagens: um &ldquo;d&rdquo;, um &ldquo;o&rdquo;, e &ldquo;g&rdquo;.</p>

<p>Strings e símbolos também são razoavelmente permutáveis ​​em código na vida real: Tome este exemplo familiar de algum de código no
ActiveRecord, que encontra todos os registros no livros de mesa:</p>

<pre><code>book = Book.find(:all)
</code></pre>

<p>O argumento para o método <code>find</code> é simplesmente um flag, há que dizer que queremos encontrar todos os registros de livros, e não
apenas o primeiro registro, e não apenas o último registro, mas todos eles. O valor real que passamos para <code>Book.find</code> realmente
não importa muito. Podemos imaginar que, se tivesse tempo e motivação, podemos ir nas entranhas do <code>ActiveRecord</code> e reescrever o
código para que pudéssemos usar uma string para sinal de que queria que todos os livros:</p>

<pre><code>book = Book.find('all')
</code></pre>

<p>Portanto, não é a minha explicação simplificada de símbolos: Além do fato de que a digitação de <code>:all</code> exige um keystroke menos
do que digitar <code>'all'</code>, não há realmente muito a distinguir um símbolo a partir de uma string. Então, por que o Ruby nos fornece tanto?</p>

<p>Continuando no post <a href="/blog/2013/04/28/nao-e-bem-uma-string/">Não é bem uma String</a>&hellip;</p>

<p>Até mais galera! :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Symbols - Ruby 1.9.2]]></title>
    <link href="http://rrmartins.com/blog/2012/05/16/symbols-ruby-1-dot-9-2/"/>
    <updated>2012-05-16T21:37:00-03:00</updated>
    <id>http://rrmartins.com/blog/2012/05/16/symbols-ruby-1-dot-9-2</id>
    <content type="html"><![CDATA[<!--more-->


<p>Continuando os estudos de Ruby, e a leitura do livro The Ruby Programming Language</p>




<p>Hoje vamos continuar falando de Symbol, é hora de nos aprofundar.</p>




<h2>Symbol</h2>


<p>Uma implementação típica de um interpretador Ruby mantém um símbolo em tabela
que ele armazena os nomes de todas as classes, métodos e variáveis ​​que ele conhece.
Isso permite que tal intérprete evite mais comparações de string: refere-se a nomes de métodos (por exemplo) pelo sua
posição na presente tabela de símbolos. Isso transforma uma string relativamente pesada em uma certa operação, e relativamente leve com operação de números inteiro.</p>

<p>Esses símbolos não são puramente interno para o intérprete, pois eles podem também ser usado por
programas Ruby. Um objeto de Symbol refere-se a um símbolo. Um símbolo literal é escrito prefixando um identificador ou uma string com um
dois pontos:</p>

<pre><code class="ruby Symbol">:symbol # Symbol Um literal
:"symbol" # O mesmo literal
:'another long symbol' "# são úteis para símbolos com espaços
s = "string"
sym = :"#{s}" # O Symbol :string
</code></pre>

<p>Símbolos têm também uma sintaxe literal %s que permite delimitadores arbitrários da mesma maneira
que %q e %Q pode ser usado para strings:</p>

<pre><code class="ruby Symbol">%s["] # O mesmo que: '"'
</code></pre>

<p>Os símbolos são usados ​​frequentemente para se referir a nomes de métodos no reflexivo
código. Por exemplo, suponha que queremos para saber se algum objeto tem um método each:</p>

<pre><code class="ruby Symbol">o.respond_to? :each
</code></pre>

<p>Aqui está outro exemplo. Ele testa se um determinado objeto responde a um método especificado, e, em caso afirmativo, invoca o método:</p>

<pre><code class="ruby Symbol">nome = :size
if o.respond_to? nome
  o.send (nome)
end
</code></pre>

<p>Você pode converter uma String para um Symbol utilizando os métodos intern ou to_sym. E você pode converter um Symbol de volta para uma String com o método to_s ou sue alias id2name:</p>

<pre><code class="ruby Symbol">str = "string" # Comece com uma string
sym = str.intern  # Converter para um símbolo
sym = str.to_sym # Outra maneira de fazer a mesma coisa
str = sym.to_s # converter de volta para uma string
str = sym.id2name # Outra maneira de fazê-lo
</code></pre>

<p>Duas seqüências podem ter o mesmo conteúdo e ainda ser completamente de objetos distintos. Este nunca é o caso com símbolos.
Duas strings com o mesmo conteúdo irá tanto converter para exatamente o mesmo objeto symbol. Dois objetos distintos Symbols terá sempre conteúdo diferente.</p>

<p>Sempre que você escrever código que usa string não para o seu conteúdo textual,
mas como uma espécie de identificador único, considere o uso de symbols em vez disso.
Ao invés de escrever um método que espera um argumento para ser ou a string de &ldquo;AM&rdquo; ou &ldquo;PM&rdquo;, por exemplo, você poderia escrevê-lo para
esperar o símbolo :AM ou o símbolo :PM. Comparando-se dois objetos Symbols de igualdade, é muito mais rápido
de comparar duas strings para a igualdade. Por esta razão, os símbolos são geralmente preferido para strings como chaves de hash.</p>

<p>No Ruby 1.9, a classe símbolo define um número de métodos String, como length, o size, os operadores de comparação, e mesmo os operadores
[] e =~. Isto faz com que os símbolos sejam um pouco permutável com string e permite a sua utilização como uma espécie de imutável
(E não garbage-collected) string.</p>

<p>É isso ai amigos até a proxima.. :D</p>
]]></content>
  </entry>
  
</feed>
