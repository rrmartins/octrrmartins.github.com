<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby 1.9.3 | Rodrigo Martins]]></title>
  <link href="http://rrmartins.github.com/blog/categories/ruby-1-9-3/atom.xml" rel="self"/>
  <link href="http://rrmartins.github.com/"/>
  <updated>2014-02-27T10:24:55-03:00</updated>
  <id>http://rrmartins.github.com/</id>
  <author>
    <name><![CDATA[Rodrigo Martins]]></name>
    <email><![CDATA[rodrigo@rrmartins.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Expressões Regulares em Ruby]]></title>
    <link href="http://rrmartins.github.com/blog/2013/04/28/expressoes-regulares-em-ruby/"/>
    <updated>2013-04-28T13:52:00-03:00</updated>
    <id>http://rrmartins.github.com/blog/2013/04/28/expressoes-regulares-em-ruby</id>
    <content type="html"><![CDATA[<!--more-->


<p>Olá amigos,</p>

<p>Ando meio sumido, mas pretendo voltar a fazer os posts, e dar continuidade nos estudos.</p>

<p>Volto falando um pouco de <code>Expressão Regular</code> em Ruby(<a href="http://ruby-doc.org/core-1.9.3/Regexp.html">1.9.3</a>, <a href="http://ruby-doc.org/core-2.0/Regexp.htm">2.0</a>), vou abordar as duas ultimas versões do Ruby, mas gostaria de deixar claro que a nova versão <a href="http://ruby-doc.org/core-2.0/">2.0</a> é a que estou usando, e não esta me deixando na mão.</p>

<p>Em Ruby, a expressão regular, ou <code>Regexp</code>(<a href="http://ruby-doc.org/core-1.9.3/Regexp.html">1.9.3</a>, <a href="http://ruby-doc.org/core-2.0/Regexp.htm">2.0</a>), tem sua própria sintaxe literal especial. Para fazer uma expressão regular em Ruby que você encerra o seu padrão entre as barras. Então, em Ruby nossa expressão regular seria:</p>

<p><code>ruby Regexp
/\d\d:\d\d (AM|PM)/
</code></p>

<p>Você usa o operador <code>=~</code> para testar se uma expressão regular corresponde a uma string. Assim, se quisermos corresponder à expressão regular acima com um tempo real que seria executado:</p>

<p>``` ruby Regexp</p>

<h1>1.9.3 e 2.0</h1>

<blockquote><p>puts /\d\d:\d\d (AM|PM)/ =~ '10:24 PM'
=> 0
```</p></blockquote>

<p>Que o zero está tentando nos dizer muitas coisas. Primeiro, ele está dizendo que a expressão correspondente, esta começando no
índice zero. Em segundo lugar, o zero está nos dizendo é que, quando você combinar uma expressão regular, Ruby verifica ao longo
da String, procurando um conjunto em qualquer lugar da string. Podemos ver a digitalização em ação com este exemplo seguinte:</p>

<p>``` ruby Regexp</p>

<h1>1.9.3 e 2.0</h1>

<blockquote><p>puts /PM/ =~ '10:24 PM'
=> 6
```</p></blockquote>

<p>Que seis é uma indicação de onde o Regexp encontrou, mas só depois de Ruby digitalizar bem a string. Se não houver
correspondência, então você não vai ter um retorno para o seu problema, de modo a que este:</p>

<p>``` ruby Regexp</p>

<h1>1.9.3 e 2.0</h1>

<blockquote><p>/May/ =~ 'Sometime in June'
=> nil
```</p></blockquote>

<p>Voltará <code>nil</code>. Desde o operador <code>=~</code> retorna um número quando se encontra uma correspondência e <code>nil</code> se não, você pode usar
conjuntos de expressões regulares como booleanos:</p>

<p>```ruby Regexp</p>

<h1>1.9.3 e 2.0</h1>

<blockquote><p>the_time = '10:24 AM'
puts "É de manhã!" if /AM/ =~ the_time
=> É de manhã!
```</p></blockquote>

<p>O operador <code>=~</code> também é ambidestro: Não importa se a string ou a expressão regular vem em primeiro lugar, para que pudéssemos
refazer o último exemplo, como:</p>

<p>```ruby Regexp</p>

<h1>1.9.3 e 2.0</h1>

<blockquote><p>puts "É de manhã!" if '10:24 AM' =~ /AM/
=> É de manhã!
```</p></blockquote>

<p>Como disse, as expressões regulares são por padrão <code>case sensitive</code>: <code>/AM/</code> não corresponde <code>/am/</code>. Felizmente, você pode
transformar esse <code>case sensitive</code> colocando um i no fim de sua expressão, de modo que este:</p>

<p>```ruby Regexp</p>

<h1>1.9.3 e 2.0</h1>

<blockquote><p>puts "É de manhã!" if /AM/i =~ 'am'
=> É de manhã!
```</p></blockquote>

<p>Irá imprimir algo!</p>

<p>Além de seu uso mais ou menos independente com o operador <code>=~</code>, expressões regulares também entram em jogo nos métodos de <code>string</code>
que envolvem a pesquisa. Assim, você pode passar uma expressão regular para o método <a href="http://ruby-doc.org/core-2.0/String.html#method-i-gsub">gsub</a> da classe <code>string</code>, talvez para apagar todo o conteúdo de um documento:</p>

<p>```ruby Regexp
class Document
  # A maioria da classe omitida...</p>

<p>  def obscure_times!</p>

<pre><code>@content.gsub!( /\d\d:\d\d (AM|PM)/, '**:** **' )
</code></pre>

<p>  end
end
```</p>

<p>Expressão Regular é muito usado e em alguns momentos ajuda a reduzir bastante as condicionais.</p>

<p>Até mais... :)</p>
]]></content>
  </entry>
  
</feed>
