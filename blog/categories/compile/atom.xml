<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Compile | Rodrigo Martins]]></title>
  <link href="http://rrmartins.github.com/blog/categories/compile/atom.xml" rel="self"/>
  <link href="http://rrmartins.github.com/"/>
  <updated>2012-03-24T13:52:44-03:00</updated>
  <id>http://rrmartins.github.com/</id>
  <author>
    <name><![CDATA[Rodrigo Martins]]></name>
    <email><![CDATA[rodrigo@rrmartins.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Como usar metáforas de software?]]></title>
    <link href="http://rrmartins.github.com/blog/2012/03/24/como-usar-metaforas-de-software/"/>
    <updated>2012-03-24T10:23:00-03:00</updated>
    <id>http://rrmartins.github.com/blog/2012/03/24/como-usar-metaforas-de-software</id>
    <content type="html"><![CDATA[<p>Olá amigos, após ler um pouco sobre Metaforas de Construção de Software...</p>


<p> Vamos descrever agora como usar Metaforas..</p>


<ol>
    <li>
        <a href="/blog/2012/03/05/metaforas-de-desenvolvimento-de-software/">Metaforas de Desenvolvimento de Software</a>
    </li>
    <li>
        <a href="/blog/2012/03/05/a-importancia-das-metaforas/">A Importancia das Metaforas - Part I</a>
    </li>
    <li>
        <a href="/blog/2012/03/11/a-importancia-das-metaforas-parte-ii/">A Importancia das Metaforas - Part II</a>
    </li>
</ol>


<p><b>-> Como usar metáforas de software</b></p>

<p>Uma metáfora software é mais como um holofote de um mapa rodoviário. Ele não diz
onde encontrar a resposta, ela diz-lhe como olhar para ele. A metáfora serve
mais como uma heurística do que como um algoritmo.</p>

<!-- more -->


<p>Um algoritmo é um conjunto de instruções bem definidas para a realização de uma determinada
tarefa. Um algoritmo é previsível, determinista, e não está sujeita ao acaso.
Um algoritmo diz-lhe como ir do ponto A, ao ponto B sem desvios
sem viagens colaterais para pontos D, E e F, e não parando para cheirar as rosas ou
tome uma xícara de café. A heurística é uma técnica que ajuda você a procurar uma
responder. Seus resultados estão sujeitos a chance porque uma heurística telles você
apenas a forma de olhar, não o que encontrar. Ele não lhe diz como chegar diretamente
do ponto A ao ponto B, ele pode até não saber onde o ponto A eo ponto B são.
Com efeito, uma heurística é um algoritmo em uma roupa de palhaço. É menos previsível,
é mais divertido, e ele vem sem um de 30 dias, garantia de devolução do dinheiro.</p>

<p>Aqui é um algoritmo para dirigir a casa de alguém: Take Highway 167 sul
para Puyallup. Pegue a saída Sul Shopping Hill e conduzir 4,5 milhas até a colina.
Vire à direita na luz pelo supermercado, e depois tome a primeira à esquerda.
Vire para a garagem da casa grande tan à esquerda, na 714 Norte Cedar.</p>

<p>Aqui está uma heurística para chegar a casa de alguém? Encontre a última letra
nós lhe enviado. Conduza até a cidade no endereço de retorno. Quando você chegar à cidade,
perguntar a alguém onde é nossa casa. Todo mundo nos conhece alguém, será feliz para
ajudá-lo. Se você não consegue encontrar ninguém, chamar-nos de um telefone público, e
nós vamos buscá-la.</p>

<p>A diferença entre um algoritmo e uma heurística é sutil, e os dois
termos se sobrepõem ligeiramente. Para os propósitos deste livro, a principal diferença
entre os dois é o nível de engano a partir da solução.
Um algoritmo dá-lhe as instruções diretamente. Uma heurística diz-lhe
como descobrir as instruções para você mesmo, ou pelo menos onde procurar
para eles.</p>

<p>Tendo direções que disse-lhe exatamente como resolver seus problemas de programação
certamente facilitar a programação e os resultados mais previsíveis.
Mas a ciência programação ainda não está avançado e que não pode nunca ser.
A parte mais desafiadora de programação é conceituar o problema,
e muitos erros de programação são erros conceituais. Porque cada programa
é conceitualmente único, é dificil ou impossível criar um conjunto geral de
direcções que levam a uma solução em cada caso. Assim, saber como abordar
problemas, em geral, é pelo menos tão valioso como sabendo soluções specifc para
problemas específicos.</p>

<p>Como você usa metáforas de software? Use-os para lhe dar uma visão em sua
problemas de programação e processos. Use-os para ajudá-lo a pensar sobre o seu
programação das actividades e para ajudá-lo a imaginar maneiras melhores de fazer as coisas.
Você não será capaz de olhar para uma linha de código e dizer que ela viola a de
as metáforas descritas neste capítulo. Com o tempo, porém, a pessoa que
usa metáforas para iluminar o processo de desenvolvimento de software será percebido
como alguém que tem uma compreensão melhor da programação e produz um código melhor</p>

<h2>mais rápido do que pessoas que não os utilizam.</h2>

<p>Até a proxima galera.. ! :D</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A importância das metáforas - Parte II]]></title>
    <link href="http://rrmartins.github.com/blog/2012/03/11/a-importancia-das-metaforas-parte-ii/"/>
    <updated>2012-03-11T16:33:00-03:00</updated>
    <id>http://rrmartins.github.com/blog/2012/03/11/a-importancia-das-metaforas-parte-ii</id>
    <content type="html"><![CDATA[<p>Olá amigos nerd's... Continuando os estudos...</p>


<p><strong> A importância das metáforas - Parte II </strong></p>

<!-- more -->


<p>Considere o exemplo de uma pedra pesada oscila para frente e para trás em uma corda.
Antes de Galileu, um aristotélico olhar para a pedra balançando pensei que um
objeto pesado passou naturalmente a partir de uma posição mais elevada para uma estatística de descanso em uma menor
 uma. A aristotélica poderia pensar que o que a pedra estava realmente fazendo era
 caindo com dificuldade. Quando Galileu viu a pedra oscilante, ele viu um pêndulo.
 Ele pensou que o que a pedra estava realmente fazendo estava repetindo o mesmo movimento
 uma e outra vez, quase que perfeitamente.</p>

<p>Os poderes sugestivos dos dois modelos são bem diferentes. A aristotélica
que viu a pedra balançando como um objeto em queda seria observar o peso da pedra,
a altura a que tinha sido levantada, e o tempo que levou a vir para descansar.
Para o modelo de Galileu pêndulo, os fatores proeminentes eram diferentes.
Galileu observou peso da pedra, o raio de balanço do pêndulo,
o deslocamento angular, e o tempo de balanço. Galileu descobriu as leis do
Aristotélicos não conseguiram descobrir porque seu modelo levou-os a olhar diferente
fenômenos e fazer perguntas diferentes.</p>

<p>Metáforas contribuir para uma compreensão greate de desenvolvimento de software questões
da mesma forma que contribuam para uma maior compreensão do conhecimento científico
perguntas. Em sua palestra Prêmio Turing 1973, Charles Bachman descreveu o
mudar a partir do ponto de vista predominante earthcentered do universo a uma visão encontrada.
Modelo de Ptolomeu, centrado na Terra, durou sem grande desafio para 1400 anos.
Então, em 1543, Copérnico introduziu a teoria heliocêntrica, a idéia de que
o sol antes que a Terra era o centro do universo. Esta mudança na
modelos mentais levou finalmente à descoberta de novos planetas, a reclassificação
da Lua como um satélite, e não como um planeta, e uma compreensão diferente
do lugar da humanidade no universo.</p>

<p>Bachman comparou a mudança ptolomaico-to-copernicana em astronomia para a mudança na
programação de computadores no início de 1970. Quando Bachman fez a comparação, em 1973,
processamento de dados estava mudando de uma visão centrada no computador de sistemas de informação
a uma vista do banco de dados centralizada. Bachman apontou que os antigos de dados
processamento queria ver todos os dados como um fluxo seqüencial de cartões de fluxo
através de um computador (a visão centrada no computador). A mudança foi para se concentrar em um
conjunto de dados em que o computador passou a agir (uma visão de banco de dados-oriented).</p>

<p>O valor das metáforas não deve ser subestimado. Metáforas têm a virtude
de um comportamento esperado que seja compreendida por todos. Comunicação desnecessária e
mal-entendidos são reduzido. Apreendizado e educação são mais rápidos. Com efeito,
metáforas são uma forma de internalizar e abstrair conceitos, permitindo que um de pensamento estar em um plano superior e os erros de baixo nível que devem ser evitadas.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A importância das metáforas]]></title>
    <link href="http://rrmartins.github.com/blog/2012/03/05/a-importancia-das-metaforas/"/>
    <updated>2012-03-05T22:47:00-03:00</updated>
    <id>http://rrmartins.github.com/blog/2012/03/05/a-importancia-das-metaforas</id>
    <content type="html"><![CDATA[<p>Olá amigos nerd's... Continuando os estudos...</p>


<p><strong> A importância das metáforas! </strong></p>

<!-- more -->


<p>Desenvolvimentos importantes com freqüência, surgir de analogias. Ao comparar tópico
você entende mal a algo similar você entender melhor,
você pode vir acima com idéias que resultaria em uma melhor compreensão do
lessfamiliar tópico. Este uso da metáfora é chamada de "modelagem".
A história da ciência está cheia de descobertas baseada na exploração
o poder das metáforas. O químico Kekulé teve um sonho em que viu
uma cobra agarrar a cauda em sua boca. Quando ele acordou, percebeu que um
estrutura molecular com base em forma de anel semelhante seria responsável por
as propriedades de benzeno. Experimentação mais
confirmou a hipótese (Barbour 1966).</p>

<p>A teoria cinética dos gases foi baseada em um modelo de "sinuca".
As moléculas de gás foram pensados ​​para ter massa e colidem elasticamente,
como fazer bolas de bilhar, e muitos teoremas úteis foram desenvolvidos a partir deste modelo.</p>

<p>A teoria ondulatória da luz foi desenvolvido em grande parte por explorar
semelhanças entre luz e som. Luz e som tem amplitude (brilho,
Sonoridade), freqüência (cor, altura), e outras propriedades em comum.
A comparação entre as teorias de ondas de som e luz foi tão produtivo
scientista que passou um grande esforço à procura de um meio que
se propagar o som se propaga via aérea luz. Eles ainda lhe deram um nome
- "Éter" - mas nunca encontraram o meio. A analogia foi tão frutífera
em algumas formas provou ser enganosa neste caso.</p>

<p>Em geral, o poder dos modelos é que eles estão vivas e pode ser apreendido como
conjuntos conceituais. Eles sugerem propriedades, relações e adicionais
áreas de investigação. Às vezes, um modelo sugere áreas de investigação que são enganosas,
caso em que a metáfora tem sido sobrecarregados. Quando o cientista parecia
para o éter, que seu modelo sobrecarregado.</p>

<p>Como você poderia esperar, algumas metáforas são melhores que outros.
Uma boa metáfora é simples, se relaciona bem com metáfora relevantes,
e explica grande parte das evidências experimentais e outros fenômenos observados.</p>

<p>Aguardem... Em breve novos conteudos!!!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Metáforas de Desenvolvimento de Software]]></title>
    <link href="http://rrmartins.github.com/blog/2012/03/05/metaforas-de-desenvolvimento-de-software/"/>
    <updated>2012-03-05T20:53:00-03:00</updated>
    <id>http://rrmartins.github.com/blog/2012/03/05/metaforas-de-desenvolvimento-de-software</id>
    <content type="html"><![CDATA[<p>Olá amigos nerd's... Continuando os estudos...</p>


<p><strong> Metáforas para uma compreensão mais rica de Desenvolvimento de Software </strong></p>

<!-- more -->


<p>Ciência da Computação tem uma parte da linguagem mais colorida de qualquer campo.
Em que outro campo você pode andar em uma sala estéril, cuidadosamente controlada no
20° C, e encontrar os vírus, cavalos de Tróia, <a href="http://cartilha.cert.br/malware/sec6.html" target=_blank>worms</a>, bugs, bombas, falha,
chamas, trocadores de sexo torcidas, e erros fatais?</p>

<p>Essas metáforas gráficas descrevem fenômenos de software específicos.
Igualmente metáforas vivas descrevem fenômenos mais amplos, e você pode usá-los
para melhorar a sua compreensão do processo de desenvolvimento de software.</p>

<p>O resto do livro não dependem diretamente da discussão de metáforas
neste capítulo. Ignorá-lo se você quiser chegar às sugestões práticas.
Leia-o se você quer pensar sobre desenvolvimento de software de forma mais clara.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Por que Construção de Software é Importante? - Parte 2]]></title>
    <link href="http://rrmartins.github.com/blog/2012/03/03/por-que-construcao-de-software-e-importante-parte-2/"/>
    <updated>2012-03-03T19:55:00-03:00</updated>
    <id>http://rrmartins.github.com/blog/2012/03/03/por-que-construcao-de-software-e-importante-parte-2</id>
    <content type="html"><![CDATA[<p>Olá amigos nerd's... Continuando os estudos...</p>


<p><strong> Por que Construção de Software é Importante? - Parte 2</strong></p>

<!-- more -->


<p>
Com foco na construção, a produtividade do programador indivídual pode
  melhorar enormemente. Um estudo clássico de Sackman, Erikson e Grant mostrou
  que a produtividade dos programadores individuais variaram por um fator de 10 a 20
  durante a construção (1968). Desde o seu estudo, seus resultados têm
  se confirmado por numerosos outros estudos (...). Este livro, ajuda a todos os programadores
  aprender tecnicas que já são utilizados pelos melhores programadores.
</p>


<p>
  Produto de construção, o código-fonte, é muitas vezes a única
  descrição precisa do software. Em muitos projetos, a documentação só
  disponível para os programadores é o próprio código. Requisitos e especificações
  documentos de projeto pode ir fora da data, mas o código fonte é sempre atualizado.
  Consequentemente, é imperativo que o código fonte de ser o mais alto possível
  qualidade. A aplicação consistente de técnicas para melhoria do código-fonte
  faz a diferença entre um aparelho de Rube Goldberg e uma análise detalhada,
  corrigir, e um programa informativo portanto. Tais técnicas são mais
  efectivamente aplicado durante a construção.
 </p>


<p> <p>
  A construção é a única atividade que está garantido para ser feito.
  O projeto de software ideal passa por desenvolvimento de requisitos cuidadoso e
  projeto arquitetônico antes do início da construção. O projeto ideal
  sofre abrangente, o teste do sistema estatisticamente controlada após
  construção.
 </p>
 <p>
  Imperfeitos, projetos do mundo real, no entanto, muitas vezes ignorar exigências
  e design para pular para a construção. Eles deixam de testes, porque eles têm
  muitos erros para corrigir e eles ficar sem tempo.
  Mas não importa o quão apressado ou mal planejado um projeto é que você não pode
  cair de construção, é onde a borracha encontra a estrada.
 </p>
 <p>
  Melhorar a construção é, assim, uma forma de melhorar a qualquer desenvolvimento de software
  esforço, não importa o quão abreviado.
  </p></p>

<p>Texto retirado do livro Code Compile, de Steve McConnell.
Até a proxima amigos... :D</p>
]]></content>
  </entry>
  
</feed>
