<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: RealTime | Rodrigo Martins]]></title>
  <link href="http://rrmartins.github.com/blog/categories/realtime/atom.xml" rel="self"/>
  <link href="http://rrmartins.github.com/"/>
  <updated>2012-08-05T19:21:51-03:00</updated>
  <id>http://rrmartins.github.com/</id>
  <author>
    <name><![CDATA[Rodrigo Martins]]></name>
    <email><![CDATA[rodrigo@rrmartins.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Desenvolvendo Um Chat com NodeJS]]></title>
    <link href="http://rrmartins.github.com/blog/2012/04/30/desenvolvendo-um-chat-com-nodejs/"/>
    <updated>2012-04-30T17:34:00-03:00</updated>
    <id>http://rrmartins.github.com/blog/2012/04/30/desenvolvendo-um-chat-com-nodejs</id>
    <content type="html"><![CDATA[<p>Olá Developers...</p>

<p>Vamos desenvolver um pequeno Chat em NodeJS... Estou começando com os estudos de NodeJS tambem, e tem sido de grande valia para mim...</p>

<p>Então, antes de mais nada, vamos fazer o download do NodeJS no link <a href="http://nodejs.org/#download">nodejs.org</a>, ou podemos instalar com o <a href="https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager">Node Package Manager (npm)</a>. Eu estou usando o npm, e indico a todos... :D</p>

<p>Vamos criar a aplicação, crie uma pasta com o nome da aplicação:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Criando Pasta </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir app_chat</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Agora vamos entrar na pasta do projeto, e criar o arquivo que será nosso servidor, nome exemplo: heloword_server.js.</p>

<p>Hora de começar a brincar com o servidor.</p>

<p>``` javascript Criando o server
var fs = require('fs');
var server = require('http').createServer(function(req, response){
  fs.readFile('helloworld.html', function(err, data){</p>

<pre><code>response.writeHead(200, {'Content-Type':'text/html'});  
response.write(data);  
response.end();
</code></pre>

<p>  });
});
```</p>

<p>Na linha 1, temos um require('fs'), este é um framework do nodejs, que serve para trabalhar com arquivos.</p>

<p>Na linha 2, estamos instanciando e criando o server 'http'.</p>

<p>Na linha 3, já dentro da função do createServer, temos a leitura do arquivo que será alimentado, e uma criação de função.</p>

<p>Na linha 4, estamos escrevendo o arquivo, lembrando que ele será do tipo HTML.</p>

<p>Na linha 5, temos a escrita no arquivo. E abaixo finalizamos.</p>

<p>Este processo de leitura do arquivo, ocorre sempre que alguem entra na aplicação.</p>

<p>Vamos continuar, agora vamos colocar uma porta para o servidor.</p>

<p>``` javascript Criando uma porta e aplicando ao server
var port = process.env.PORT || 3000;</p>

<p>server.listen(port, function() {
  console.log("Listening on " + port);
});
```</p>

<p>Neste exemplo acima, pegamos o número da porta do processo, ou fica valendo a porta 3000.</p>

<p>Logo depois coloco a port no server, neste exemplo eu criei uma função, só para logar o numero da porta, logo nos logs do servidor estará o numero da porta, quando iniciar.</p>

<p>Vamos agora começar a escrever as funcionalidades do servidor. Vamos escrever as funções que tratam que esta entrando e quem esta saindo da app.</p>

<p>``` javascript Function Connected e Disconnected
var everyone = require("now").initialize(server);</p>

<p>everyone.connected(function(){
  console.log("Joined: " + this.now.name);
});</p>

<p>everyone.disconnected(function(){
  console.log("Left: " + this.now.name);
});
```</p>

<p>Nesta função, instancio o framework '<a href="http://www.nowjs.com/">now</a>', que voce pode esta instalando com o comando: npm install now</p>

<p>Dentro do '<a href="http://www.nowjs.com/">now</a>', temos 2 funções, a <a href="http://www.nowjs.com/doc/symbols/nowjs#event:connect">connected</a> e a <a href="http://www.nowjs.com/doc/symbols/nowjs#event:disconnect">disconnected</a>, nessas funções, estou registrando quem esta se logando e quem esta saindo da aplicação.</p>

<p>Agora vem a parte legal, vamos criar em modo de execução 2 funções, só que uma dentro da outra, ou seja, vamos usar fortemente o conceito de <a href="http://lucastex.com.br/2009/10/21/nao-tenha-medo-das-closures/">closure</a>, mas por favor, não tenha medo disso, parece estranho no inicio, mas acredite o trem é legal...</p>

<p>``` javascript Criando Funções dentro de Funções
everyone.now.distributeMessage = function(message){</p>

<pre><code>console.log("mensagem "+message);
message = message.replace(/(&lt;([^&gt;]+)&gt;)/ig,"");
everyone.now.receiveMessage(this.now.name, message);
</code></pre>

<p>};
```</p>

<p>Neste bloco de codigos, estamos criando a função distributeMessage, que esta, receberá a mensagem.</p>

<p>Na linha 2, estou somente logando a mensagem que chegou.</p>

<p>Na liinha 3, estamos tratando com uma expressão regular, a mensagem que chega, para que ninguem possa trollar a app com codigo de javascript, e outras coisas...</p>

<p>Na linha 4, estamos fazendo a chamada da função que esta na view, e ela que imprimi a mensagem no DOM.</p>

<p>Logo o arquivo do helloword_server.js precisa ficar assim:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Arquivo do Server NodeJS (helloworld_server.js)</span> <a href='/downloads/code/helloworld_server.js'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="err">﻿</span><span class="kd">var</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;fs&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">server</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;http&#39;</span><span class="p">).</span><span class="nx">createServer</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">response</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span><span class="s1">&#39;helloworld.html&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">response</span><span class="p">.</span><span class="nx">writeHead</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="p">{</span><span class="s1">&#39;Content-Type&#39;</span><span class="o">:</span><span class="s1">&#39;text/html&#39;</span><span class="p">});</span>
</span><span class='line'>    <span class="nx">response</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">response</span><span class="p">.</span><span class="nx">end</span><span class="p">();</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">port</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">PORT</span> <span class="o">||</span> <span class="mi">3000</span><span class="p">;</span>
</span><span class='line'><span class="nx">server</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="nx">port</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Listening on &quot;</span> <span class="o">+</span> <span class="nx">port</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">everyone</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;now&quot;</span><span class="p">).</span><span class="nx">initialize</span><span class="p">(</span><span class="nx">server</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">everyone</span><span class="p">.</span><span class="nx">connected</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Joined: &quot;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">now</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">everyone</span><span class="p">.</span><span class="nx">disconnected</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Left: &quot;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">now</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">everyone</span><span class="p">.</span><span class="nx">now</span><span class="p">.</span><span class="nx">distributeMessage</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">message</span><span class="p">){</span>
</span><span class='line'>	<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;mensagem &quot;</span><span class="o">+</span><span class="nx">message</span><span class="p">);</span>
</span><span class='line'>	<span class="nx">message</span> <span class="o">=</span> <span class="nx">message</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/(&lt;([^&gt;]+)&gt;)/ig</span><span class="p">,</span><span class="s2">&quot;&quot;</span><span class="p">);</span>
</span><span class='line'>	<span class="nx">everyone</span><span class="p">.</span><span class="nx">now</span><span class="p">.</span><span class="nx">receiveMessage</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">now</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span> <span class="nx">message</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Criando a View</h3>


<p>A nossa view, será basicamente HTML, e um pouco de simples javascript, então, dessa vez será 0 de explicação.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>View do Chat (helloworld.html)</span> <a href='/downloads/code/helloworld.html'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'><span class="nt">&lt;title&gt;</span>nowjs test<span class="nt">&lt;/title&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;http://ajax.googleapis.com/ajax/libs/jquery/1.5.1/jquery.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;nowjs/now.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;script&gt;</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">empty</span><span class="p">(</span><span class="nx">v</span><span class="p">){</span>
</span><span class='line'>	<span class="k">if</span> <span class="p">(</span><span class="nx">v</span><span class="o">==</span><span class="kc">null</span> <span class="o">||</span> <span class="nx">v</span><span class="o">==</span><span class="mi">0</span> <span class="o">||</span> <span class="nx">v</span><span class="o">==</span><span class="s1">&#39;&#39;</span> <span class="o">||</span> <span class="nx">v</span><span class="o">==</span><span class="s2">&quot;&quot;</span><span class="p">){</span>
</span><span class='line'>		<span class="k">return</span> <span class="kc">true</span>
</span><span class='line'><span class="p">}</span><span class="k">else</span> <span class="p">{</span><span class="k">return</span> <span class="kc">false</span><span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">now</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">prompt</span><span class="p">(</span><span class="s2">&quot;Qual seu Nome?&quot;</span><span class="p">,</span> <span class="s2">&quot;nome&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">now</span><span class="p">.</span><span class="nx">receiveMessage</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">message</span><span class="p">){</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">message</span><span class="p">.</span><span class="nx">length</span> <span class="o">&lt;</span> <span class="mi">1</span><span class="p">){</span>
</span><span class='line'>	<span class="nx">alert</span><span class="p">(</span><span class="s2">&quot;mensagem vazia&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">empty</span><span class="p">(</span><span class="nx">message</span><span class="p">)){</span>
</span><span class='line'>	<span class="nx">alert</span><span class="p">(</span><span class="s2">&quot;mensagem vazia&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span><span class="k">else</span>  <span class="p">{</span>
</span><span class='line'>    	<span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#messages&quot;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span><span class="s2">&quot;&lt;br&gt;&quot;</span> <span class="o">+</span> <span class="nx">name</span> <span class="o">+</span> <span class="s2">&quot;: &quot;</span> <span class="o">+</span> <span class="nx">message</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#send-button&quot;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">now</span><span class="p">.</span><span class="nx">distributeMessage</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#text-input&quot;</span><span class="p">).</span><span class="nx">val</span><span class="p">());</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#text-input&quot;</span><span class="p">).</span><span class="nx">val</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;messages&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">id=</span><span class="s">&quot;text-input&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;button&quot;</span> <span class="na">value=</span><span class="s">&quot;Send&quot;</span> <span class="na">id=</span><span class="s">&quot;send-button&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Proximo, passo, só levantar o servidor:
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Levantando o Servidor </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>node helloworld_server.js</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>É isso ai amigos, segue o lick de como a aplicação ficou no heroku, e o lick do repositorio dela no github.</p>

<p>Heroku -> <a href="http://nodechat.herokuapp.com">nodechat.herokuapp.com</a></p>

<p>Github -> <a href="https://github.com/rrmartins/node_chat">Node Chat</a></p>

<p>Até a proxima..</p>
]]></content>
  </entry>
  
</feed>
