<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: marc-andre | Rodrigo Martins]]></title>
  <link href="http://rrmartins.com/blog/categories/marc-andre/atom.xml" rel="self"/>
  <link href="http://rrmartins.com/"/>
  <updated>2015-09-29T14:23:32-03:00</updated>
  <id>http://rrmartins.com/</id>
  <author>
    <name><![CDATA[Rodrigo Martins]]></name>
    <email><![CDATA[rodrigo@rrmartins.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[Tradução] Ruby 2.0 por Exemplos]]></title>
    <link href="http://rrmartins.com/blog/2013/02/26/traducao-ruby-2-dot-0-por-exemplos/"/>
    <updated>2013-02-26T22:54:00-03:00</updated>
    <id>http://rrmartins.com/blog/2013/02/26/traducao-ruby-2-dot-0-por-exemplos</id>
    <content type="html"><![CDATA[<!--more-->


<p>Olá amigos,</p>

<p>Tudo tranquilo?</p>

<p>Estava conversando com o <a href="https://twitter.com/malafortune">Marc-Andre Lafortune</a>, do blog <a href="http://blog.marc-andre.ca/">Marc Andre</a>, sobre a nova versão do <a href="http://www.ruby-lang.org/en/news/2013/02/24/ruby-2-0-0-p0-is-released/">Ruby 2.0</a>, e ele me permitiu traduzir o <a href="http://blog.marc-andre.ca/2013/02/23/ruby-2-by-example/">post dele</a> e ai vai.. :)</p>

<p>Antes de começar a tradução, gostaria de lembrar do que disse o proprio criador do #Ruby no <a href="https://twitter.com/yukihiro_matz/statuses/305334327938519040">twitter</a>:</p>

<p><blockquote><p></p></p><p><p>20 years has passed since I started developing Ruby. I really appreciate your support from the great Ruby community. Thank you!</p></p><p><p></p><footer><strong>@yukihiro_matz <a href="https://twitter.com/yukihiro_matz/status/305334327938519040">https://twitter.com/yukihiro_matz/status/305334327938519040</a></strong></footer></blockquote></p>

<p>Neste trecho, <a href="https://twitter.com/yukihiro_matz">Matz</a> diz que desde quando começou a desenvolver o Ruby já se passou 20 anos e agradece a toda a comunidade que ajuda direta ou indiretamente.</p>

<p>Vamos a tradução&hellip; :D</p>

<hr />

<p>Tradução</p>

<hr />

<p>Um rápido resumo de alguns dos novos recursos do <a href="http://www.ruby-lang.org/en/news/2013/02/24/ruby-2-0-0-p0-is-released/">Ruby 2.0.0</a>:</p>

<h3>Alterações na Linguagem</h3>

<pre><code class="ruby">    # Ruby 1.9:
  # (Do action_view/helpers/text_helper.rb)
def cycle(first_value, *values)
  options = values.extract_options!
  name = options.fetch(:name, 'default')
  # ...
end

# Ruby 2.0:
def cycle(first_value, *values, name: 'default')
  # ...
end

# ATENÇÃO: Não exatamente idêntica, como palavras-chave são aplicadas:
cycle('odd', 'even', nme: 'foo')
# =&gt; ArgumentError: unknown keyword: nme

# Para obter o mesmo resultado e melhor exato:
def cycle(first_value, *values, name: 'default', **ignore_extra)
  # ...
end
</code></pre>

<p>Isso faz com que as definições de método seja muito flexível. Em resumo:</p>

<pre><code class="ruby">def name({required_arguments, ...}
         {optional_arguments, ...}
         {*rest || additional_required_arguments...} # Você Sabia?
         {keyword_arguments: "with_defaults"...}
         {**rest_of_keyword_arguments}
         {&amp;block_capture})
</code></pre>

<p>Em <a href="http://www.ruby-lang.org/en/news/2013/02/24/ruby-2-0-0-p0-is-released/">Ruby 2.0.0</a>, argumentos devem ter padrões, ou então deve ser capturado por <code>**extra</code> no final. Próxima versão <a href="https://bugs.ruby-lang.org/issues/7701">permitirá</a> argumentos obrigatórios, por exemplo, <code>def hello(optional: 'default', required:)</code>, mas há <a href="http://stackoverflow.com/questions/13250447/can-i-have-required-named-parameters-in-ruby-2-x/15078852#15078852">maneiras de fazer isso agora</a>.</p>

<p>Padrões, para parâmetros opcionais ou argumentos de palavras-chave, pode ser na maior parte qualquer expressão, incluindo chamadas de método para o objeto atual e pode usar os parâmetros anteriores.</p>

<p>Um exemplo complexo que mostra a maior parte deste:</p>

<pre><code class="ruby">class C
  def hi(needed, needed2,
         maybe1 = "42", maybe2 = maybe1.upcase,
         *args,
         named1: 'hello', named2: a_method(named1, needed2),
         **options,
         &amp;block)
  end

  def a_method(a, b)
    # ...
  end
end

C.instance_method(:hi).parameters
# =&gt; [ [:req, :needed], [:req, :needed2],
#      [:opt, :maybe1], [:opt, :maybe2],
#      [:rest, :args],
#      [:key, :named1], [:key, :named2],
#      [:keyrest, :options],
#      [:block, :block] ]
</code></pre>

<p><a href="http://bugs.ruby-lang.org/issues/7922">Bug conhecido</a>: não é atualmente possível ignorar opções extras sem citar o argumento <code>**</code>.</p>

<h3>Criação de lista de Symbol</h3>

<p>Maneira fácil de criar listas de símbolos com <code>%i</code> e <code>%I</code> (onde i é para uso interno):</p>

<pre><code class="ruby"># Ruby 1.9:
KEYS = [:foo, :bar, :baz]

# Ruby 2.0:
KEYS = %i[foo bar baz]
</code></pre>

<h3>Codificação padrão é UTF-8</h3>

<p>Nenhum comentário magico é necessário caso a codificação for UTF-8.</p>

<pre><code class="ruby"># Ruby 1.9:
# encoding: utf-8
# ^^^ previous line was needed!
puts "❤ Rodrigo Martins ❤"

# Ruby 2.0:
puts "❤ Rodrigo Martins ❤"
</code></pre>

<h3>Variáveis ​​não utilizadas pode começar com _</h3>

<p>Você sabia que Ruby pode avisá-lo sobre as variáveis ​​utilizadas?</p>

<pre><code class="ruby"># Qualquer versão do Ruby, com aviso em:
ruby -w -e "
  def hi
    hello, world = 'hello, world'.split(', ')
    world
  end"
# =&gt; warning: assigned but unused variable - hello
</code></pre>

<p>A maneira de evitar o aviso era usar <code>_</code>. Agora podemos usar qualquer nome de variável começando com um underscore:</p>

<pre><code class="ruby"># Ruby 1.9
ruby -w -e "
  def foo
    _, world = 'hello, world'.split(', ')
    world
  end"
# =&gt; no warning

# Ruby 2.0
ruby -w -e "
  def hi
    _hello, world = 'hello, world'.split(', ')
    world
  end"
# =&gt; no warning either
</code></pre>

<h2>Mudanças das Classes Principais</h2>

<h3>Prepend</h3>

<p><a href="http://ruby-doc.org/core-2.0/String.html#method-i-prepend">Module#prepend</a> insere um módulo no início da cadeia de ligação. Pode muito bem substituir por <code>alias_method_chain</code>.</p>

<pre><code class="ruby"># Ruby 1.9:
class Range
  # Do active_support/core_ext/range/include_range.rb
  # Estende o padrão Range#include? para suportar comparações de range
  def include_with_range?(value)
    if value.is_a?(::Range)
      # 1...10 inclue 1..9 mas não inclue 1..10.
      operator = exclude_end? &amp;&amp; !value.exclude_end? ? :&lt; : :&lt;=
      include_without_range?(value.first) &amp;&amp; value.last.send(operator, last)
    else
      include_without_range?(value)
    end
  end

  alias_method_chain :include?, :range
end

Range.ancestors # =&gt; [Range, Enumerable, Object...]

# Ruby 2.0
module IncludeRangeExt
  # Estende o padrão Range#include? para suportar comparações de range
  def include?(value)
    if value.is_a?(::Range)
      # 1...10 inclue 1..9 mas não inclue 1..10.
      operator = exclude_end? &amp;&amp; !value.exclude_end? ? :&lt; : :&lt;=
      super(value.first) &amp;&amp; value.last.send(operator, last)
    else
      super
    end
  end
end

class Range
  prepend IncludeRangeExt
end

Range.ancestors # =&gt; [IncludeRangeExt, Range, Enumerable, Object...]
</code></pre>

<h3>Refinamentos [experimental]</h3>

<p>No Ruby 1.9, se você usa um metodo <code>alias_method_chain</code>, a nova definição ocorre em todos os lugares. Em <a href="http://www.ruby-lang.org/en/news/2013/02/24/ruby-2-0-0-p0-is-released/">Ruby 2.0.0</a>, você pode fazer esse tipo de mudança apenas para si mesmo utilizando o <a href="http://ruby-doc.org/core-2.0/Module.html#method-i-refine">Module#refine</a>:</p>

<pre><code class="ruby"># Ruby 2.0
module IncludeRangeExt
  refine Range do
    # Estende o padrão Range#include? para suportar comparações de range
    def include?(value)
      if value.is_a?(::Range)
        # 1...10 inclue 1..9 mas não inclue 1..10.
        operator = exclude_end? &amp;&amp; !value.exclude_end? ? :&lt; : :&lt;=
        super(value.first) &amp;&amp; value.last.send(operator, last)
      else
        super
      end
    end
  end
end

def test_before(r)
  r.include?(2..3)
end
(1..4).include?(2..3) # =&gt; false (comportamento padrão)

# Agora liga o refinamento:
using IncludeRangeExt

(1..4).include?(2..3) # =&gt; true  (comportamento refinado)

def test_after(r)
  r.include?(2..3)
end
test_after(1..4) # =&gt; true (definido depois de usar, o comportamento tão refinado)

3.times.all? do
  (1..4).include?(2..3)
end # =&gt; true  (comportamento refinado)

# Mas a versão refinada acontece apenas para chamadas definidas após o uso:
test_before(1..4) # =&gt; false (definido anteriormente, não afetado)
require 'some_other_file' # =&gt; não afetado, usará o comportamento predefinido

# Note:
(1..4).send :include?, 2..3 # =&gt; false (por agora, envio ignora refinamentos)
</code></pre>

<p>Spec completo está <a href="http://bugs.ruby-lang.org/projects/ruby-trunk/wiki/RefinementsSpec">aqui</a> e está sujeita a mudanças em versões posteriores. Discussão mais aprofundada <a href="http://benhoskin.gs/2013/02/24/ruby-2-0-by-example#refinements">aqui</a>.</p>

<h3>Enumeradores Lazy</h3>

<p>Um <a href="http://ruby-doc.org/core-2.0/Enumerable.html">Enumerable</a> pode ser transformado em um lazy com o novo método <a href="http://ruby-doc.org/core-2.0/Enumerable.html#method-i-lazy">Enumerable#lazy</a>:</p>

<pre><code class="ruby"># Ruby 2.0:
lines = File.foreach('a_very_large_file')
            .lazy # por isso só ler as partes necessárias!
            .select {|line| line.length &lt; 10 }
            .map(&amp;:chomp)
            .each_slice(3)
            .map {|lines| lines.join(';').downcase }
            .take_while {|line| line.length &gt; 20 }
  # =&gt; Enumerador lazy, ainda não executa nada
lines.first(3) # =&gt; Lê o arquivo até que ele retornar 3 elementos
               # ou até que um elemento de length &lt;= 20 é
               # retornado (por causa da take_while)

# Para consumir o enumerável:
lines.to_a # ou...
lines.force # =&gt; Lê o arquivo e retorna uma array
lines.each{|elem| puts elem } # =&gt; Lê o arquivo e imprime os elementos resultantes
</code></pre>

<p>Note-se que, muitas vezes, <code>lazy</code> é mais lento do que uma versão não <code>lazy</code>. Ele deve ser usado somente quando ele realmente faz sentido, não apenas para evitar a construção de um <code>array</code> intermediário.</p>

<pre><code class="ruby">require 'fruity'
r = 1..100
compare do
  lazy   { r.lazy.map(&amp;:to_s).each_cons(2).map(&amp;:join).to_a }
  direct { r     .map(&amp;:to_s).each_cons(2).map(&amp;:join)      }
end
# =&gt; direto é mais rápida do que por lazy 2x ± 0.1
</code></pre>

<h3>Tamanho Lazy</h3>

<p><a href="http://ruby-doc.org/core-2.0/Enumerator.html#method-i-size">Enumerator#size</a> pode ser chamado para obter o tamanho do enumerador sem consumi-lo (se disponível).</p>

<pre><code class="ruby"># Ruby 2.0:
(1..100).to_a.permutation(4).size # =&gt; 94109400
loop.size # =&gt; Float::INFINITY
(1..100).drop_while.size # =&gt; nil
</code></pre>

<p>Ao criar enumeradores, seja com <code>to_enum</code>, <code>Enumerator::New</code> ou <code>Enumerator::Lazy::New</code> é possível definir um tamanho muito:</p>

<pre><code class="ruby"># Ruby 2.0:
fib = Enumerator.new(Float::INFINITY) do |y|
  a = b = 1
  loop do
    y &lt;&lt; a
    a, b = b, b+a
  end
end

still_lazy = fib.lazy.take(1_000_000).drop(42)
still_lazy.size # =&gt; 1_000_000 - 42

class Enumerable
  def skip(every)
    unless block_given?
      return to_enum(:skip, every) { size &amp;&amp; (size+every)/(every + 1) }
    end
    each_slice(every+1) do |first, *ignore|
      yield last
    end
  end
end

(1..10).skip(3).to_a # =&gt; [1, 5, 9]
(1..10).skip(3).size # =&gt; 3, sem executar o loop
</code></pre>

<p>Detalhes adicionais e exemplos na doc de <a href="http://ruby-doc.org/core-2.0/Object.html#method-i-to_enum">to_enum</a>.</p>

<h3><strong>dir</strong></h3>

<p>Embora <a href="http://ruby-doc.org/core-2.0/Kernel.html#method-i-require_relative">require_relative</a> torna o uso de <code>File.dirname(__FILE__)</code> muito menos freqüentes, agora podemos usar <a href="http://ruby-doc.org/core-2.0/Kernel.html#method-i-__dir__"><strong>dir</strong></a></p>

<pre><code class="ruby"># Ruby 1.8:
require File.dirname(__FILE__) + "/lib"
File.read(File.dirname(__FILE__) + "/.Gemfile")

# Ruby 1.9:
require_relative 'lib'
File.read(File.dirname(__FILE__) + '/.config')

# Ruby 2.0
require_relative 'lib' # há necessidade de usar __dir__ por isso!
File.read(__dir__ + '/.config')
</code></pre>

<h3>bsearch</h3>

<p>Pesquisa binária já está disponível, usando <a href="http://ruby-doc.org/core-2.0/Array.html#method-i-bsearch">Array#bsearch</a> ou <a href="http://ruby-doc.org/core-2.0/Range.html#method-i-bsearch">Range#bsearch</a>:</p>

<pre><code class="ruby"># Ruby 2.0:
ary = [0, 4, 7, 10, 12]
ary.bsearch {|x| x &gt;=   6 } #=&gt; 7
ary.bsearch {|x| x &gt;= 100 } #=&gt; nil

# Também em range, incluindo range de floats:
(Math::PI * 6 .. Math::PI * 6.5).bsearch{|f| Math.cos(f) &lt;= 0.5}
# =&gt; Math::PI * (6+1/3.0)
</code></pre>

<h3>to_h</h3>

<p>Existe agora uma forma oficial para converter uma classe a um Hash, utilizando <code>to_h</code>:</p>

<pre><code class="ruby"># Ruby 2.0:
Car = Struct.new(:make, :model, :year) do
  def build
    #...
  end
end
car = Car.new('Toyota', 'Prius', 2014)
car.to_h # =&gt; {:make=&gt;"Toyota", :model=&gt;"Prius", :year=&gt;2014}
nil.to_h # =&gt; {}
</code></pre>

<p>Isso foi implementado para <code>nil</code>, <code>Struct</code> e <code>OpenStruct</code>, mas não para <code>Array</code>/<code>Enumerable</code>:</p>

<pre><code class="ruby">{hello: 'world'}.map{|k, v| [k.to_s, v.upcase]}
                .to_h # =&gt; NoMethodError:
# undefined method `to_h' for [["hello", "WORLD"]]:Array
</code></pre>

<p>Se você acha que isso seria um recurso útil, você deve <a href="http://bugs.ruby-lang.org/issues/7292">tentar convencer Matz</a>.</p>

<h3>caller_locations</h3>

<p>É usado para ser difícil saber qual o método chamado apenas. Que não foi muito eficiente, dado que o backtrace todo teve de ser retornado. Cada frames foi uma seqüência que precisava ser computado primeiramento pelo Ruby e provavelmente analisado depois.</p>

<p>Entra <a href="http://ruby-doc.org/core-2.0/Kernel.html#method-i-caller_locations">caller_locations</a> que retorna a informação de uma forma de objeto e com uma api melhor que pode limitar o número de frames solicitados.</p>

<pre><code class="ruby"># Ruby 1.9:
def whoze_there_using_caller
  caller[0][/`([^']*)'/, 1]
end

# Ruby 2.0:
def whoze_there_using_locations
  caller_locations(1,1)[0].label
end
</code></pre>

<p>Quanto mais rápido é? <a href="https://gist.github.com/marcandre/5041813">Um teste simples</a> me dá um aumento de velocidade de 45x de um stacktrace curto, e 100x para um stacktrace de 100 entradas!</p>

<p>A informação extra, como o caminho do arquivo, número da linha, ainda são acessíveis, em vez de pedir para o <code>label</code>, para pedir <code>path</code> ou <code>lineno</code>.</p>

<h3>Otimizações</h3>

<p>É difícil mostrar a maioria das otimizações de código, mas algumas otimizações agradáveis que foi feito no <a href="http://www.ruby-lang.org/en/news/2013/02/24/ruby-2-0-0-p0-is-released/">Ruby 2.0.0</a>. Em particular, o GC foi otimizado, em particular para fazer bifurcar muito mais rápido.</p>

<p>Uma otimização que podemos demonstrar é fazer de imediatos muitos floats em sistemas de 64 bits. Isso evita a criação de novos objetos em muitos casos:</p>

<pre><code class="ruby"># Ruby 1.9
4.2.object_id == 4.2.object_id # =&gt; false

# Ruby 2.0
warn "Optimization only on 64 bit systems" unless 42.size * 8 == 64
4.2.object_id == 4.2.object_id # =&gt; true (4.2 é imediato)
4.2e100.object_id == 4.2e100.object_id # =&gt; false (4.2e100 não é)
</code></pre>

<h2>O que mais?</h2>

<p>Uma extensa lista de mudanças é o <a href="https://github.com/marcandre/ruby/blob/news/NEWS.rdoc">arquivo NEWS</a>.</p>

<h2>Eu quero!</h2>

<p>Experimente hoje:</p>

<ul>
<li>Instalar com rvm: <code>rvm get head &amp;&amp; rvm install 2.0.0</code> (note que <code>rvm get stable</code> não é suficiente!)</li>
<li>Instalar com rbenv: <code>rbenv install 2.0.0-p0</code> (eu acho)</li>
<li>Outra instalação: Veja as instruções de <a href="http://www.ruby-lang.org/en/downloads/">ruby-lang.org</a></li>
</ul>


<p>Para aqueles que não podem atualizar ainda, você ainda pode ter um pouco da diversão com a minha gem <a href="https://github.com/marcandre/backports">backports</a>. Ele faz <code>bsearch</code>, <code>lazy</code> e mais um par disponível para qualquer versão do Ruby. A lista completa está no <a href="https://github.com/marcandre/backports#ruby-200">readme</a>.</p>

<p>Aproveite o <a href="http://www.ruby-lang.org/en/news/2013/02/24/ruby-2-0-0-p0-is-released/">Ruby 2.0.0</a>!</p>

<hr />

<p>Até a proxima amigos&hellip;</p>

<p>E muito obrigado <a href="https://twitter.com/malafortune">Marc</a>&hellip;</p>

<p>And thank you very much <a href="https://twitter.com/malafortune">Marc</a>&hellip;</p>

<p>:D</p>
]]></content>
  </entry>
  
</feed>
