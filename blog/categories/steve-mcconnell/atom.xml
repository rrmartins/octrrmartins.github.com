<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Steve McConnell | Rodrigo Martins]]></title>
  <link href="http://rrmartins.github.com/blog/categories/steve-mcconnell/atom.xml" rel="self"/>
  <link href="http://rrmartins.github.com/"/>
  <updated>2012-03-04T02:02:29-03:00</updated>
  <id>http://rrmartins.github.com/</id>
  <author>
    <name><![CDATA[Rodrigo Martins]]></name>
    <email><![CDATA[rodrigo@rrmartins.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Por que Construção de Software é Importante? - Parte 2]]></title>
    <link href="http://rrmartins.github.com/blog/2012/03/03/por-que-construcao-de-software-e-importante-parte-2/"/>
    <updated>2012-03-03T19:55:00-03:00</updated>
    <id>http://rrmartins.github.com/blog/2012/03/03/por-que-construcao-de-software-e-importante-parte-2</id>
    <content type="html"><![CDATA[<p>Olá amigos nerd's... Continuando os estudos...</p>


<p><strong> Por que Construção de Software é Importante? - Parte 2</strong></p>

<!-- more -->


<p>
Com foco na construção, a produtividade do programador indivídual pode
  melhorar enormemente. Um estudo clássico de Sackman, Erikson e Grant mostrou
  que a produtividade dos programadores individuais variaram por um fator de 10 a 20
  durante a construção (1968). Desde o seu estudo, seus resultados têm
  se confirmado por numerosos outros estudos (...). Este livro, ajuda a todos os programadores
  aprender tecnicas que já são utilizados pelos melhores programadores.
</p>


<p>
  Produto de construção, o código-fonte, é muitas vezes a única
  descrição precisa do software. Em muitos projetos, a documentação só
  disponível para os programadores é o próprio código. Requisitos e especificações
  documentos de projeto pode ir fora da data, mas o código fonte é sempre atualizado.
  Consequentemente, é imperativo que o código fonte de ser o mais alto possível
  qualidade. A aplicação consistente de técnicas para melhoria do código-fonte
  faz a diferença entre um aparelho de Rube Goldberg e uma análise detalhada,
  corrigir, e um programa informativo portanto. Tais técnicas são mais
  efectivamente aplicado durante a construção.
 </p>


<p> <p>
  A construção é a única atividade que está garantido para ser feito.
  O projeto de software ideal passa por desenvolvimento de requisitos cuidadoso e
  projeto arquitetônico antes do início da construção. O projeto ideal
  sofre abrangente, o teste do sistema estatisticamente controlada após
  construção.
 </p>
 <p>
  Imperfeitos, projetos do mundo real, no entanto, muitas vezes ignorar exigências
  e design para pular para a construção. Eles deixam de testes, porque eles têm
  muitos erros para corrigir e eles ficar sem tempo.
  Mas não importa o quão apressado ou mal planejado um projeto é que você não pode
  cair de construção, é onde a borracha encontra a estrada.
 </p>
 <p>
  Melhorar a construção é, assim, uma forma de melhorar a qualquer desenvolvimento de software
  esforço, não importa o quão abreviado.
  </p></p>

<p>Texto retirado do livro Code Compile, de Steve McConnell.
Até a proxima amigos... :D</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pontos Chaves Para a Construção de Software!]]></title>
    <link href="http://rrmartins.github.com/blog/2012/03/01/pontos-chaves/"/>
    <updated>2012-03-01T13:31:00-03:00</updated>
    <id>http://rrmartins.github.com/blog/2012/03/01/pontos-chaves</id>
    <content type="html"><![CDATA[<p>
Pontos-chaves Para a Construção de Software!
</p>


<p>
-> Construção de software é a atividade central no desenvolvimento de software;
construção é a única atividade que está garantida a acontecer em cada projeto.
</p>


<p>
-> As atividades principais da construção estão detalhadas design, codificação,
depuração, integração e testes de desenvolvedor
(testes unitários e testes de integração).
</p>


<p>
-> Outros termos comuns para construção são "codificação" e "programação".
</p>


<p>
-> A qualidade da construção afeta substancialmente
a qualidade do software.
</p>


<p>
-> Na análise final, o seu entendimento de como fazer construção determina
como um bom programador você é, e esse é o assunto do resto do livro.
</p>


<p>Texto retirado do livro Code Compile, de Steve McConnell.</p>

<p>"Conhecimento nunca é de mais!" (<a href="http://twitter.com/sfalsin">@sfalsin</a>)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Por que Construção de Software é Importante?]]></title>
    <link href="http://rrmartins.github.com/blog/2012/02/29/por-que-construcao-de-software-e-importante/"/>
    <updated>2012-02-29T23:46:00-03:00</updated>
    <id>http://rrmartins.github.com/blog/2012/02/29/por-que-construcao-de-software-e-importante</id>
    <content type="html"><![CDATA[<p>Olá amigos nerd's... Continuando os estudos...</p>


<p>Agora vou falar um outro capitulo... Que é sobre:<br/>
<strong> Por que Construção de Software é Importante? </strong></p>

<!-- more -->


<p>
Uma vez que você está lendo este livro, provavelmente você concorda que a melhoria
  qualidade do software e a produtividade do desenvolvedor é importante. Muitos dos mais de hoje
  projetos interessantes usar software intensamente. A Internet,
  efeitos especiais de cinema, médicos de suporte de vida de sistemas, programas espaciais, aeronáutica,
  alta velocidade de análise financeira e pesquisa científica são alguns exemplos ao poucos.
  Esses projetos e mais projetos convetional podem se beneficiar
  melhores práticas, porque muitos dos fundamentos são os mesmos.
</p>


<p></p>

<p>
  Se você concorda que a melhoria de desenvolvimento de software é importante, em geral,
  a pergunta para você como leitor deste livro torna-se,
  Por que é a construção de um foco importante?
 </p>


<p> <p>
  Eis o porquê:
  Construção é uma grande parte do desenvolvimento mercadoria software.
  Dependendo do tamanho do projecto, a construção tipicamente
  leva 30 a 80 por cento do tempo total gasto em um projeto.
  Qualquer coisa que leva até que o tempo de projeto muito é obrigado a
  afetar o sucesso do projeto.
 </p>
 <p>
  A construção é a atividade central no desenvolvimento de software.
  Requisitos e arquitetura são feitas antes da construção
  de modo que você pode construção de forma eficaz. O teste do sistema (no estrito
  sensação de testes independentes) é feito após a construção para verificar
  que a construção verificar que a construção foi feito correctamente.
  Construção está no centro do processo de desenvolvimento de software.
</p></p>

<p>Vale a pena estudar... :D</p>

<br/>


<p>Até a proxima amigos... :D</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[O que é Software Construção? - Part 2]]></title>
    <link href="http://rrmartins.github.com/blog/2012/02/27/what-is-software-construction-part-2/"/>
    <updated>2012-02-27T21:12:00-03:00</updated>
    <id>http://rrmartins.github.com/blog/2012/02/27/what-is-software-construction-part-2</id>
    <content type="html"><![CDATA[<p>Olá amigos nerd's... Continuando os estudos do livro Code Compile,</p>

<h1>
O que é Software Construção? - Parte 2
</h1>


<p>
Para quem ainda não leu o primeiro post sobre este assunto, segu o link abaixo:<br/>
- <a href="/blog/2012/02/25/what-is-software-construction/">O que é Construção de Software ? Parte 1</a>
</p>


<p>
Aqui estão algumas das tarefas específicas envolvidas na construção:<br/>
  * Verificar se o projeto foi colocado de modo que
  construção pode avançar com sucesso;<br/>
  * Determinar como seu código será testado<br/>
  * Desenhando e escrevendo de Classes e Rotinas<br/>
  * Criar e nomear variáveis ​​e constantes nomeadas, sempre colocando nomes simples e expressivos.<br/>
  * Seleção de estruturas de controle e organização de blocos de instruções<br/>
  * O teste de unidade, testes de integração e depuração de seu próprio código<br/>
  * Revisão de baixo nível outros membros da equipe de projetos e códigos<br/>
  * Escrever o código cuidadosamente com formatação e comentando isso<br/>
  * Integração de componentes de software que foram criados separadamente<br/>
  * Sintonizar código para torná-lo mais rápido e usar menos recursos<br/>
</p>


<!-- more -->


<p>
 Para obter uma lista ainda mais cheia de atividades de construção,
  olhe através dos títulos dos capítulos na tabela de conteúdos. </p>


<p> <p>
  Com tantas atividades no trabalho na construção civil, pode-se dizer,
  "OK, Jack, quais as atividades não fazem parte da construção?" Essa é uma pergunta justa.
  Importantes atividades de construção não incluem a gestão,
  requisitos, desenvolvimento, arquitetura de software, design de interface do usuário,
  teste de sistema e manutenção. Cada uma destas atividades afeta o último
  sucesso de um projeto tanto quanto a construção - pelo menos o sucesso de qualquer
  projeto que exige mais do que uma ou duas pessoas e dura mais tempo do que
  algumas semanas.
</p></p>

<p>Apresentando os estudos aos poucos... Vamos evoluindo a cada dia... Até a proxima!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[O que é Construção de Software ? Parte 1]]></title>
    <link href="http://rrmartins.github.com/blog/2012/02/25/what-is-software-construction/"/>
    <updated>2012-02-25T23:27:00-03:00</updated>
    <id>http://rrmartins.github.com/blog/2012/02/25/what-is-software-construction</id>
    <content type="html"><![CDATA[<p>Amigos, estou lendo um livro muito bom.. E vou começar a compartilhar algumas partes dele com todos... Este é só o primeiro post de tradução.<br/></p>

<h1>
O que é Software Construção?
</h1>


<p>O desenvolvimento de software de computador pode ser um processo complicado, e nos últimos 25 anos,
  pesquisadores identificaram inúmeras atividades distintas que são para desenvolvimento de software. Eles incluem:
  <br/>
  * Definição do problema  <br/>
  * Requisitos de desenvolvimento  <br/>
<!-- more -->
  * Planejamento da construção  <br/>
  * Arquitetura de software, ou alto nível de design  <br/>
  * O projeto detalhado  <br/>
  * Codificação e depuração  <br/>
  * Teste de unidade  <br/>
  * Testes de integração  <br/>
  * Teste do sistema  <br/>
  * Manutenção corretiva  <br/>
 </p>


<p> <p>
  Se você trabalhou principalmente em projetos informais,
  você não poderia ter feito distinções entre as muitas atividades que são para
  criação de um produto de software. Mentalmente, você pode ter todas estas atividades agrupadas
 em conjunto, como "programação". Se você trabalhar em projetos informais, as principais
  atividades que você pensa quando você pensa sobre a criação de software é, provavelmente,
  a atividade, os pesquisadores se referem como "construção".
 </p>
 <p>
  Esta noção intuitiva de "construção" é bastante precisa, mas sofre
  de uma falta de perspectiva. Colocando construção no seu contexto com outras
  atividades ajuda a manter o foco nas tarefas certas durante a construção
  e o apropriadamente enfatiza importantes atividades que não serão construidas.</p>
  <br/>
  Em breve mais do livro abaixo.</p>

<p>  Fonte: Livro: Code Complete: A practical handbook of software construction (Autor: Steve McConnell)</p>
]]></content>
  </entry>
  
</feed>
