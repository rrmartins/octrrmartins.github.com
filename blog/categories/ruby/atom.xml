<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | Rodrigo Martins]]></title>
  <link href="http://rrmartins.github.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://rrmartins.github.com/"/>
  <updated>2012-05-01T12:02:47-03:00</updated>
  <id>http://rrmartins.github.com/</id>
  <author>
    <name><![CDATA[Rodrigo Martins]]></name>
    <email><![CDATA[rodrigo@rrmartins.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A classe Encoding]]></title>
    <link href="http://rrmartins.github.com/blog/2012/04/30/a-classe-encoding/"/>
    <updated>2012-04-30T10:04:00-03:00</updated>
    <id>http://rrmartins.github.com/blog/2012/04/30/a-classe-encoding</id>
    <content type="html"><![CDATA[<p>Continuando os estudos de Ruby, e a leitura do livro The Ruby Programming Language</p>




<p>A classe Encoding de Ruby 1.9 representa uma codificação de caracteres. Objetos de codificação para agir como identificadores opacos para uma codificação e não têm muitos métodos próprios. O nome do método retorna o nome de uma codificação. to_s é um sinônimo para o name, e inspect converte um objeto em uma seqüência de codificação de uma forma mais detalhada do que o name faz.</p>




<p>Ruby define uma constante para cada uma das codificações built-in's que ele suporta, e estes são a maneira mais fácil de especificar uma codificação em seu programa. As constantes predefinidas incluem pelo menos o seguinte:</p>


<p><code>ruby Encoding
Encoding::ASCII_8BIT     # Also ::BINARY
Encoding::UTF_8          # UTF-8-encoded Unicode characters
Encoding::EUC_JP         # EUC-encoded Japanese
Encoding::SHIFT_JIS      # Japanese: also ::SJIS, ::WINDOWS_31J, ::CP932
</code></p>

<!--more-->


<p>Observe que, como estas são constantes, eles devem ser escritos em letras maiúsculas e hífens nos nomes de codificação devem ser convertidos para sublinhados. Ruby 1.9 também suporta a codificação US-ASCII, as codificações européias ISO-8859-1 através da ISO-8859-15, e o Unicode UTF-16 e UTF-32 codificações em variantes big-endian e little-endian.</p>




<p>Se você tiver um nome de codificação como uma string e deseja obter o objeto de codificação correspondente, use o método de fábrica Encoding.find:</p>


<p><code>ruby Encoding
encoding = Encoding.find("utf-8")
</code></p>

<p>
Usando Encoding.find faz com que a codificação passa a ser carregada dinamicamente, se necessário. Encoding.find aceita names de codificação que são qualquer maiúsculo ou minúsculo. Chame o método name de uma codificação para obter o nome da codificação como uma string.</p>




<p>Encoding.list retorna uma matriz de todos os objetos de codificação disponíveis. Encoding.name_list retorna um array de nomes (como strings) de todas as codificações disponíveis. Codificações muito têm mais de um nome de uso comum, e Encoding.aliases retorna um hash que mapeia aliases de codificação para os names de codificação oficial pelos quais são sinônimos. A matriz retornada por Encoding.name_list inclui os aliases nos Encoding.aliases hash.</p>


<p><code>ruby Encoding.name_list
Encoding.name_list
 =&gt; ["ASCII-8BIT", "UTF-8", "US-ASCII", "Big5", "Big5-HKSCS", "Big5-UAO", "CP949", "Emacs-Mule", "EUC-JP",
 "EUC-KR", "EUC-TW", "GB18030", "GBK", "ISO-8859-1", "ISO-8859-2", "ISO-8859-3", "ISO-8859-4", "ISO-8859-5",
 "ISO-8859-6", "ISO-8859-7", "ISO-8859-8", "ISO-8859-9", "ISO-8859-10", "ISO-8859-11", "ISO-8859-13",
 "ISO-8859-14", "ISO-8859-15", "ISO-8859-16", "KOI8-R", "KOI8-U", "Shift_JIS", "UTF-16BE","UTF-16LE",
 "UTF-32BE", "UTF-32LE", "Windows-1251", "BINARY", "IBM437", "CP437", "IBM737", "CP737", "IBM775",
 "CP775", "CP850","IBM850", "IBM852", "CP852", "IBM855", "CP855", "IBM857", "CP857", "IBM860", "CP860",
 "IBM861", "CP861", "IBM862", "CP862", "IBM863","CP863", "IBM864", "CP864", "IBM865", "CP865", "IBM866",
 "CP866", "IBM869", "CP869", "Windows-1258", "CP1258", "GB1988","macCentEuro", "macCroatian", "macCyrillic",
 "macGreek", "macIceland", "macRoman", "macRomania", "macThai", "macTurkish","macUkraine", "CP950", "CP951",
 "stateless-ISO-2022-JP", "eucJP", "eucJP-ms", "euc-jp-ms", "CP51932", "eucKR", "eucTW", "GB2312","EUC-CN",
 "eucCN", "GB12345", "CP936", "ISO-2022-JP", "ISO2022-JP", "ISO-2022-JP-2", "ISO2022-JP2", "CP50220", "CP50221",
"ISO8859-1", "Windows-1252", "CP1252", "ISO8859-2", "Windows-1250", "CP1250", "ISO8859-3", "ISO8859-4",
"ISO8859-5", "ISO8859-6","Windows-1256", "CP1256", "ISO8859-7", "Windows-1253", "CP1253", "ISO8859-8",
"Windows-1255", "CP1255", "ISO8859-9", "Windows-1254", "CP1254", "ISO8859-10", "ISO8859-11", "TIS-620",
"Windows-874", "CP874", "ISO8859-13", "Windows-1257", "CP1257","ISO8859-14", "ISO8859-15", "ISO8859-16",
"CP878", "SJIS", "Windows-31J", "CP932", "csWindows31J", "MacJapanese", "MacJapan","ASCII", "ANSI_X3.4-1968",
"646", "UTF-7", "CP65000", "CP65001", "UTF8-MAC", "UTF-8-MAC", "UTF-8-HFS", "UCS-2BE", "UCS-4BE","UCS-4LE",
"CP1251", "UTF8-DoCoMo", "SJIS-DoCoMo", "UTF8-KDDI", "SJIS-KDDI", "ISO-2022-JP-KDDI",
"stateless-ISO-2022-JP-KDDI","UTF8-SoftBank", "SJIS-SoftBank", "locale", "external", "filesystem", "internal"]
</code></p>

<p>``` ruby Encoding.aliases</p>

<pre><code>Encoding.aliases
</code></pre>

<p> => {"BINARY"=>"ASCII-8BIT", "CP437"=>"IBM437", "CP737"=>"IBM737", "CP775"=>"IBM775", "IBM850"=>"CP850",
  "CP857"=>"IBM857", "CP860"=>"IBM860", "CP861"=>"IBM861", "CP862"=>"IBM862", "CP863"=>"IBM863",
  "CP864"=>"IBM864", "CP865"=>"IBM865", "CP866"=>"IBM866", "CP869"=>"IBM869", "CP1258"=>"Windows-1258",
  "CP950"=>"Big5", "CP951"=>"Big5-HKSCS", "eucJP"=>"EUC-JP", "euc-jp-ms"=>"eucJP-ms", "eucKR"=>"EUC-KR",
  "eucTW"=>"EUC-TW", "EUC-CN"=>"GB2312", "eucCN"=>"GB2312", "CP936"=>"GBK", "ISO2022-JP"=>"ISO-2022-JP",
  "ISO2022-JP2"=>"ISO-2022-JP-2", "ISO8859-1"=>"ISO-8859-1", "CP1252"=>"Windows-1252", "ISO8859-2"=>"ISO-8859-2",
  "CP1250"=>"Windows-1250", "ISO8859-3"=>"ISO-8859-3", "ISO8859-4"=>"ISO-8859-4", "ISO8859-5"=>"ISO-8859-5",
  "ISO8859-6"=>"ISO-8859-6", "CP1256"=>"Windows-1256", "ISO8859-7"=>"ISO-8859-7", "CP1253"=>"Windows-1253",
  "ISO8859-8"=>"ISO-8859-8", "CP1255"=>"Windows-1255", "ISO8859-9"=>"ISO-8859-9", "CP1254"=>"Windows-1254",
  "ISO8859-10"=>"ISO-8859-10", "ISO8859-11"=>"ISO-8859-11", "CP874"=>"Windows-874", "ISO8859-13"=>"ISO-8859-13",
  "CP1257"=>"Windows-1257", "ISO8859-14"=>"ISO-8859-14", "ISO8859-15"=>"ISO-8859-15", "ISO8859-16"=>"ISO-8859-16",
  "CP878"=>"KOI8-R", "SJIS"=>"Shift_JIS", "CP932"=>"Windows-31J", "csWindows31J"=>"Windows-31J",
  "MacJapan"=>"MacJapanese", "ASCII"=>"US-ASCII", "ANSI_X3.4-1968"=>"US-ASCII", "646"=>"US-ASCII",
  "CP65000"=>"UTF-7", "CP65001"=>"UTF-8", "UTF-8-MAC"=>"UTF8-MAC", "UTF-8-HFS"=>"UTF8-MAC",
  "UCS-2BE"=>"UTF-16BE", "UCS-4BE"=>"UTF-32BE", "UCS-4LE"=>"UTF-32LE", "CP1251"=>"Windows-1251",
  "locale"=>"UTF-8", "external"=>"UTF-8", "filesystem"=>"UTF-8"}
```</p>

<p>Use Encoding.default_external e Encoding.default_internal para obter os objetos de codificação que representam os padrões externos e internos de codificação padrão. Para obter a codificação para o local atual, chame Encoding.locale_charmap e passar a seqüência resultante para Encoding.find.</p>


<p><code>ruby Encoding.default_external
Encoding.default_external
 =&gt; #&lt;Encoding:UTF-8&gt;
</code></p>

<p><code>ruby Encoding.default_internal
Encoding.default_internal
 =&gt; nil
</code></p>

<p><code>ruby Encoding.locale_charmap
Encoding.locale_charmap
 =&gt; "UTF-8"
</code></p>

<p>A maioria dos métodos que esperam um objeto Encoding também aceitará um nome de codificação maiúsculas e minúsculas (como ascii, binário, UTF-8, EUC-JP, ou sjis) no lugar de um objeto de codificação.</p>


<p>É isso ai... até a proxima... :D</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Caracteres multibyte no Ruby 1.9]]></title>
    <link href="http://rrmartins.github.com/blog/2012/04/25/caracteres-multibyte-no-ruby-1-dot-9/"/>
    <updated>2012-04-25T22:27:00-03:00</updated>
    <id>http://rrmartins.github.com/blog/2012/04/25/caracteres-multibyte-no-ruby-1-dot-9</id>
    <content type="html"><![CDATA[<p>Continuando os estudos de Ruby, e a leitura do livro The Ruby Programming Language</p>




<p>A classe String foi reescrita no Ruby 1.9 para estar ciente e para
lidar corretamente com caracteres multibyte. Embora o apoio de vários bytes é
a maior mudança no Ruby 1,9, não é uma mudança altamente visível:
código que usa string multibyte simplesmente funciona. Vale a pena
entender por que ele funciona, no entanto, e esta seção explica o
detalhes.</p>




<p>Se uma string contém caracteres de vários bytes, então o número de
bytes não corresponde ao número de caracteres. No Ruby 1.9,
o comprimento ea
métodos tamanho retornar o número de
caracteres em uma seqüência, eo método novo tamanho byte
retorna o número de bytes. [] E [] = operadores permitem consultar e definir
os caracteres de uma string, e os novos métodos e getByte setbyte permitem que você
para consultar e definir bytes individuais (embora você não deve muitas vezes precisam
para fazer isso):</p>


<p>``` ruby Encode</p>

<h1>- * - Coding: utf-8 - * - # Especifique Unicode UTF-8 caracteres</h1>

<h1>Esta é uma string literal contendo uma personagem multiplicação multibyte</h1>

<p>s = "2 × 2 = 4"</p>

<h1>A seqüência contém 6 bytes que codificam 5 caracteres</h1>

<p>s.bytesize # => 6
s.bytesize.times {|i| puts s.getbyte(i), ""} # Mostra "50 195 151 50 61 52"
s.length # => 5
s.length.times {|i| print s[i], ""} # imprime "2 × 2 = 4"
s.setbyte(5, s.getbyte(5) +1); # s é agora "2 × 2 = 5"
```</p>

<p>Note-se que a primeira linha deste código é um comentário de codificação que define a codificação de origem (consulte Especificando Encoding Program) para UTF-8. Sem este comentário, o Ruby intérprete não saberia como decodificar a seqüência de bytes
na seqüência literal em uma seqüência de caracteres.</p>




<p>Quando uma string contém caracteres codificados com números variados
de bytes, já não é possível mapear diretamente do personagem
índice para deslocamento de byte na seqüência. Na seqüência acima, para
exemplo, o segundo carácter começa no segundo byte. Mas o
terceiro personagem começa no quarto byte. Isto significa que você
não pode assumir que o acesso aleatório a caracteres arbitrários dentro de um
string é uma operação rápida. Quando você usa o operador [], como
fizemos no código acima, para acessar um caractere ou substring dentro
uma string multibyte, a implementação de Ruby deve internamente iterar
sequencialmente na cadeia para encontrar o índice do caractere desejado.
Em geral, portanto, você deve tentar fazer o seu processamento de cadeia
utilizando algoritmos seqüenciais, quando possível. Ou seja: usar o iterator each_char quando possível, em vez
de chamadas repetidas para o []
operador. Por outro lado, não é geralmente necessário se preocupar
muito sobre isso. Implementações Ruby otimizar os casos que
pode ser otimizado, e se uma string é composta inteiramente de 1 byte
personagens, o acesso aleatório a esses personagens vão ser eficiente. Se
você quiser tentar suas próprias otimizações, você pode usar a instância
método ascii_only? para determinar
se uma seqüência consiste inteiramente de 7-bit ASCII.</p>




<p>A classe String no Ruby 1.9
define uma codificação
método que retorna a codificação de uma string (o retorno
valor é um objeto de codificação,
o qual é descrito em baixo):</p>


<p>``` ruby</p>

<h1>- * - Coding: utf-8 - * -</h1>

<p>s = "2 × 2 = 4" # caráter multiplicação #  Note multibyte
s.encoding # => &lt;Encoding: UTF-8>
```</p>

<p>A codificação de strings é sempre o mesmo que o
codificação de origem do arquivo, exceto que os literais que contêm
Escapes \u sempre são codificados em
UTF-8, independentemente da fonte de codificação.</p>




<p>Determinadas operações de corda, tais como concatenação e padrão
correspondência, exigem que duas strings (ou uma corda e um regular
expressão) possuem uma codificação compatíveis. Se você concatenar um ASCII
string com uma string UTF-8, por exemplo, obter uma string UTF-8.
Não é possível, no entanto, para concatenar uma string UTF-8 e um
SJIS string: as codificações não são compatíveis, e uma exceção será
ser levantada. Você pode testar se duas strings (ou uma corda e um
expressão regular) possuem uma codificação compatíveis usando a classe
método Encoding.compatible?.
Se as codificações dos dois argumentos são compatíveis,
retorna a uma que é o superconjunto do outro. Se o
codificações são incompatíveis, ela retorna nil.</p>




<p>Você pode definir explicitamente a codificação de uma string com force_encoding. Isso é útil se você tiver
uma seqüência de bytes (leia-se de um fluxo de I / O, talvez) e quer
dizer Ruby como eles devem ser interpretados como caracteres. Ou, se você
ter uma seqüência de caracteres de vários bytes, mas você deseja indexar
bytes individuais com []:</p>


<p><code>ruby
text = stream.readline.force_encoding("utf-8")
bytes = text.dup.force_encoding("binário")
</code></p>

<p>
<b>force_encoding</b>
não fazer uma cópia de seu receptor, que modifica o
codificação da string e retorna a string. Este método não
que qualquer caractere conversão dos bytes subjacentes da cadeia são
não mudou, apenas a interpretação de Ruby deles é alterado. O
argumento para force_encoding pode ser
o nome de uma codificação ou um objeto de codificação.
</p>




<p>O force_encoding não faz validação, mas não verifica se os bytes subjacentes do
cadeia de representar uma seqüência válida de caracteres especificada no
de codificação. Use valid_encoding? para
executar a validação. Este método de instância não tem argumentos e verifica se
os bytes de uma cadeia pode ser interpretada como uma seqüência válida de
caracteres usando codificação da seqüência:</p>


<p><code>ruby
s = "\xa4".force_encoding ("utf-8") # Este não é um UTF-8 válido cadeia
s.valid_encoding? # =&gt; False
</code></p>

<p>O método de codificar de uma string é bastante
diferente da force_encoding. Ele retorna uma string que representa a mesma seqüência de caracteres como
seu receptor, mas usando uma codificação diferente. A fim de alterar o
codificação de ou-transcodificar uma string como esta,
o método de codificar deve alterar o
bytes subjacentes que compõem a cadeia. Aqui está um exemplo:
</p>


<p>``` ruby</p>

<h1>- * - Coding: utf-8 - * -</h1>

<p>EURO1 = "\u20AC" # Comece com o personagem Euro Unicode
puts EURO1 # Imprime "€"
euro1.encoding # => &lt;Encoding:UTF-8>
euro1.bytesize # => 3</p>

<p>euro2 = euro1.encode ("iso-8859-15") # transcode para a América-15
puts euro2.inspect # Imprime "\xA4"
euro2.encoding # => &lt;Encoding:iso-8859-15>
euro2.bytesize # => 1</p>

<p>euro3 = euro2.encode ("utf-8") # transcode de volta para UTF-8
EURO1 == euro3 # => true
```</p>

<p>Note que você não deve muitas vezes precisa usar o método de codificação. O tempo mais comum para
transcode cordas é antes de escrevê-las em um arquivo ou enviá-los
através de uma conexão de rede. E, como veremos em Streams e codificações, classes Ruby I/O, apoiar o
transcodificação automática de texto quando ele é gravado.</p>




<p>Se a seqüência que você está chamando de codificar consiste de bytes não codificados, vocês
precisa especificar a codificação, que para interpretar esses bytes
antes de transcodificação-los para outra codificação. Faça isso passando dois
argumentos para codificar. O primeiro
argumento é a codificação desejada, eo segundo argumento é o
codificação atual da cadeia. Por exemplo:</p>


<p>``` ruby</p>

<h1>Interpretar um byte como um codepoint iso-8859-15, e transcodificar para UTF-8</h1>

<p>byte = "\xA4"
char = byte.encode("utf-8", "iso-8859-15")
```</p>

<p>Isto é, as duas seguintes linhas de código tem o mesmo efeito:</p>


<p><code>ruby
text = bytes.encode(to, from)
text = bytes.dup.force_encoding(from).encode(to)
</code></p>

<p>Se você ligar para codificar sem
argumentos, ele transcodifica seu receptor para o padrão interno
codificação, caso tenha sido definido com o E-ou-U opções intérprete (ver Opções de codificação). Isso permite que os módulos de biblioteca (por
exemplo) para transcodificar suas constantes de cadeias públicas para um comum
codifica para a interoperabilidade.</p>




<p>Codificações de caracteres diferentes não só no seu mapeamento de
bytes para caracteres, mas no conjunto de caracteres que podem
representam. Unicode (também conhecido como UCS-o Universal Character Set) tenta
permitir que todos os personagens, mas codificações de caracteres não baseadas em Unicode
só pode representar um subconjunto de caracteres. Não é possível,
portanto, para transcodificar todos os UTF-8 cordas para EUC-JP (por exemplo);
Caracteres Unicode que não são nem latim, nem japonês não pode ser
traduzida.</p>




<p>Se a codificar ou codificar! método encontra um personagem que não pode transcodificar, ele gera uma exceção:</p>


<p><code>ruby
"\U20AC".Encode("iso-8859-1") # Nenhum sinal de euros em Latin-1, para levantar exceção
</code></p>

<p>codificar e codificar! aceitar um hash de transcodificação
opções como seu argumento final. No momento da redação deste texto, o
Nome de opção só é definido: inválido, eo único valor definido para
essa chave é :ignore. "ri
String.encode "dará mais detalhes quando as opções são mais
implementadas.
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Codificações de String e Caracteres multibyte]]></title>
    <link href="http://rrmartins.github.com/blog/2012/04/24/codificacoes-de-string-e-caracteres-multibyte/"/>
    <updated>2012-04-24T00:04:00-03:00</updated>
    <id>http://rrmartins.github.com/blog/2012/04/24/codificacoes-de-string-e-caracteres-multibyte</id>
    <content type="html"><![CDATA[<p>Olá... Resolvi começar a escrever alguma coisa também de <a href="http://www.ruby-lang.org/pt/">Ruby</a>... Vamos começar com um pouco do inicio da classe <a href="http://www.ruby-doc.org/core-1.9.3/String.html">String</a>.</p>




<h2>Codificações de <a href="http://www.ruby-doc.org/core-1.9.3/String.html">String</a> e Caracteres multibyte</h2>




<p>
<a href="http://www.ruby-doc.org/core-1.9.3/String.html">String</a> são fundamentalmente diferentes em <a href="http://www.ruby-doc.org/core-1.8.7/">Ruby 1.8</a> e <a href="http://www.ruby-doc.org/core-1.9.3/">Ruby 1.9</a>:
</p>


<p>
No <a href="http://www.ruby-doc.org/core-1.8.7/">Ruby 1.8</a>, <a href="http://www.ruby-doc.org/core-1.9.3/String.html">String</a> são uma seqüência de bytes. quando cadeias
são usados ​​para representar texto (em vez de dados binários), cada byte da 
cadeia é considerada para representar um único caractere ASCII. no <a href="http://www.ruby-doc.org/core-1.8.7/">Ruby 1.8</a>, os elementos individuais de uma <a href="http://www.ruby-doc.org/core-1.9.3/String.html">String</a> não são caracteres, mas
números, o valor de byte real ou codificação de caracteres.
</p>


<p>
Em <a href="http://www.ruby-doc.org/core-1.9.3/">Ruby 1.9</a>, por outro lado, as cadeias são sequências verdadeiras
de caracteres, e esses caracteres não necessitam de ser confinado à
Conjunto de caracteres ASCII. Em <a href="http://www.ruby-doc.org/core-1.9.3/">Ruby 1.9</a>, os elementos individuais de uma cadeia
são caracteres representados como cadeias de tamanho igual a 1 - em vez de
inteiros códigos de caracteres. Cada <a href="http://www.ruby-doc.org/core-1.9.3/String.html">String</a> tem uma codificação que
especifica a correspondência entre os bytes na cadeia e
os caracteres representam os bytes. Codificações, como o UTF-8
codificação de caracteres Unicode utilizam número variável de bytes para
cada carácter, e não há mais uma 1-para-1 (nem mesmo uma correspondência 2-para-1)
entre bytes e subseções de caracteres. As subseções que seguem, explicam a codificação relacionada de
características de strings em <a href="http://www.ruby-doc.org/core-1.9.3/">Ruby 1.9</a>, e também demonstram de forma rudimentar o 
suporte para caracteres multibyte no <a href="http://www.ruby-doc.org/core-1.8.7/">Ruby 1.8</a> usando a biblioteca jcode.
</p>


<p>Até o proximo.. :D</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[#FLISOL_ES 2012 - Um evento Latino-Americano]]></title>
    <link href="http://rrmartins.github.com/blog/2012/04/22/number-flisol-2012-um-evento-latino-americano/"/>
    <updated>2012-04-22T09:26:00-03:00</updated>
    <id>http://rrmartins.github.com/blog/2012/04/22/number-flisol-2012-um-evento-latino-americano</id>
    <content type="html"><![CDATA[<h2>
    <a href="http://flisol-es.heroku.com/">FLISOL - ES</a> # Um evento Latino-Americano
</h2>


<p><img class="center" src="/images/flisol.png" title="FLISOL" ><br/></p>

<p> Olá amigos...</p>


<p>Semana que vem, no dia 28/04, irá acontecer em Vitória-ES, um dos maiores eventos de Tecnologia da
<a href="http://softwarelivre.org/">Comunidade de Software Livre</a>, o <a href="http://flisol.net/">FLISOL</a>
é um evento que acontece simultaneamente em varios locais da America Latina. </p>


<p>A grade completa você pode conferir <a href="http://flisol-es.heroku.com/schedule">AQUI</a>.</p>


<!-- more -->


<p>Tentando descrever o evento com poucas palavras, copiarei um trecho do site do FLISOL...</p>


<pre><code>O FLISOL (Festival Latinoamericano de Instalação de Software Livre) é o maior evento de divulgação de 
Software Livre da América Latina. Ele acontece desde 2005 e seu principal objetivo é promover o uso de 
software livre, apresentando sua filosofia, seu alcance, avanços e desenvolvimento ao público em geral.
Com esta finalidade, diversas comunidades locais de software livre 
(em cada país, em cada cidade/localidade), 
organizam simultaneamente eventos em que se instala gratuitamente e totalmente legal, 
software livre nos computadores 
levados pelos participantes. Também, paralelamente, são oferecidas apresentações, palestras e oficinas, 
sobre temas locais, nacionais e latinoamericanos sobre Software Livre, 
com toda sua variedade de expressões: artística, acadêmica, empresarial e social.
O FLISOL 2012 acontece no dia 28 de Abril em diversas cidades.
</code></pre>

<p>Será um evento muito bom. Estará lá grandes nomes da <a href="http://www.tux-es.org/portal/">Comunidade Local , TUX-ES</a>.</p>




<p>Como o <a href="http://www.leohackin.com.br/2012/04/flisoles-212-e-pomodoros/">"Mestre" Leo Hackin</a> disse:</p>


<pre><code>"Será um dia de muitas instalações de Linux, muita nerdisse, bate papo, 
networking e muita troca de experiência."
</code></pre>

<p>E é isso ai galera... o evento terá muitas paradas legais.. :D</p>




<p>E eu estarei palestrando sobre <a href="http://flisol-es.heroku.com/ruby">"Ruby, Simples e Expressivo!"</a>,<br/>
estarei falando um pouco de <a href="http://www.ruby-lang.org/">Ruby</a>, como uma linguagem de uma facil e rapida aprendizagem.<br/> 
Hoje trabalho com <a href="http://www.ruby-lang.org/">Ruby</a> na veia, e a cada dia eu e os membros do #TEAMFLEXA estamos evoluindo<br/>
na tecnologia com todo o apoio desta forte ferramenta.</p>




<p>Além da minha palestra, que irá abrir o evento, terá outras palestras muito legais, confira a grade do evento: <a href="http://flisol-es.heroku.com/schedule">Programação do FLISOL</a></p>




<p>Galera é isso ai... </p>




<p>Não poderia de deixar de parabenizar aos organizadores do Evento, <a href="http://twitter.com/#!/m3nd3s">Almir M3nd3s</a> e <a href="http://twitter.com/#!/jvrmaia">João Víctor</a>, <br/>
Parabens amigos... Bora fazer outros eventos, para fazer a tecnologia crescer no ES. :D</p>




<p>Bora Codar e apreender.. :D</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Criando Combobox com Rails 3]]></title>
    <link href="http://rrmartins.github.com/blog/2012/02/15/criando-combobox-com-rails-3/"/>
    <updated>2012-02-15T13:05:00-02:00</updated>
    <id>http://rrmartins.github.com/blog/2012/02/15/criando-combobox-com-rails-3</id>
    <content type="html"><![CDATA[<p>
Para todos aqueles que conhecem o <a href="http://api.rubyonrails.org/classes/ActionView/Helpers/FormHelper.html">Form_for</a>,
 e quem ainda não teve a oportunidade de vê-lo. Vamos estudar um pouco de <a href="http://api.rubyonrails.org/">Rails</a>, e 
 estudem logo, o mercado esta precisando de programadores bons.. :D
 </p>


<!-- more -->


<p>
Então, vamos ao contexto do post, para gerar um combo box semelhante a este abaixo: </p>


<p><select name="estado">
<option value="AL">AL</option>
<option value="AP">AP</option>
<option value="AM">AM</option>
<option value="BA">BA</option>
<option value="CE">CE</option>
<option value="ES">ES</option>
</select></p>

<p>
Faça assim:
</p>


<p><code>ruby Criando Combobox em Rails
&lt;%= f.select :estado, ([["AC", "AC"], ["AL", "AL"], ["AP", "AP"],
["AM", "AM"], ["BA", "BA"], ["CE", "CE"], ["DF", "DF"], ["ES", "ES"],
["GO", "GO"], ["MA", "MA"], ["MT", "MT"], ["MS", "MS"], ["MG", "MG"],
["PA", "PA"], ["PB", "PB"], ["PR", "PR"], ["PE", "PE"], ["PI", "PI"],
["RJ", "RJ"], ["RN", "RN"], ["RS", "RS"], ["RO", "RO"], ["RR", "RR"],
["SC", "SC"], ["SP", "SP"], ["SE", "SE"], ["TO", "TO"]]) %&gt;
</code></p>

<p>
Até a próxima rubistas... :D

]]></content>
  </entry>
  
</feed>
