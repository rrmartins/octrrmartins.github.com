<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | Rodrigo Martins]]></title>
  <link href="http://rrmartins.github.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://rrmartins.github.com/"/>
  <updated>2013-02-27T01:16:07-03:00</updated>
  <id>http://rrmartins.github.com/</id>
  <author>
    <name><![CDATA[Rodrigo Martins]]></name>
    <email><![CDATA[rodrigo@rrmartins.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[Tradução] Ruby 2.0 por Exemplos]]></title>
    <link href="http://rrmartins.github.com/blog/2013/02/26/traducao-ruby-2-dot-0-por-exemplos/"/>
    <updated>2013-02-26T22:54:00-03:00</updated>
    <id>http://rrmartins.github.com/blog/2013/02/26/traducao-ruby-2-dot-0-por-exemplos</id>
    <content type="html"><![CDATA[<p>Olá amigos,</p>

<p>Tudo tranquilo?</p>

<p>Estava conversando com o <a href="https://twitter.com/malafortune">Marc-Andre Lafortune</a>, do blog <a href="http://blog.marc-andre.ca/">Marc Andre</a>, sobre a nova versão do <a href="http://www.ruby-lang.org/en/news/2013/02/24/ruby-2-0-0-p0-is-released/">Ruby 2.0</a>, e ele me permitiu traduzir o <a href="http://blog.marc-andre.ca/2013/02/23/ruby-2-by-example/">post dele</a> e ai vai.. :)</p>

<p>Antes de começar a tradução, gostaria de lembrar do que disse o proprio criador do #Ruby no <a href="https://twitter.com/yukihiro_matz/statuses/305334327938519040">twitter</a>:</p>

<p><blockquote><p></p></p><p><p>20 years has passed since I started developing Ruby. I really appreciate your support from the great Ruby community. Thank you!</p></p><p><p></p><footer><strong>@yukihiro_matz</strong> <cite><a href='https://twitter.com/yukihiro_matz/status/305334327938519040'>twitter.com/yukihiro_matz/&hellip;</a></cite></footer></blockquote></p>

<p>Neste trecho, <a href="https://twitter.com/yukihiro_matz">Matz</a> diz que desde quando começou a desenvolver o Ruby já se passou 20 anos e agradece a toda a comunidade que ajuda direta ou indiretamente.</p>

<p>Vamos a tradução... :D</p>

<!--more-->


<hr />

<p>Tradução</p>

<hr />

<p>Um rápido resumo de alguns dos novos recursos do <a href="http://www.ruby-lang.org/en/news/2013/02/24/ruby-2-0-0-p0-is-released/">Ruby 2.0.0</a>:</p>

<h3>Alterações na Linguagem</h3>

<p>``` ruby</p>

<pre><code># Ruby 1.9:
</code></pre>

<p>  # (Do action_view/helpers/text_helper.rb)
def cycle(first_value, *values)
  options = values.extract_options!
  name = options.fetch(:name, 'default')
  # ...
end</p>

<h1>Ruby 2.0:</h1>

<p>def cycle(first_value, *values, name: 'default')
  # ...
end</p>

<h1>ATENÇÃO: Não exatamente idêntica, como palavras-chave são aplicadas:</h1>

<p>cycle('odd', 'even', nme: 'foo')</p>

<h1>=> ArgumentError: unknown keyword: nme</h1>

<h1>Para obter o mesmo resultado e melhor exato:</h1>

<p>def cycle(first_value, *values, name: 'default', **ignore_extra)
  # ...
end</p>

<p>```</p>

<p>Isso faz com que as definições de método seja muito flexível. Em resumo:</p>

<p>``` ruby
def name({required_arguments, ...}</p>

<pre><code>     {optional_arguments, ...}
     {*rest || additional_required_arguments...} # Você Sabia?
     {keyword_arguments: "with_defaults"...}
     {**rest_of_keyword_arguments}
     {&amp;block_capture})
</code></pre>

<p>```</p>

<p>Em <a href="http://www.ruby-lang.org/en/news/2013/02/24/ruby-2-0-0-p0-is-released/">Ruby 2.0.0</a>, argumentos devem ter padrões, ou então deve ser capturado por <code>**extra</code> no final. Próxima versão <a href="https://bugs.ruby-lang.org/issues/7701">permitirá</a> argumentos obrigatórios, por exemplo, <code>def hello(optional: 'default', required:)</code>, mas há <a href="http://stackoverflow.com/questions/13250447/can-i-have-required-named-parameters-in-ruby-2-x/15078852#15078852">maneiras de fazer isso agora</a>.</p>

<p>Padrões, para parâmetros opcionais ou argumentos de palavras-chave, pode ser na maior parte qualquer expressão, incluindo chamadas de método para o objeto atual e pode usar os parâmetros anteriores.</p>

<p>Um exemplo complexo que mostra a maior parte deste:</p>

<p>``` ruby
class C
  def hi(needed, needed2,</p>

<pre><code>     maybe1 = "42", maybe2 = maybe1.upcase,
     *args,
     named1: 'hello', named2: a_method(named1, needed2),
     **options,
     &amp;block)
</code></pre>

<p>  end</p>

<p>  def a_method(a, b)</p>

<pre><code># ...
</code></pre>

<p>  end
end</p>

<p>C.instance_method(:hi).parameters</p>

<h1>=> [ [:req, :needed], [:req, :needed2],</h1>

<h1>[:opt, :maybe1], [:opt, :maybe2],</h1>

<h1>[:rest, :args],</h1>

<h1>[:key, :named1], [:key, :named2],</h1>

<h1>[:keyrest, :options],</h1>

<h1>[:block, :block] ]</h1>

<p>```</p>

<p><a href="http://bugs.ruby-lang.org/issues/7922">Bug conhecido</a>: não é atualmente possível ignorar opções extras sem citar o argumento <code>**</code>.</p>

<h3>Criação de lista de Symbol</h3>

<p>Maneira fácil de criar listas de símbolos com <code>%i</code> e <code>%I</code> (onde i é para uso interno):</p>

<p>```ruby</p>

<h1>Ruby 1.9:</h1>

<p>KEYS = [:foo, :bar, :baz]</p>

<h1>Ruby 2.0:</h1>

<p>KEYS = %i[foo bar baz]
```</p>

<h3>Codificação padrão é UTF-8</h3>

<p>Nenhum comentário magico é necessário caso a codificação for UTF-8.</p>

<p>```ruby</p>

<h1>Ruby 1.9:</h1>

<h1>encoding: utf-8</h1>

<h1>^<sup>^</sup> previous line was needed!</h1>

<p>puts "❤ Rodrigo Martins ❤"</p>

<h1>Ruby 2.0:</h1>

<p>puts "❤ Rodrigo Martins ❤"
```</p>

<h3>Variáveis ​​não utilizadas pode começar com _</h3>

<p>Você sabia que Ruby pode avisá-lo sobre as variáveis ​​utilizadas?</p>

<p>```ruby</p>

<h1>Qualquer versão do Ruby, com aviso em:</h1>

<p>ruby -w -e "
  def hi</p>

<pre><code>hello, world = 'hello, world'.split(', ')
world
</code></pre>

<p>  end"</p>

<h1>=> warning: assigned but unused variable - hello</h1>

<p>```</p>

<p>A maneira de evitar o aviso era usar <code>_</code>. Agora podemos usar qualquer nome de variável começando com um underscore:</p>

<p>```ruby</p>

<h1>Ruby 1.9</h1>

<p>ruby -w -e "
  def foo</p>

<pre><code>_, world = 'hello, world'.split(', ')
world
</code></pre>

<p>  end"</p>

<h1>=> no warning</h1>

<h1>Ruby 2.0</h1>

<p>ruby -w -e "
  def hi</p>

<pre><code>_hello, world = 'hello, world'.split(', ')
world
</code></pre>

<p>  end"</p>

<h1>=> no warning either</h1>

<p>```</p>

<h2>Mudanças das Classes Principais</h2>

<h3>Prepend</h3>

<p><a href="http://ruby-doc.org/core-2.0/String.html#method-i-prepend">Module#prepend</a> insere um módulo no início da cadeia de ligação. Pode muito bem substituir por <code>alias_method_chain</code>.</p>

<p>```ruby</p>

<h1>Ruby 1.9:</h1>

<p>class Range
  # Do active_support/core_ext/range/include_range.rb
  # Estende o padrão Range#include? para suportar comparações de range
  def include_with_range?(value)</p>

<pre><code>if value.is_a?(::Range)
  # 1...10 inclue 1..9 mas não inclue 1..10.
  operator = exclude_end? &amp;&amp; !value.exclude_end? ? :&lt; : :&lt;=
  include_without_range?(value.first) &amp;&amp; value.last.send(operator, last)
else
  include_without_range?(value)
end
</code></pre>

<p>  end</p>

<p>  alias_method_chain :include?, :range
end</p>

<p>Range.ancestors # => [Range, Enumerable, Object...]</p>

<h1>Ruby 2.0</h1>

<p>module IncludeRangeExt
  # Estende o padrão Range#include? para suportar comparações de range
  def include?(value)</p>

<pre><code>if value.is_a?(::Range)
  # 1...10 inclue 1..9 mas não inclue 1..10.
  operator = exclude_end? &amp;&amp; !value.exclude_end? ? :&lt; : :&lt;=
  super(value.first) &amp;&amp; value.last.send(operator, last)
else
  super
end
</code></pre>

<p>  end
end</p>

<p>class Range
  prepend IncludeRangeExt
end</p>

<p>Range.ancestors # => [IncludeRangeExt, Range, Enumerable, Object...]
```</p>

<h3>Refinamentos [experimental]</h3>

<p>No Ruby 1.9, se você usa um metodo <code>alias_method_chain</code>, a nova definição ocorre em todos os lugares. Em <a href="http://www.ruby-lang.org/en/news/2013/02/24/ruby-2-0-0-p0-is-released/">Ruby 2.0.0</a>, você pode fazer esse tipo de mudança apenas para si mesmo utilizando o <a href="http://ruby-doc.org/core-2.0/Module.html#method-i-refine">Module#refine</a>:</p>

<p>```ruby</p>

<h1>Ruby 2.0</h1>

<p>module IncludeRangeExt
  refine Range do</p>

<pre><code># Estende o padrão Range#include? para suportar comparações de range
def include?(value)
  if value.is_a?(::Range)
    # 1...10 inclue 1..9 mas não inclue 1..10.
    operator = exclude_end? &amp;&amp; !value.exclude_end? ? :&lt; : :&lt;=
    super(value.first) &amp;&amp; value.last.send(operator, last)
  else
    super
  end
end
</code></pre>

<p>  end
end</p>

<p>def test_before(r)
  r.include?(2..3)
end
(1..4).include?(2..3) # => false (comportamento padrão)</p>

<h1>Agora liga o refinamento:</h1>

<p>using IncludeRangeExt</p>

<p>(1..4).include?(2..3) # => true  (comportamento refinado)</p>

<p>def test_after(r)
  r.include?(2..3)
end
test_after(1..4) # => true (definido depois de usar, o comportamento tão refinado)</p>

<p>3.times.all? do
  (1..4).include?(2..3)
end # => true  (comportamento refinado)</p>

<h1>Mas a versão refinada acontece apenas para chamadas definidas após o uso:</h1>

<p>test_before(1..4) # => false (definido anteriormente, não afetado)
require 'some_other_file' # => não afetado, usará o comportamento predefinido</p>

<h1>Note:</h1>

<p>(1..4).send :include?, 2..3 # => false (por agora, envio ignora refinamentos)
```
Spec completo está <a href="http://bugs.ruby-lang.org/projects/ruby-trunk/wiki/RefinementsSpec">aqui</a> e está sujeita a mudanças em versões posteriores. Discussão mais aprofundada <a href="http://benhoskin.gs/2013/02/24/ruby-2-0-by-example#refinements">aqui</a>.</p>

<h3>Enumeradores Lazy</h3>

<p>Um <a href="http://ruby-doc.org/core-2.0/Enumerable.html">Enumerable</a> pode ser transformado em um lazy com o novo método <a href="http://ruby-doc.org/core-2.0/Enumerable.html#method-i-lazy">Enumerable#lazy</a>:</p>

<p>```ruby</p>

<h1>Ruby 2.0:</h1>

<p>lines = File.foreach('a_very_large_file')</p>

<pre><code>        .lazy # por isso só ler as partes necessárias!
        .select {|line| line.length &lt; 10 }
        .map(&amp;:chomp)
        .each_slice(3)
        .map {|lines| lines.join(';').downcase }
        .take_while {|line| line.length &gt; 20 }
</code></pre>

<p>  # => Enumerador lazy, ainda não executa nada
lines.first(3) # => Lê o arquivo até que ele retornar 3 elementos</p>

<pre><code>           # ou até que um elemento de length &lt;= 20 é
           # retornado (por causa da take_while)
</code></pre>

<h1>Para consumir o enumerável:</h1>

<p>lines.to_a # ou...
lines.force # => Lê o arquivo e retorna uma array
lines.each{|elem| puts elem } # => Lê o arquivo e imprime os elementos resultantes
```</p>

<p>Note-se que, muitas vezes, <code>lazy</code> é mais lento do que uma versão não <code>lazy</code>. Ele deve ser usado somente quando ele realmente faz sentido, não apenas para evitar a construção de um <code>array</code> intermediário.</p>

<p>```ruby
require 'fruity'
r = 1..100
compare do
  lazy   { r.lazy.map(&amp;:to_s).each_cons(2).map(&amp;:join).to_a }
  direct { r     .map(&amp;:to_s).each_cons(2).map(&amp;:join)      }
end</p>

<h1>=> direto é mais rápida do que por lazy 2x ± 0.1</h1>

<p>```</p>

<h3>Tamanho Lazy</h3>

<p><a href="http://ruby-doc.org/core-2.0/Enumerator.html#method-i-size">Enumerator#size</a> pode ser chamado para obter o tamanho do enumerador sem consumi-lo (se disponível).</p>

<p>```ruby</p>

<h1>Ruby 2.0:</h1>

<p>(1..100).to_a.permutation(4).size # => 94109400
loop.size # => Float::INFINITY
(1..100).drop_while.size # => nil
```</p>

<p>Ao criar enumeradores, seja com <code>to_enum</code>, <code>Enumerator::New</code> ou <code>Enumerator::Lazy::New</code> é possível definir um tamanho muito:</p>

<p>```ruby</p>

<h1>Ruby 2.0:</h1>

<p>fib = Enumerator.new(Float::INFINITY) do |y|
  a = b = 1
  loop do</p>

<pre><code>y &lt;&lt; a
a, b = b, b+a
</code></pre>

<p>  end
end</p>

<p>still_lazy = fib.lazy.take(1_000_000).drop(42)
still_lazy.size # => 1_000_000 - 42</p>

<p>class Enumerable
  def skip(every)</p>

<pre><code>unless block_given?
  return to_enum(:skip, every) { size &amp;&amp; (size+every)/(every + 1) }
end
each_slice(every+1) do |first, *ignore|
  yield last
end
</code></pre>

<p>  end
end</p>

<p>(1..10).skip(3).to_a # => [1, 5, 9]
(1..10).skip(3).size # => 3, sem executar o loop
```</p>

<p>Detalhes adicionais e exemplos na doc de <a href="http://ruby-doc.org/core-2.0/Object.html#method-i-to_enum">to_enum</a>.</p>

<h3><strong>dir</strong></h3>

<p>Embora <a href="http://ruby-doc.org/core-2.0/Kernel.html#method-i-require_relative">require_relative</a> torna o uso de <code>File.dirname(__FILE__)</code> muito menos freqüentes, agora podemos usar <a href="http://ruby-doc.org/core-2.0/Kernel.html#method-i-__dir__"><strong>dir</strong></a></p>

<p>```ruby</p>

<h1>Ruby 1.8:</h1>

<p>require File.dirname(<strong>FILE</strong>) + "/lib"
File.read(File.dirname(<strong>FILE</strong>) + "/.Gemfile")</p>

<h1>Ruby 1.9:</h1>

<p>require_relative 'lib'
File.read(File.dirname(<strong>FILE</strong>) + '/.config')</p>

<h1>Ruby 2.0</h1>

<p>require_relative 'lib' # há necessidade de usar <strong>dir</strong> por isso!
File.read(<strong>dir</strong> + '/.config')
```</p>

<h3>bsearch</h3>

<p>Pesquisa binária já está disponível, usando <a href="http://ruby-doc.org/core-2.0/Array.html#method-i-bsearch">Array#bsearch</a> ou <a href="http://ruby-doc.org/core-2.0/Range.html#method-i-bsearch">Range#bsearch</a>:</p>

<p>```ruby</p>

<h1>Ruby 2.0:</h1>

<p>ary = [0, 4, 7, 10, 12]
ary.bsearch {|x| x >=   6 } #=> 7
ary.bsearch {|x| x >= 100 } #=> nil</p>

<h1>Também em range, incluindo range de floats:</h1>

<p>(Math::PI * 6 .. Math::PI * 6.5).bsearch{|f| Math.cos(f) &lt;= 0.5}</p>

<h1>=> Math::PI * (6+1/3.0)</h1>

<p>```</p>

<h3>to_h</h3>

<p>Existe agora uma forma oficial para converter uma classe a um Hash, utilizando <code>to_h</code>:</p>

<p>```ruby</p>

<h1>Ruby 2.0:</h1>

<p>Car = Struct.new(:make, :model, :year) do
  def build</p>

<pre><code>#...
</code></pre>

<p>  end
end
car = Car.new('Toyota', 'Prius', 2014)
car.to_h # => {:make=>"Toyota", :model=>"Prius", :year=>2014}
nil.to_h # => {}
```</p>

<p>Isso foi implementado para <code>nil</code>, <code>Struct</code> e <code>OpenStruct</code>, mas não para <code>Array</code>/<code>Enumerable</code>:</p>

<p>```ruby
{hello: 'world'}.map{|k, v| [k.to_s, v.upcase]}</p>

<pre><code>            .to_h # =&gt; NoMethodError:
</code></pre>

<h1>undefined method `to_h' for [["hello", "WORLD"]]:Array</h1>

<p>```</p>

<p>Se você acha que isso seria um recurso útil, você deve <a href="http://bugs.ruby-lang.org/issues/7292">tentar convencer Matz</a>.</p>

<h3>caller_locations</h3>

<p>É usado para ser difícil saber qual o método chamado apenas. Que não foi muito eficiente, dado que o backtrace todo teve de ser retornado. Cada frames foi uma seqüência que precisava ser computado primeiramento pelo Ruby e provavelmente analisado depois.</p>

<p>Entra <a href="http://ruby-doc.org/core-2.0/Kernel.html#method-i-caller_locations">caller_locations</a> que retorna a informação de uma forma de objeto e com uma api melhor que pode limitar o número de frames solicitados.</p>

<p>```ruby</p>

<h1>Ruby 1.9:</h1>

<p>def whoze_there_using_caller
  caller[0][/`([<sup>']*)'/,</sup> 1]
end</p>

<h1>Ruby 2.0:</h1>

<p>def whoze_there_using_locations
  caller_locations(1,1)[0].label
end
```</p>

<p>Quanto mais rápido é? <a href="https://gist.github.com/marcandre/5041813">Um teste simples</a> me dá um aumento de velocidade de 45x de um stacktrace curto, e 100x para um stacktrace de 100 entradas!</p>

<p>A informação extra, como o caminho do arquivo, número da linha, ainda são acessíveis, em vez de pedir para o <code>label</code>, para pedir <code>path</code> ou <code>lineno</code>.</p>

<h3>Otimizações</h3>

<p>É difícil mostrar a maioria das otimizações de código, mas algumas otimizações agradáveis que foi feito no <a href="http://www.ruby-lang.org/en/news/2013/02/24/ruby-2-0-0-p0-is-released/">Ruby 2.0.0</a>. Em particular, o GC foi otimizado, em particular para fazer bifurcar muito mais rápido.</p>

<p>Uma otimização que podemos demonstrar é fazer de imediatos muitos floats em sistemas de 64 bits. Isso evita a criação de novos objetos em muitos casos:</p>

<p>```ruby</p>

<h1>Ruby 1.9</h1>

<p>4.2.object_id == 4.2.object_id # => false</p>

<h1>Ruby 2.0</h1>

<p>warn "Optimization only on 64 bit systems" unless 42.size * 8 == 64
4.2.object_id == 4.2.object_id # => true (4.2 é imediato)
4.2e100.object_id == 4.2e100.object_id # => false (4.2e100 não é)
```</p>

<h2>O que mais?</h2>

<p>Uma extensa lista de mudanças é o <a href="https://github.com/marcandre/ruby/blob/news/NEWS.rdoc">arquivo NEWS</a>.</p>

<h2>Eu quero!</h2>

<p>Experimente hoje:</p>

<ul>
<li>Instalar com rvm: <code>rvm get head &amp;&amp; rvm install 2.0.0</code> (note que <code>rvm get stable</code> não é suficiente!)</li>
<li>Instalar com rbenv: <code>rbenv install 2.0.0-p0</code> (eu acho)</li>
<li>Outra instalação: Veja as instruções de <a href="http://www.ruby-lang.org/en/downloads/">ruby-lang.org</a></li>
</ul>


<p>Para aqueles que não podem atualizar ainda, você ainda pode ter um pouco da diversão com a minha gem <a href="https://github.com/marcandre/backports">backports</a>. Ele faz <code>bsearch</code>, <code>lazy</code> e mais um par disponível para qualquer versão do Ruby. A lista completa está no <a href="https://github.com/marcandre/backports#ruby-200">readme</a>.</p>

<p>Aproveite o <a href="http://www.ruby-lang.org/en/news/2013/02/24/ruby-2-0-0-p0-is-released/">Ruby 2.0.0</a>!</p>

<hr />

<p>Até a proxima amigos...</p>

<p>E muito obrigado <a href="https://twitter.com/malafortune">Marc</a>...</p>

<p>And thank you very much <a href="https://twitter.com/malafortune">Marc</a>...</p>

<p>:D</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[TRADUÇÃO] - Trabalhando com time zones em Ruby on Rails]]></title>
    <link href="http://rrmartins.github.com/blog/2012/12/02/traducao-trabalhando-com-time-zones-em-ruby-on-rails/"/>
    <updated>2012-12-02T09:37:00-02:00</updated>
    <id>http://rrmartins.github.com/blog/2012/12/02/traducao-trabalhando-com-time-zones-em-ruby-on-rails</id>
    <content type="html"><![CDATA[<p>Conversando com o <a href="https://twitter.com/cjkihlbom">CJ Kihlbom</a>, um cara super gente boa. :) E ele liberou ai a tradução do post <a href="http://www.elabs.se/blog/36-working-with-time-zones-in-ruby-on-rails">Working with time zones in Ruby on Rails</a>.</p>

<hr />

<p>Tradução</p>

<hr />

<p><a href="http://api.rubyonrails.org">Rails</a> oferece ótimas ferramentas para trabalhar com fusos horários, mas ainda há um monte de coisas que
podem dar errado. Este blog tem como objetivo lançar alguma luz sobre essas pegadinhas e oferecer soluções
para os problemas mais comuns.</p>

<!--more-->


<p>O que, provavelmente, tem me enganado é que a maioria das vezes o fato de que os tolos do Rails acredita que
você tem tudo coberto o tempo todo <strong>(com o perdão do trocadilho)</strong>. Não me interpretem mal. Eu uso Rails
para fazer o trabalho, tanto para mim quanto possível. Mas eu aprendi da maneira mais difícil que eu não
posso fugir não sabendo quando e como o Rails está me ajudando. Outra pegadinha é o fato de que você tem mais
fusos horários em jogo do que você pode acreditar. Considere o seguinte: db, servidor, a máquina dev, sistema
configurado, o usuário específico configurado e o navegador.</p>

<h3>Configure sua app Rails</h3>

<p>Então, quais as ferramentas que temos à nossa disposição como desenvolvedores <a href="http://api.rubyonrails.org">Rails</a>? O mais importante é
a configuração <code>config.time_zone</code> em seu arquivo <code>config/application.rb</code>. ActiveRecord irá ajudá-lo a
converter de e para UTC (o que a documentação não explica) e o fuso horário de sua escolha. Isto significa
que, se tudo que você está fazendo é ter usuários postando varias vezes através de um formulário e utilizar
<code>Active Record</code> que ele persista que você é bom para ir.</p>

<h3>Processamento de informações de time</h3>

<p>Então, o que sobre o fato de fazer algo com a informação de <code>time</code> antes de aceitá-lo? Que é quando se torna
complicado.</p>

<h4>Parsing</h4>

<p>Ao analisar informações de <code>time</code> é importante nunca fazê-lo sem especificar o fuso horário. A melhor maneira
de o fazer é utilizar <code>Time.zone.parse</code> (que vai usar na zona de tempo especificado no <code>config.time_zone</code>) em
vez de apenas <code>Time.parse</code> (que vai usar a zona do computador).</p>

<h4>Trabalhar com atributos numéricos e ActiveRecord</h4>

<p>Chamadas de método como <code>2.hours.ago</code> usa o fuso horário que você configurou, portanto, use este se você
pode! A mesma coisa é verdade para atributos de tempo em modelos <code>ActiveRecord</code>.</p>

<p><code>ruby Time
post = Post.first
post.published_at #=&gt; Thu, 22 Mar 2012 00:00:00 CDT -05:00
</code></p>

<p><code>ActiveRecord</code> busca a hora <code>UTC</code> do banco de dados e converte para o fuso horário em <code>config.time_zone</code> para
você.</p>

<h4>Date vs Time</h4>

<p><code>Time</code> tem informações de <code>Date</code>, mas <code>Date</code> não tem informação de <code>Time</code>. Mesmo que você não acha que se
importa, você pode perceber que você faz, mais cedo ou mais tarde. Seja seguro e use <code>Time</code> (ou <code>DateTime</code>,
se você precisa de suporte para <code>Times</code> muito longe do presente).</p>

<p>Mas vamos dizer que você está preso com uma <code>Date</code> que você precisa para tratar como um <code>Time</code>, pelo menos,
certifique-se de convertê-lo para o seu fuso horário configurado:</p>

<p><code>ruby Date vs Time
1.day.from_now # =&gt; Fri, 02 Mar 2012 22:04:47 JST +09:00
Date.today.to_time_in_current_zone # =&gt; Fri, 02 Mar 2012 00:00:00 JST +09:00
</code></p>

<h4>Consultando</h4>

<p>Desde que Rails sabe que a sua informação de <code>Time</code> é armazenado como UTC no banco de dados que irá converter
a qualquer momento que você dá para o UTC.</p>

<p><code>ruby Query
Post.where (["posts.publised_at&gt;?", Time.zone.now])
</code></p>

<p>Só não se esqueça de nunca construir a seqüência de consulta à mão e use sempre <code>Time.zone.now</code> como a base e
você deve ser seguro.</p>

<h3>Trabalhando com APIs</h3>

<h4>Fornecimento</h4>

<p>A construção de uma API web para o consumo de outros? Certifique-se sempre de enviar todos os dados de tempo
como <code>UTC</code> (e especificar que este é o caso).</p>

<p><code>ruby Time
Time.zone.now.utc.iso8601 # =&gt; "2012-03-16T14: 55:33 Z"
</code></p>

<p>Leia mais sobre por ISO8601 é aconselhável aqui: <a href="http://devblog.avdi.org/2009/10/25/iso8601-dates-in-ruby/">iso8601-dates-in-ruby</a></p>

<h4>Consumindo</h4>

<p>Quando você começa a informação do <code>Time</code> a partir de uma API externa que você não tem controle sobre o que
você simplesmente necessita de descobrir o formato e o fuso horário que é enviado a você. Porque
<code>Time.zone.parse</code> pode não funcionar com o formato que você recebe, pode precisar de usar:</p>

<p><code>ruby Time
Time.strptime(time_string, '%Y-%m-%dT%H:%M:%S%z').in_time_zone(Time.zone)
</code></p>

<p>Por que não há nenhum método <code>#strptime</code> em <code>Time.zone</code> quando há um <code>#parse</code>. No entanto, não se esqueça de
chamar <code>in_time_zone</code> (<code>Time.zone</code>) no seu resultado!</p>

<h3>Trabalhar com vários fusos horários do usuário</h3>

<p>Muitos sistemas necessita de suporte aos usuários para entrar e visualizar as informações de tempo em uma
variedade de zonas de tempo. Para conseguir isso, você precisa armazenar zona de cada usuário tempo
(provavelmente só um dos nomes de zona de tempo <code>String</code> encontrado no <code>rake time:zones:all</code>). Então, para
realmente usar esse fuso horário o padrão mais comum é simplesmente criar um método particular em sua
<code>ActionController</code> e executá-la antes como um filtro.</p>

<p>```ruby Time
before_filter :set_time_zone</p>

<p>def set_time_zone
  Time.zone = current_user.time_zone if current_user
end
```</p>

<p>Isso vai fazer a mesma coisa que <code>config.time_zone</code> mas em uma base por pedido. Eu ainda recomendo mudar o
<code>config.time_zone</code> padrão para um fuso horário que é um bom padrão para seus usuários.</p>

<h4>Testando</h4>

<p>Todos acima é algo que os testes devem pegar para você. O problema é que você como o usuário e seu
computador como o servidor de desenvolvimento, acontece a residir no mesmo fuso horário. Esse raramente é o
 caso, uma vez que você levar as coisas para a produção.</p>

<p>Highgroove liberado apenas <a href="https://github.com/highgroove/zonebie">Zonebie</a>, uma gem que o ajuda a lidar com isso. Eu não tive tempo de testá-lo
eu mesmo ainda, mas parece muito promissor. Se você achar que isso seja um exagero, pelo menos,
certifique-se de que seus testes executados com um conjunto <code>Time.zone</code> para outro fuso horário do que a sua
máquina de desenvolvimento está configurado!</p>

<h4>Bug no Time.zone.parse</h4>

<p>Jarkko Laine (<a href="https://twitter.com/#!/jarkko">@Jarkko</a>) apontou que não há atualmente um bug no <code>Rails</code> que pode fazer o
<code>Time.zone.parse</code> perder uma hora quando o tempo do sistema está em <code>DST</code> (<code>horário de verão</code>) e seu fuso
horário configurado não. Jarkko postou um problema no <code>Rails</code> rastreando o assunto e escreveu um patch para
corrigir o bug. Até que o patch foi aceito ou se você está rodando com versões mais antigas do <code>Rails</code> a
única forma segura de evitar este erro, quer seja um patches para <code>Rails</code> em seu aplicativo com correção
Jarkko’s ou uso:</p>

<p>```ruby Time</p>

<h1>use</h1>

<p>ActiveSupport::TimeWithZone.new(nil, Time.zone, DateTime.parse("2012-03-25 03:29"))</p>

<h1>=> Sun, 25 Mar 2012 03:29:00 PDT -07:00</h1>

<h1>or if possible pass the time zone in the string</h1>

<p>Time.zone.parse("2012-03-25 03:29 PDT")</p>

<h1>=> Sun, 25 Mar 2012 03:29:00 PDT -07:00</h1>

<h1>instead of</h1>

<p>Time.zone.parse("2012-03-25 03:29")</p>

<h1>=> Sun, 25 Mar 2012 04:29:00 PDT -07:00</h1>

<p>```</p>

<p>Deve, contudo, ser mencionado que é muito raro que esta superfícies de bug e quando ele faz isso só pode
perder uma hora. Se você pode viver com o que você provavelmente faz melhor por apenas aguardando o patch
para ser aceito.</p>

<h3>Cheat Sheet</h3>

<h4>FAZER</h4>

<p><code>ruby Date vs Time
2.hours.ago # =&gt; Fri, 02 Mar 2012 14:02:42 CET +01:00
1.day.from_now # =&gt; Fri, 02 Mar 2012 22:04:47 JST +09:00
Date.today.to_time_in_current_zone # =&gt; Fri, 02 Mar 2012 00:00:00 JST +09:00
Time.zone.parse("2012-03-02 16:05:37") # =&gt; Fri, 02 Mar 2012 16:05:37 JST +09:00
Time.zone.now # =&gt; Sat, 03 Mar 2012 00:07:37 JST +09:00
Time.zone.today # If you really can't have a Time or DateTime for some reason
Time.zone.now.utc.iso8601 # "When supliyng an API (you can actually skip .zone here, but I find it better to always use it, than miss it when it's needed)
Time.strptime(time_string, '%Y-%m-%dT%H:%M:%S%z').in_time_zone(Time.zone) # If you can't use parse
</code></p>

<h4>NÃO FAZER</h4>

<p><code>ruby Date vs Time
Time.now # =&gt; 2012-03-02 16:05:37 +0100
Date.today.to_time # =&gt; 2012-03-02 00:00:00 +0100
Time.parse("2012-03-02 16:05:37") # =&gt; 2012-03-02 16:05:37 +0100
Time.now # =&gt; 2012-03-02 16:07:20 +0100
Date.today # This could be yesterday or tomorrow depending on the machine's time zone!
Time.strptime(time_string, '%Y-%m-%dT%H:%M:%S%z') # You won't have the time in your configured time zone!
</code></p>

<h3>Epílogo</h3>

<p>Espero que você tenha aprendido alguma coisa com este post. Tenho certeza que fiz ao escrevê-lo! Se você tem
algum comentário sobre como ele pode ser melhorada, ou se você encontrar algum erro, por favor me avise por
postar um comentário abaixo!</p>

<hr />

<p>Agradeço ao amigo <a href="https://twitter.com/cjkihlbom">CJ Kihlbom</a>, abraços amigo... :D</p>

<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Threads e Concorrência - Exemplos de Threads - Part IV - #Ruby 1.9]]></title>
    <link href="http://rrmartins.github.com/blog/2012/11/04/threads-e-concorrencia-exemplos-de-threads-part-iv-number-ruby-1-dot-9/"/>
    <updated>2012-11-04T09:20:00-02:00</updated>
    <id>http://rrmartins.github.com/blog/2012/11/04/threads-e-concorrencia-exemplos-de-threads-part-iv-number-ruby-1-dot-9</id>
    <content type="html"><![CDATA[<p>Hoje vamos continuar falando de <a href="http://www.ruby-doc.org/core-1.9.3/">Ruby</a>, é hora de nos aprofundar em um pouco de <strong>Threads e Concorrência</strong> agora <strong>Exemplos de Threads</strong>...</p>

<h4>Exemplos de Threads</h4>

<p>Agora que já passamos alguns post falando do modelo <code>Thread</code> e da API de <code>Thread</code> em Ruby, vamos dar uma olhada em alguns
exemplos reais de vários códigos de <code>threads</code>.</p>

<!--more-->


<h3>Leitura de arquivos simultaneamente</h3>

<p>O uso mais comum de <code>threads</code> de Ruby é em programas que são IO. Eles permitem que os programas mantenham ocupado até
mesmo enquanto espera por alguma entrada do usuário, o sistema de arquivos, ou da rede. A seguir de código, por exemplo,
define um método <code>conread</code> (para leitura simultânea) que leva uma série de nomes de arquivos e retorna um mapa de <code>hash</code>
com esses nomes para o conteúdo desses arquivos. Ele usa <code>thread</code> para ler esses arquivos ao mesmo tempo, e é realmente
destinado a ser utilizado com o módulo <code>open-uri</code>, que permite que as URL's <code>HTTP</code> e <code>FTP</code> possam ser abertas com
<code>Kernel.open</code> e ler como se fossem arquivos:</p>

<p>```ruby Lendo arquivos</p>

<h1>Ler arquivos simultaneamente. Use com o módulo "open-uri" para buscar URLs.</h1>

<h1>Passe uma matriz de nomes de arquivos. Retorna um mapa de nomes de arquivos de hash para o conteúdo.</h1>

<p>def conread(filenames)
  h = {}            # hash vazio de resultados</p>

<p>  # Crie uma linha para cada arquivo
  filenames.each do |filename|      # Para cada arquivo chamado
    h[filename] = Thread.new do     # Criar um fio, mapa para filename
      open(filename) {|f| f.read }  # Abra e leia o arquivo
    end                             # valor da linha é o conteúdo do arquivo
  end</p>

<p>  # Percorre o hash, à espera de cada thread para completar.
  # Substitua a thread no hash com o seu valor (o conteúdo de arquivo)
  h.each_pair do |filename, thread|</p>

<pre><code>begin
  h[filename] = thread.value    # Mapa de nomes ao conteúdo do arquivo
rescue
  h[filename] = $!              # Ou a exceção levantada
end
</code></pre>

<p>  end
end
```</p>

<h3>Servidor A Multithreads</h3>

<p>Outra, quase canônico caso, o uso de <code>threads</code> é para escrever servidores que podem comunicar com mais do que um cliente
de cada vez. Vimos como fazer isto utilizando multiplexagem com Kernel.select, mas um pouco mais simples (Embora
possivelmente menos escalável) solução usa <code>threads</code>:</p>

<p>```ruby Servidor a Multithreads
require 'socket'</p>

<h1>Este método espera um socket ligado a um cliente.</h1>

<h1>Ele lê as linhas do cliente, inverte-los e envia-los de volta.</h1>

<h1>Múltiplas Threads podem executar este método, ao mesmo tempo.</h1>

<p>def handle_client(c)
  while true</p>

<pre><code>input = c.gets.chop     # Ler uma linha de entrada do cliente
break if !input         # sai se tem muitas entradas
break if input=="quit"  # ou se o cliente pede
c.puts(input.reverse)   # Caso contrário, responde ao cliente.
c.flush                 # Força a saída para fora
</code></pre>

<p>  end
  c.close                   # Fecha o socket cliente
end</p>

<p>server = TCPServer.open(2000) # Ouve na porta 2000</p>

<p>while true                    # Laço de servidores para sempre
  client = server.accept      # Espere um cliente para conectar
  Thread.start(client) do |c| # Inicia uma nova thread</p>

<pre><code>handle_client(c)          # E Lida com o clinete nessa Thread
</code></pre>

<p>  end
end
```</p>

<h3>Iteradores simultâneas</h3>

<p>Embora tarefas IO são o caso de uso típico para <code>threads</code> de Ruby, eles não se restringem aos que usam. O código a seguir
adiciona um método <code>conmap</code> (por mapa concorrente) para o modulo <code>Enumerável</code>. Ele funciona como mapa, mas processa cada
elemento da matriz de entrada com uma distinta <code>Thread</code>:</p>

<p>```ruby Iterador Simultâneo
module Enumerable           # Abre o módulo Enumerable
  def conmap(&amp;block)        # Define um novo método que espera um block</p>

<pre><code>threads = []            # Começa com uma matriz vazia de threads
self.each do |item|     # Para cada item enumerable
  # Chama o bloco em uma nova Thread, e lembra da Thread
  threads &lt;&lt; Thread.new { block.call(item) }
end
# Agora mapea o conjunto de Threads para os seus valores
threads.map {|t| t.value } # E retorna a matriz de valores
</code></pre>

<p>  end
end
```</p>

<p>E aqui está uma versão concorrente similar do iterador de cada um:</p>

<p>```ruby Módulo Enumerable
module Enumerable
  def concurrently</p>

<pre><code>map {|item| Thread.new { yield item }}.each {|t| t.join }
</code></pre>

<p>  end
end
```</p>

<p>O código é sucinto e desafiador: se você pode fazer sentido, você está bem em seu caminho para o domínio da sintaxe de
Ruby e iteradores Ruby.</p>

<p>Lembre-se que no Ruby 1.9, iteradores padrões que não são passado um bloco retorna um objeto enumerador. Isto significa
que, dado o método <code>concurrently</code> definido mais cedo e um objeto <code>Hash h</code>, podemos escrever:</p>

<p><code>ruby Método Concurrently
h.each_pair.concurrently {|*pair| process(pair)}
</code></p>

<p>Até o proximo amigos!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Threads e Concorrência - Escalando Threads - Part III - #Ruby 1.9]]></title>
    <link href="http://rrmartins.github.com/blog/2012/10/28/threads-e-concorrencia-escalando-threads-part-iii-number-ruby-1-dot-9/"/>
    <updated>2012-10-28T15:04:00-02:00</updated>
    <id>http://rrmartins.github.com/blog/2012/10/28/threads-e-concorrencia-escalando-threads-part-iii-number-ruby-1-dot-9</id>
    <content type="html"><![CDATA[<p>Hoje vamos continuar falando de <a href="http://www.ruby-doc.org/core-1.9.3/">Ruby</a>, é hora de nos aprofundar em um pouco de <strong>Threads e Concorrência</strong> agora <strong>Escalando Threads</strong>...</p>

<h2>Threads e Concorrência</h2>

<h3>Escalando Threads</h3>

<!-- more -->


<p>Intérpretes do Ruby(irb), muitas vezes têm mais <code>threads</code> para executar do que há CPU tem disponível para executá-los. Quando
o processamento paralelo verdadeiro não é possível, é simulado através da partilha de uma CPU entre <code>threads</code>. O processo para
a partilha de uma CPU entre as <code>threads</code> é chamado de escalonamento de <code>threads</code>. Dependendo da implementação e plataforma,
agendamento de <code>threads</code> pode ser feito pelo Intérprete do Ruby(irb), ou pode ser tratado pelo sistema operacional.</p>

<h4>Prioridades da Thread</h4>

<p>O primeiro fator que afeta o agendamento de <code>threads</code> é prioridades de <code>thread</code>: com a alta prioridade da <code>thread</code> são
agendadas antes de baixa prioridade de <code>thread</code>. Mais precisamente, uma <code>thread</code> só vai ficar o tempo de CPU, se não houver
maior prioridade de <code>thread</code> aguardando para ser executada.</p>

<p>Definir e consultar a prioridade de um objeto Ruby <code>Thread</code> com <code>priority=</code> e <code>priority</code>. Note-se que não há nenhuma maneira
de definir a prioridade de uma <code>thread</code> antes que ela comece a funcionar. Uma <code>thread</code> pode, no entanto, aumentar ou diminuir
sua própria prioridade como a primeira ação que toma.</p>

<p>Uma <code>thread</code> recém-criada começa com a mesma prioridade que a <code>thread</code> que a criou. A <code>thread</code> principal começa na prioridade
 0.</p>

<p>Como muitos aspectos de <code>threading</code>, prioridades de <code>threads</code> são depende da implementação do <code>Ruby</code> e do subjacente sistema
operacional. No Linux, por exemplo, <code>threads</code> não privilegiadas não pode ter as suas prioridades levantada ou abaixada. Assim,
no Ruby 1.9 (que usa <code>threads</code> nativas) no <code>Linux</code>, a definição de prioridades de <code>Thread</code> é ignorada.</p>

<h4>Aquisição de Thread e Thread.pass</h4>

<p>Quando várias <code>Threads</code> com a mesma prioridade precisam compartilhar a CPU, cabe a <code>thread</code> programada para decidir quando e
por quanto tempo, cada <code>thread</code> é executada. Alguns escalonadores são antecipadas, o que significa que elas permitem a <code>thread</code>
a ser executada apenas por um determinado período de tempo antes de permitir outra <code>thread</code> da mesma prioridade para ser
executada. Outros programadores não são preempção: uma vez que uma <code>thread</code> começa a correr, ela continua funcionando a menos
que durma, blocos para I/O, ou uma <code>thread</code> de maior prioridade acorda.</p>

<p>Se uma longa linha de computação liga (ou seja, aquela que nunca faz bloqueio para I/O) está em execução em um agendador
não preemptivo, ela vai "morrer de fome" as outras <code>threads</code> com a mesma prioridade, e elas nunca tem a chance de correr.
Para evitar esse problema, de longa duração <code>compute-bound</code> <code>threads</code> devem chamar periodicamente <code>Thread.pass</code> para pedir o
programador para produzir a CPU para outra <code>thread</code>.</p>

<p>Até a proxima amigos! :D</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Threads e Concorrência - Threads e Variáveis - Part II - #Ruby 1.9]]></title>
    <link href="http://rrmartins.github.com/blog/2012/10/28/threads-e-concorrencia-threads-e-variaveis-part-ii-number-ruby-1-dot-9/"/>
    <updated>2012-10-28T14:53:00-02:00</updated>
    <id>http://rrmartins.github.com/blog/2012/10/28/threads-e-concorrencia-threads-e-variaveis-part-ii-number-ruby-1-dot-9</id>
    <content type="html"><![CDATA[<p>Hoje vamos continuar falando de <a href="http://www.ruby-doc.org/core-1.9.3/">Ruby</a>, é hora de nos aprofundar em um pouco de <strong>Threads e Concorrência</strong> agora <strong>Threads e Variáveis</strong>...</p>

<h2>Threads e Concorrência</h2>

<h3>Threads e Variáveis</h3>

<!-- more -->


<p>Uma das características-chave de <code>Thread</code> é que elas podem compartilhar o acesso a variáveis. Como <code>Threads</code> são definidas
por blocos, eles têm acesso a qualquer que seja variáveis ​​(variáveis ​​locais, variáveis ​​de instância, variáveis ​​globais e
 assim por diante) estão no escopo do bloco:</p>

<p>``` ruby Thread e Variavel
x = 0</p>

<p>t1 = Thread.new do
  # Esta Thread pode consultar e definir a variável x
end</p>

<p>t2 = Thread.new do
  # Esta Thread e também consulta e seta x
  # E pode consultar e definir T1 e T2 também.
end
```</p>

<p>Quando dois ou mais <code>Thread</code> de ler e escrever as mesmas variáveis ao mesmo tempo, elas devem tomar cuidado para que elas o
fazem corretamente. Nós vamos ter mais a dizer sobre isso quando consideramos a sincronização de <code>threads</code> abaixo.</p>

<h4>Thread-privadas variáveis</h4>

<p>Variáveis ​​definidas dentro do bloco de uma <code>thread</code> são particulares para essa <code>thread</code> e não são visíveis para qualquer
outra <code>thread</code>. Isto é simplesmente consequência de regras de variáveis de escopo ​​Ruby.</p>

<p>Muitas vezes queremos uma <code>Thread</code> tenha sua própria cópia privada de uma variável de modo a que o seu comportamento não se
altere se o valor do referido mude de variáveis. Considere o seguinte código, que tenta criar três tópicos que impressão (
respectivamente) os números 1, 2 e 3:</p>

<p><code>ruby Threads Privadas
n = 1
while n &lt;= 3
  Thread.new { puts n }
  n += 1
end
</code></p>

<p>Em algumas circunstâncias, em algumas implementações, este código pode funcionar como o esperado e imprimir os números 1, 2 e
3. Em outras circunstâncias, ou em outras implementações, talvez não. É perfeitamente possível (se tópicos recentemente
criados não executa de imediato) para o código imprimir 4, 4, e 4, por exemplo. Cada thread lê uma cópia compartilhada da
variável n, e o valor ds mudanças de variáveis ​​como o loop é executado. O valor impresso pela <code>thread</code> depende de quando esse
segmento é executado em relação para a thread pai.</p>

<p>Para resolver este problema, passamos o valor atual de n para o método <code>Thread.new</code>, e atribuimos o atual valor da variável a
um parâmetro de bloco. Parâmetros de bloco são privados para o bloco, e este valor particular não é partilhado entre tópicos:</p>

<p><code>ruby Threads Privadas
n = 1
while n &lt;= 3
  # Obtem uma cópia privada do valor atual de n em x
  Thread.new(n) {|x| puts x }
  n += 1
end
</code></p>

<p>Note-se que temos uma outra forma de resolver este problema é a utilização de um iterador em vez de um loop <code>while</code>. Neste
caso, o valor de <code>n</code> é modificado para particular para o bloco externo e nunca durante a execução desse bloco:</p>

<p><code>ruby Thread Privada com Interator
1.upto (3) {| n | Thread.new {puts n}}
</code></p>

<h4>Variáveis ​​de Threads locais</h4>

<p>Algumas das variáveis especiais globais de Ruby são <code>thread</code> local: elas podem ter valores diferentes em <code>threads</code> diferentes.
<code>$SAFE</code> e <code>$~</code> são exemplos. Isto significa que, se dois <code>thread</code> estão realizando conconrrencia de expressão regular ao mesmo
tempo, eles vão ver diferentes valores de <code>$~</code>, e a realização de um jogo em um fio não irá interferir com os resultados de
um jogo executado na outra discussão.</p>

<p>A classe <code>Thread</code> provê <code>hash-like</code> como o comportamento. Ele define métodos de instância <code>[]</code> e <code>[]=</code> que permitem associar
valores arbitrários com qualquer símbolo. (Se você usar uma cadeia de caracteres em vez disso, ele será convertido em um
símbolo. Ao contrário <code>hashs</code> de verdade, a classe <code>Thread</code> só permite símbolos como chaves.) Os valores associados a estes
símbolos comportam-se como variáveis ​​de <code>Thread</code> locais. Eles não são privados como variáveis de block ​​locais porque qualquer
<code>Thread</code> pode pesquisar um valor em qualquer outra <code>Thread</code>. Mas eles não são variáveis partilhadas, uma vez que cada Thread
pode ter a sua própria cópia.</p>

<p>Como exemplo, suponha que nós criamos <code>thread</code> para download de arquivos de um servidor web. A <code>Thread</code> principal pode querer
monitorar o progresso do download. Para permitir isso, cada <code>Thread</code> pode fazer o seguinte:</p>

<p><code>ruby Thread de progresso
Thread.current[:progress] = bytes_received
</code></p>

<p>A <code>Thread</code> principal poderia, então, determinar o total de bytes baixado com um código como este:</p>

<p><code>ruby Thread de progresso
total = 0
download_threads.each {|t| total += t[:progress] }
</code></p>

<p>Junto com <code>[]</code> e <code>[]=</code>, <code>Thread</code> também define um método <code>key?</code> para testar se uma determinada chave existe para uma discussão
. Os métodos <code>keys</code> retorna uma matriz de símbolos que representam as chaves definidas para a <code>Thread</code>. Este código pode ser
melhor escrito como se segue, de modo que ela trabalhe de tópicos que ainda não começou a correr e não tenha definido a chave
:progress ainda:</p>

<p><code>ruby Thread de progresso
total = 0
download_threads.each {|t| total += t[:progress] if t.key?(:progress)}
</code></p>

<p>Até a proxima galera! :D</p>
]]></content>
  </entry>
  
</feed>
