<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Rodrigo Martins]]></title>
  <link href="http://rrmartins.github.com/atom.xml" rel="self"/>
  <link href="http://rrmartins.github.com/"/>
  <updated>2012-05-20T13:39:00-03:00</updated>
  <id>http://rrmartins.github.com/</id>
  <author>
    <name><![CDATA[Rodrigo Martins]]></name>
    <email><![CDATA[rodrigo@rrmartins.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Classe Objects em Ruby 1.9.2 - Part IV]]></title>
    <link href="http://rrmartins.github.com/blog/2012/05/20/classe-objects-em-ruby-1-dot-9-2-part-iv/"/>
    <updated>2012-05-20T13:01:00-03:00</updated>
    <id>http://rrmartins.github.com/blog/2012/05/20/classe-objects-em-ruby-1-dot-9-2-part-iv</id>
    <content type="html"><![CDATA[<p>Hoje vamos continuar falando de <a href="http://ruby-doc.org/core-1.9.3/Object.html">Objects</a>, é hora de nos aprofundar.</p>




<h1>Objetos</h1>




<h3>Ordem de Object</h3>


<p></p>

<p>Praticamente todas as classes podem definir o método ==, sendo útil para testar as suas instâncias para a igualdade. Algumas
classes também podem definir uma ordenação. Ou seja: para quaisquer duas instâncias de uma classe, as duas instâncias devem ser iguais,
ou uma instância deve ser &#8220;menos que&#8221; a outra. Numbers são das classes mais óbvias para que tal ordenação seja definido.
String são também ordena, de acordo com o numéro de ordenação dos códigos de caracteres que compõem as strings. Se uma classe define
uns casos de pedido, em seguida, a classe pode ser comparada e classificada.</p>

<!--more-->


<p>Em Ruby, classes definem um ordenação através da implementação do operador &lt;=>. Este operador deve retornar -1 se o operando da esquerda
é menor que o operando da direita, 0 se os dois operandos são iguais, e 1 se o operando esquerdo é maior que o operando direito.
Se os dois operandos não podem ser  significativamente comparados (se o operando direito é de uma classe diferente, por exemplo),
em seguida, o operador deve retornar nil:</p>

<figure class='code'><figcaption><span>Operador <=></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span> <span class="o">&lt;=&gt;</span> <span class="mi">5</span> <span class="c1"># -1</span>
</span><span class='line'><span class="mi">5</span> <span class="o">&lt;=&gt;</span> <span class="mi">5</span> <span class="c1"># 0</span>
</span><span class='line'><span class="mi">9</span> <span class="o">&lt;=&gt;</span> <span class="mi">5</span> <span class="c1"># 1</span>
</span><span class='line'><span class="s2">&quot;1&quot;</span> <span class="o">&lt;=&gt;</span> <span class="mi">5</span> <span class="c1"># nil: inteiros e strings não são comparáveis</span>
</span></code></pre></td></tr></table></div></figure>


<p>O operador &lt;=> é tudo que é necessário para comparar os valores. Mas não é particularmente intuitivo. Assim, as classes que definem
este operador tipicamente também incluir o Módulo <a href="http://ruby-doc.org/core-1.9.2/Comparable.html">Comparable</a> como um mixin.
(Módulos e mixins são abordados em Módulos como Mixins). O mixin Comparable define o seguinte operador em termos de &lt;=>:</p>

<pre><code>&lt;   -   Menor que
&lt;=  -   Menor ou igual
==  -   Igual
&gt;=  -   Maior ou igual
&gt;   -   Maior que
</code></pre>

<p><a href="http://ruby-doc.org/core-1.9.2/Comparable.html">Comparable</a> não define o operador !=; o Ruby automaticamente define o
operador como a negação do operador ==. Além destes operadores de comparação, <a href="http://ruby-doc.org/core-1.9.2/Comparable.html">Comparable</a> também define um método útil de comparação com o between? :</p>

<figure class='code'><figcaption><span>Comparable between?</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">.</span><span class="n">between?</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">10</span><span class="p">)</span> <span class="c1"># verdadeiro: 0 &lt;= 1 &lt;= 10</span>
</span></code></pre></td></tr></table></div></figure>


<p>Se o operador &lt;=> retornar nil, todos os operadores de comparação dele derivados retornam falso. O especial Float com valor NaN é um exemplo:</p>

<figure class='code'><figcaption><span>Float NaN</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">nan</span> <span class="o">=</span> <span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="o">/</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="p">;</span> <span class="c1"># zero dividido por zero não é um número</span>
</span><span class='line'><span class="n">nan</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="c1"># false: não é menor que zero</span>
</span><span class='line'><span class="n">nan</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="c1"># false: não é maior que zero</span>
</span><span class='line'><span class="n">nan</span> <span class="o">==</span> <span class="mi">0</span> <span class="c1"># false: não é igual a zero</span>
</span><span class='line'><span class="n">nan</span> <span class="o">==</span> <span class="n">nan</span> <span class="c1"># false: não é mesmo igual a si mesmo!</span>
</span><span class='line'><span class="n">nan</span><span class="o">.</span><span class="n">equal?</span><span class="p">(</span><span class="n">nan</span><span class="p">)</span> <span class="c1"># isso é verdade, claro</span>
</span></code></pre></td></tr></table></div></figure>


<p>Observe que a definição de &lt;=> e incluindo o módulo <a href="http://ruby-doc.org/core-1.9.2/Comparable.html">Comparable</a> define um operador == para o sua classe. Algumas classes que definem o seu próprio operador ==, normalmente quando eles podem
implementar esta forma mais eficiente do que um teste de igualdade com base no operador &lt;=>. É possível definir classes que
implementam diferentes noções de igualdade em seus operadores == e &lt;=>. Uma classe pode fazer comparações de string case-sensitive
para o operador ==, por exemplo, mas, em seguida, fazem comparações de maiúsculos e minúsculos com &lt;=>, de modo que as instâncias da classe
se classificam com mais naturalidade. Em geral, porém, é melhor se &lt;=> retorna 0 se e somente se == retorna true.</p>

<p>É isso amigos&#8230; o proximo post vamos conversar um pouco de Conversões de Object&#8217;s.</p>

<p>Até Mais..</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Classe Objects em Ruby 1.9.2 - Part III]]></title>
    <link href="http://rrmartins.github.com/blog/2012/05/19/classe-objects-em-ruby-1-dot-9-2-part-iii/"/>
    <updated>2012-05-19T16:58:00-03:00</updated>
    <id>http://rrmartins.github.com/blog/2012/05/19/classe-objects-em-ruby-1-dot-9-2-part-iii</id>
    <content type="html"><![CDATA[<p>Continuando os estudos de Ruby, e a leitura do livro The Ruby Programming Language</p>




<p>Hoje vamos continuar falando de <a href="http://ruby-doc.org/core-1.9.3/Object.html">Objects</a>, é hora de nos aprofundar.</p>




<h1>Objetos</h1>




<h3>Igualdade objeto</h3>


<p>Ruby tem um número surpreendente de maneiras de comparar objetos para igualdade, e é importante entender como eles funcionam, assim você sabe quando usar cada método.</p>

<!--more-->




<h3>O método equal? </h3>


<p>O método equal? é definido pelo objeto para testar se os dois valores referem-se exatamente o mesmo objeto. Para qualquer dos dois
distintos objetos, esse método sempre retorna false:</p>

<figure class='code'><figcaption><span>equal?</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="s2">&quot;Ruby&quot;</span> <span class="c1"># Uma referência a um objeto String</span>
</span><span class='line'><span class="n">b</span> <span class="o">=</span> <span class="n">c</span> <span class="o">=</span> <span class="s2">&quot;Ruby&quot;</span> <span class="c1"># Duas referências a outro objeto String</span>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">equal?</span><span class="p">(</span><span class="n">b</span><span class="p">)</span> <span class="c1"># falsa: a e b são objetos diferentes</span>
</span><span class='line'><span class="n">b</span><span class="o">.</span><span class="n">equal?</span><span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="c1"># verdadeiro: b e c referem-se ao mesmo objeto</span>
</span></code></pre></td></tr></table></div></figure>


<p>Por convenção, nunca subclasses substituem o método equal?.</p>

<p>Outra maneira de determinar se os dois objetos são, de fato, do mesmo objetivo é verificar a sua object_id:</p>

<figure class='code'><figcaption><span>equal?</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">object_id</span> <span class="o">==</span> <span class="n">b</span><span class="o">.</span><span class="n">object_id</span> <span class="c1"># Funciona como a.equal? ​​(b)</span>
</span></code></pre></td></tr></table></div></figure>




<h3>O operador ==</h3>


<p>O operador == é a forma mais comum para testar a igualdade. Na Classe Object, é simplesmente uns testes de sinónimos para equal?, e
se duas referências de objeto são idênticos. A maioria das classes redefinem este operador para permitir instâncias distintas para ser
testado para igualdade:</p>

<figure class='code'><figcaption><span>Operador ==</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="s2">&quot;Ruby&quot;</span> <span class="c1"># uma string</span>
</span><span class='line'><span class="n">b</span> <span class="o">=</span> <span class="s2">&quot;Ruby&quot;</span> <span class="c1"># Um objeto String diferente com o mesmo conteúdo</span>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">equal?</span><span class="p">(</span><span class="n">b</span><span class="p">)</span> <span class="c1"># falsa: a e b não se referem ao mesmo objeto</span>
</span><span class='line'><span class="n">a</span> <span class="o">==</span> <span class="n">b</span> <span class="c1"># verdade: mas estes dois objetos distintos têm valores iguais</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note que o único sinal de igual nesse código é o operador de atribuição. Leva dois sinais de igual para testar a igualdade
em Ruby (esta é uma convenção que compartilha Ruby com muitas outras linguagens de programação).</p>

<p>Padrão de Classes do Ruby definem o operador == para implementar uma razoável definição de igualdade. Isso inclui Array
e as classes de hash. Dois Arrays são iguais de acordo com == se tiverem o mesmo número de elementos,
e se os seus elementos correspondentes são todos iguais de acordo com ==. Dois hashes são == se contiverem o mesmo número de pares
chave/valor, e se as chaves e valores são, eles próprios iguais. (Os valores são comparados com o operador ==,
mas chaves de hash são comparados com o método eql?.)</p>

<pre><code>Igualdade para programadores Java

Se você é um programador Java, você está acostumado a usar o operador == para testar se dois objetos são
o mesmo objeto, e você está acostumado a usar o método equals para testar se dois objetos distintos têm o mesmo valor. 
Convenção do Ruby é apenas sobre o oposto de Java.
</code></pre>

<p>As classes numéricas realizam conversões de tipo simples nas suas operações de ==, de modo que (por exemplo) o
Fixnum 1 e o Float 1.0 comparados como iguais. O operador == de classes, como String e Array, normalmente requerem dois operandos
para ser da mesma classe. Se o operando do lado direito define uma to_str ou função de conversão to_ary, então estes operadores invocam
o operador == definido pelo lado direito operando, e deixam que objeto decidem se é igual ao lado esquerdo, sendo string ou array.
Assim, é possível (embora não comum) para definir classes com comportamento comparação de string ou array.</p>

<p>!= (&#8220;Não-igual&#8221;) é usado em Ruby para testar a desigualdade. Quando o Ruby vê !=, Ele simplesmente usa o operador == e depois
inverte o resultado. Isto significa que uma única classe precisa definir o operador == para definir a sua própria noção de
igualdade. Ruby dá o operador != de graça. No Ruby 1.9, no entanto, as classes podem explicitamente definir os seus próprios operadores !=.</p>

<h3>O método eql?</h3>


<p>O método eql? é definido pelo objeto como um sinônimo para equal?. Classes que se sobrepõem a ele normalmente usá ele como uma
versão rígida do operador == que não faz nenhum tipo de conversão. Por exemplo:</p>

<figure class='code'><figcaption><span>eql?</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span> <span class="o">==</span> <span class="mi">1</span><span class="o">.</span><span class="mi">0</span> <span class="c1"># verdade: Fixnum e objetos flutuantes podem ser ==</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="n">eql</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span> <span class="c1"># falsa: mas eles nunca são eql!</span>
</span></code></pre></td></tr></table></div></figure>


<p>A classe Hash usa eql? para verificar se duas chaves de hash são iguais. Se dois objetos são eql?, os métodos de hash também
deve retornar o mesmo valor. Normalmente, se você criar uma classe e defini o operador ==, você pode simplesmente escrever um
método de hash e definir eql? para usar ==.</p>

<h3>O operador ===</h3>


<p>O operador === é comumente chamado de &#8220;caso de igualdade&#8221; e é usado para testar se o valor-alvo de uma declaração caso corresponde
a qualquer das cláusulas, quando dessa declaração.</p>

<p>Classe Object define por padrão o operador === para que ele chama o operador ==. Para muitas classes, por conseguinte, a igualdade
caso é o mesmo que == (igualdade). Mas certas classes principais definem === de maneira diferente, e nestes casos, é mais de um membro
ou operador correspondente. Range define === para testar se um valor está dentro do intervalo. Regexp define === para testar se uma
string corresponde à expressão regular. E Class define === para testar se um objeto é uma instância dessa Class. No Ruby 1.9, Symbol
define === retornando true se o operando do lado direito é o mesmo símbolo como o esquerda ou se é uma cadeia guardando o mesmo texto.
Exemplos:</p>

<figure class='code'><figcaption><span>Operador ===</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">10</span><span class="p">)</span> <span class="o">===</span> <span class="mi">5</span> <span class="c1"># verdadeiro: 5 está na gama de 1 .. 10</span>
</span><span class='line'><span class="sr">/\d+/</span> <span class="o">===</span> <span class="s2">&quot;123&quot;</span> <span class="c1"># verdade: a seqüência corresponde à expressão regular</span>
</span><span class='line'><span class="nb">String</span> <span class="o">===</span> <span class="s2">&quot;s&quot;</span> <span class="c1"># verdade: &quot;s&quot; é uma instância da classe String</span>
</span><span class='line'><span class="ss">:s</span> <span class="o">===</span> <span class="s2">&quot;s&quot;</span> <span class="c1"># verdadeiro no Ruby 1.9</span>
</span></code></pre></td></tr></table></div></figure>


<p>É raro ver o operador === usado explicitamente como este. Mais comumente, a sua utilização é simplesmente implícita em uma instrução case.</p>

<h3>O operador =~</h3>


<p>O operador =~ é definido pela String e Regexp (e Symbol no Ruby 1.9) para realizar ligações de padrões, e isso não é realmente um
operador de igualdade em tudo. Mas isso não tem um sinal de igual na mesma, de modo que ele está aqui para ser completo.
Objeto define uma versão sem o operador de =~, que sempre retorna false. Você pode definir este operador em sua própria classe,
se essa classe define um tipo de correspondência de operação padrão ou tem uma noção de igualdade aproximada, por exemplo.
!~ é definido como o inverso da =~. É definível em Ruby 1.9 mas não no Ruby 1.8</p>

<p>É isso ai rubistas&#8230; Até a proxima!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Classe Objects em Ruby 1.9.2 - Part II]]></title>
    <link href="http://rrmartins.github.com/blog/2012/05/19/classe-objects-em-ruby-1-dot-9-2-part-ii/"/>
    <updated>2012-05-19T13:14:00-03:00</updated>
    <id>http://rrmartins.github.com/blog/2012/05/19/classe-objects-em-ruby-1-dot-9-2-part-ii</id>
    <content type="html"><![CDATA[<p>Continuando os estudos de Ruby, e a leitura do livro The Ruby Programming Language</p>




<p>Hoje vamos continuar falando de <a href="http://ruby-doc.org/core-1.9.3/Object.html">Objects</a>, é hora de nos aprofundar.</p>




<h1>Objetos</h1>




<h3>Identidade do objeto</h3>


<p>Cada objeto tem um identificador de objeto, um Fixnum, que você pode obter com o método object_id. O valor retornado por este
método é constante e exclusivo para a vida útil do objeto. Enquanto o objeto é acessível, ele terá sempre a mesma identificação, e não
outro objeto que irá partilhar do mesmo ID.</p>

<p>O ID de método é um sinônimo preterido para object_id. Ruby 1.8 emite um aviso se você usá-lo, e ele foi removido em
Ruby 1.9.</p>

<p><strong>id</strong> é um sinônimo válido para object_id. Ele existe como um retorno, assim você pode acessar ID de um objeto, mesmo se o método
object_id foi indefinido ou substituído.</p>

<p>A classe <a href="http://ruby-doc.org/core-1.9.3/Object.html">Object</a> implementa o método de hash para simplesmente retornar um
ID objeto.</p>

<!--more-->




<h3>Classe de Objeto e Tipo de Objeto</h3>


<p>Existem várias maneiras de determinar a classe de um objeto em Ruby. O mais simples é simplesmente perguntar para ele:</p>

<figure class='code'><figcaption><span>Class</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">o</span> <span class="o">=</span> <span class="s2">&quot;teste&quot;</span> <span class="c1"># Este é um valor</span>
</span><span class='line'><span class="n">o</span><span class="o">.</span><span class="n">class</span> <span class="c1"># Retorna um objeto que representa a classe String</span>
</span></code></pre></td></tr></table></div></figure>


<p>Se você estiver interessado na hierarquia de classe de um objeto, você pode perguntar para qualquer classe qual é sua superclasse:</p>

<figure class='code'><figcaption><span>Class - Ruby 1.8</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">o</span><span class="o">.</span><span class="n">class</span> <span class="c1"># String: o é um objeto String</span>
</span><span class='line'><span class="n">o</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">superclass</span> <span class="c1"># Object: superclasse de String é objeto</span>
</span><span class='line'><span class="n">o</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">superclass</span><span class="o">.</span><span class="n">superclass</span> <span class="c1"># nil: Object não tem superclasse</span>
</span></code></pre></td></tr></table></div></figure>


<p>No Ruby 1.9, Object já não é a verdadeira raiz da hierarquia de classes:</p>

<figure class='code'><figcaption><span>Class - Ruby 1.9</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Ruby 1.9</span>
</span><span class='line'><span class="no">Object</span><span class="o">.</span><span class="n">superclass</span> <span class="c1"># BasicObject: Object tem uma superclasse em 1.9</span>
</span><span class='line'><span class="no">BasicObject</span><span class="o">.</span><span class="n">superclass</span> <span class="c1"># nil: BasicObject não tem nenhuma superclasse</span>
</span></code></pre></td></tr></table></div></figure>


<p>Assim, uma forma particularmente simples para verificar a classe de um objeto é, por comparação direta:</p>

<figure class='code'><figcaption><span>Class</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">o</span><span class="o">.</span><span class="n">class</span> <span class="o">==</span> <span class="nb">String</span> <span class="c1"># true se o é uma String</span>
</span></code></pre></td></tr></table></div></figure>


<p>O método instance_of? faz a mesma coisa e é um pouco mais elegante:</p>

<figure class='code'><figcaption><span>Class</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">o</span><span class="o">.</span><span class="n">instance_of?</span> <span class="nb">String</span> <span class="c1"># verdade se o é uma String</span>
</span></code></pre></td></tr></table></div></figure>


<p>Normalmente, quando testamos a classe de um objeto, também gostaríamos saber se o objeto é uma instância de qualquer subclasse
dessa classe. Para testar isso, use o método is_a?, ou seu sinônimo kind_of?</p>

<figure class='code'><figcaption><span>Class</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">x</span> <span class="o">=</span> <span class="mi">1</span> <span class="c1"># Este é o valor que estamos trabalhando com</span>
</span><span class='line'><span class="n">x</span><span class="o">.</span><span class="n">instance_of?</span> <span class="no">Fixnum</span> <span class="c1"># verdade: é uma instância de Fixnum</span>
</span><span class='line'><span class="n">x</span><span class="o">.</span><span class="n">instance_of?</span> <span class="no">Numeric</span> <span class="c1"># false: instance_of? não verifica a herança</span>
</span><span class='line'><span class="n">x</span><span class="o">.</span><span class="n">is_a?</span> <span class="no">Fixnum</span> <span class="c1"># verdadeiro: x é um Fixnum</span>
</span><span class='line'><span class="n">x</span><span class="o">.</span><span class="n">is_a?</span> <span class="nb">Integer</span> <span class="c1"># verdade: x é um número inteiro</span>
</span><span class='line'><span class="n">x</span><span class="o">.</span><span class="n">is_a?</span> <span class="no">Numeric</span> <span class="c1"># verdade: x é um numérico</span>
</span><span class='line'><span class="n">x</span><span class="o">.</span><span class="n">is_a?</span> <span class="no">Comparable</span> <span class="c1"># verdade: funciona também com módulos mixin</span>
</span><span class='line'><span class="n">x</span><span class="o">.</span><span class="n">is_a?</span> <span class="no">Object</span> <span class="c1"># verdadeira para qualquer valor de x</span>
</span></code></pre></td></tr></table></div></figure>


<p>A classe Class define o operador === em tal modo que ele pode ser usado no lugar do is_a?:</p>

<figure class='code'><figcaption><span>Class method ===</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Numeric</span> <span class="o">===</span> <span class="n">x</span> <span class="c1"># verdade: x is_a Numérico</span>
</span></code></pre></td></tr></table></div></figure>


<p>Essa expressão é exclusivo para Ruby e é, provavelmente, menos legível do que utilizando o mais tradicional método is_a?.</p>

<p>Cada objeto tem uma classe bem definida em Ruby, e que a classe nunca muda durante a vida útil do objeto. Um objeto
type, por outro lado, é mais fluido. O tipo de um objeto está relacionada à sua classe, mas a classe é apenas parte de um
tipo de objeto. Quando falamos sobre o tipo de um objeto, nós entendemos o conjunto de comportamentos que caracterizam o objeto.
Outra maneira é colocar o tipo de um objeto em um conjunto de métodos que podem responder.
(Esta definição torna-se recursiva, porque não é apenas o nome dos métodos que importam, mas também os tipos de argumentos que os
métodos podem aceitar.)</p>

<p>Na programação com Ruby, que muitas vezes não se preocupam com a classe de um objeto, nós só queremos saber se podemos invocar
algum método nele.  Considere-se, por exemplo, o operador &lt;&lt;. Arrays, strings, files e outros I/O relacionados ao definir as classes
isso como um operador de acréscimo. Se estamos escrevendo um método que produz produção textual, podemos escrever, genericamente,
a usar esse operador. Então, o nosso método pode ser invocado com qualquer argumento que implementa &lt;&lt;. Nós não nos importamos com a
classe do argumento, basta que possamos anexá-lo. Nós podemos testar para isto com o método respond_to? :</p>

<figure class='code'><figcaption><span>Class respond_to?</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">o</span><span class="o">.</span><span class="n">respond_to?</span> <span class="ss">:&quot;&lt;&lt;&quot;</span> <span class="c1"># Verdadeiro se o operador tem uma &lt;&lt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>A deficiência desta abordagem é que ela só verifica o nome de um método, não os argumentos para esse método. Por exemplo,
Fixnum e Bignum implementam &lt;&lt; como um operador de deslocamento à esquerda e espera o argumento de ser um número em vez de uma string.
Objetos inteiros parecem ser &#8220;appendable&#8221; (adicionável) quando usamos um respond_to? de teste, mas que produzem um erro quando
adiciona um código em string. Não há uma solução geral para este problema, mas um recurso ad-hoc, neste caso,
é explicitamente excluir objectos numéricos com o método is_a? :</p>

<figure class='code'><figcaption><span>Class</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">o</span><span class="o">.</span><span class="n">respond_to?</span> <span class="ss">:&quot;&lt;&lt;&quot;</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">o</span><span class="o">.</span><span class="n">is_a?</span> <span class="no">Numeric</span>
</span></code></pre></td></tr></table></div></figure>


<p>Outro exemplo do tipo distinção-versus-classe é a classe StringIO<a href="partir%20da%20Biblioteca%20padrão%20do%20Ruby">*</a>. StringIO permite a
leitura e gravação das strings como se fossem Objetos de IO. StringIO[*] imita os objetos IO API-StringIO definem os mesmos métodos
que os objetos IO fazem. Mas StringIO não é uma subclasse de IO. Se você escrever um método que espera um argumento de fluxo,
e testa a classe do argumento com is_a? IO, em seguida, o método não funciona com argumentos StringIO.</p>

<p>[*] -> <a href="http://www.ruby-doc.org/stdlib-1.9.3/libdoc/stringio/rdoc/StringIO.html">StringIO</a></p>

<p>É isso ai rubistas&#8230; A cada vez que leio sobre, me apaixono mais. :D</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Classe Objects em Ruby 1.9.2 - Part I]]></title>
    <link href="http://rrmartins.github.com/blog/2012/05/19/classe-objects-em-ruby-1-dot-9-2/"/>
    <updated>2012-05-19T10:23:00-03:00</updated>
    <id>http://rrmartins.github.com/blog/2012/05/19/classe-objects-em-ruby-1-dot-9-2</id>
    <content type="html"><![CDATA[<p>Continuando os estudos de Ruby, e a leitura do livro The Ruby Programming Language</p>




<p>Hoje vamos continuar falando de <a href="http://ruby-doc.org/core-1.9.3/Object.html">Objects</a>, é hora de nos aprofundar.</p>




<h1>Objetos</h1>


<p>Ruby é uma forma muito pura de linguagem orientada a objetos: todos os valores são
objetos, e não há distinção entre tipos primitivos e tipos de objetos, como existem em muitos
outras línguas. Em Ruby, todos os objetos herdam de uma classe chamada
<a href="http://ruby-doc.org/core-1.9.3/Object.html">Object</a> e compartilhar os métodos definidos
por essa classe. Esta seção explica as características comuns de todos os objetos
em Ruby. Teremos algumas partes para falar desta classe tão poderosa, mas é muito importante para o entendimento de OO em Ruby.</p>

<!--more-->


<h3>Referências de objeto</h3>


<p>Quando trabalhamos com objetos em Ruby, realmente estamos trabalhando com referências a objetos. Não é o
próprio objeto que manipula, mas uma referência a ele<a href="http://rrmartins.github.com/blog/2012/05/19/classe-objects-em-ruby-1-dot-9-2/#referencia">[*]</a>.
Quando atribuir um valor a uma variável, não estamos copiando um objeto &#8220;em&#8221; variável que, nós
São apenas armazenar uma referência a um objeto para essa variável. Alguns
código deixa isso claro:</p>

<figure class='code'><figcaption><span>Objects</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="s2">&quot;Ruby&quot;</span> <span class="c1"># Criar um objeto String. Armazenar uma referência a ele em s.</span>
</span><span class='line'><span class="n">t</span> <span class="o">=</span> <span class="n">s</span> <span class="c1"># Copiar a referência a t. s e t referem-se ambos para o mesmo objeto.</span>
</span><span class='line'><span class="n">t</span><span class="o">[-</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span> <span class="c1"># Modificar o objeto através da referência t.</span>
</span><span class='line'><span class="nb">print</span> <span class="n">s</span> <span class="c1"># Acesse o objeto modificado através de s. Prints &quot;Esfregue&quot;.</span>
</span><span class='line'><span class="n">t</span> <span class="o">=</span> <span class="s2">&quot;Java&quot;</span> <span class="c1"># t agora se refere a um objeto diferente.</span>
</span><span class='line'><span class="nb">print</span> <span class="n">s</span><span class="p">,</span> <span class="n">t</span> <span class="c1"># Imprime &quot;RubJava&quot;.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Quando você passar um objeto para um método em Ruby, é um objeto
referência que é passado para o método. Não é o objeto em si,
e não é uma referência para a referência ao objecto. Outra forma
dizer isso é que os argumentos do método são passados ​​por
valor e não por referência, mas
que os valores passados ​​são referências de objeto.</p>

<p>Porque as referências de objeto são passados ​​para os métodos, os métodos podem usar
essas referências para modificar o objeto subjacente. Essas modificações
são, então, visível quando o método retorna.</p>

<h3>Valores imediatos</h3>


<p>Nós dissemos que todos os valores em Ruby são objetos e todos os objetos
são manipulados por referência. Na implementação de referência, no entanto objetos Fixnum e Symbol são realmente &#8220;valores imediatos&#8221;,
em vez de referências. Nenhuma destas duas classes tem métodos diferenciados, de modo que os
Objetos Fixnum e símbolo são imutáveis, o que significa que não há realmente nenhuma maneira de dizer que eles são manipulados por
valor, e não pela existência de valores de referencia.</p>

<p>A existência de valores imediatos deve ser considerado um detalhe de implementação. A única diferença prática entre
valores imediatos e valores de referência é que os valores imediatos
não pode ter métodos singleton definidas sobre eles.</p>

<h3>Vida útil de objeto</h3>


<p>As classes internas em Ruby descritas neste capítulo têm sintaxes literal e instâncias dessas classes são criadas simplesmente por
inclusão de valores literalmente em seu código. Objetos de outras classes precisam ser explicitamente criados,
e isso é feito na maioria das vezes com um método chamado de new:</p>

<figure class='code'><figcaption><span>Class.new</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">myObject</span> <span class="o">=</span> <span class="no">MyClass</span><span class="o">.</span><span class="n">New</span>
</span></code></pre></td></tr></table></div></figure>


<p>new é um método do Classe Class. Atribui na memória para manter o objeto new, então ele inicializa o estado do
recém alocados objetos &#8220;vazio&#8221;, invocando seu método initialize. Os argumentos para new são passadas diretamente para inicializar.
A maioria das classes definem um método initialize para executar qualquer inicialização, sendo necessário para instâncias.</p>

<p>Os métodos new e initialize fornecer o padrão técnico para a criação de novas classes, mas classes também podem definir outros
métodos, conhecidos como &#8220;métodos de fábrica&#8221;, que retornam instâncias.</p>

<p>Objetos Ruby não precisa ser desalocada explicitamente, como o fazem as linguagens C, C++, entre outras. Ruby usa uma técnica chamada
<a href="http://www.rubyinside.com.br/como-o-ruby-gerencia-memoria-e-faz-garbage-collection-3018">garbage collection</a> (coleta de lixo) automaticamente, para destruir objetos que não são mais necessários. Um objeto se torna um candidato para o garbage collection quando é
inacessível, quando não há referências restantes para o objeto com exceção de outros objetos inacessíveis.</p>

<p>O fato de que Ruby usa garbage collection, isso significa que programas em Ruby são menos suscetíveis a vazamentos de memória
que os programas escritos em linguagems que requerem objetos e memória para ser desalocada explicitamente e liberado.
Mas o garbage collection não significa que vazamentos de memória são impossíveis:
qualquer código que cria vida longa tem referências a objetos que de outro modo seria de curta duração pode ser uma fonte de
falhas de memória. Considere um hash usado como um cache. Se o cache não é podado usando algum tipo de algoritmo
menos utilizado recentemente, os objetos em cache permanecem acessíveis enquanto o hash em si é alcançável. Se o hash
é referenciado por uma variável global, então será acessível como desde que o interpretador Ruby está sendo executado.</p>

<p><a href="referencia"></a></p>

<pre><code>[*] -&gt; Se você está familiarizado com C ou C++, você pode pensar de uma
referência como um ponteiro: o endereço do objeto na memória. Ruby
não utiliza ponteiros, no entanto. Referências em Ruby são opacas e
internas para a implementação. Não há maneira de tirar o
tratamento de um valor não referenciado, um valor, ou fazer ponteiro aritmético.
</code></pre>

<p>Um pouco de conceito de Objetos, logo teremos mais na pratica&#8230;</p>

<p>Até a proxima</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[True, False e Nil]]></title>
    <link href="http://rrmartins.github.com/blog/2012/05/18/true/"/>
    <updated>2012-05-18T12:58:00-03:00</updated>
    <id>http://rrmartins.github.com/blog/2012/05/18/true</id>
    <content type="html"><![CDATA[<p>Continuando os estudos de Ruby, e a leitura do livro The Ruby Programming Language</p>




<p>Hoje vamos continuar falando de True, False e Nil, é hora de nos aprofundar.</p>




<h2>True, False e Nil</h2>


<p>Ruby tem alguma das palavras-chave, as palavras: True, False e nil(nulo). True e False são os dois valores booleanos, e eles
representar a verdade e a falsidade, sim e não, ligado e desligado, de um objeto. nil é um valor especial reservado para indicar
a ausência de valor.</p>

<p>Cada uma dessas palavras-chave avaliada como um objeto especial. True avalia a um objeto que é uma instância de <a href="http://ruby-doc.org/stdlib-1.9.2/libdoc/singleton/rdoc/Singleton.html">Singleton</a> de TrueClass. Da mesma forma, False e nil são exemplos de FalseClass e NilClass. Note que não há nenhuma classe Boolean em Ruby. TrueClass e False Class ambos têm como objeto de sua superclasse.</p>

<p>Se você quiser verificar se um valor é nulo, você pode simplesmente compará-lo a nil, ou usar o método nil?</p>

<figure class='code'><figcaption><span>NilClass</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">o</span> <span class="o">==</span> <span class="kp">nil</span> <span class="c1"># o é nil</span>
</span><span class='line'><span class="n">o</span><span class="o">.</span><span class="n">nil?</span> <span class="c1"># Outra maneira de testar</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note que True, False e nil se referem a objetos, e não números. False e nil não são a mesma coisa que 0, e True
não é a mesma coisa que 1. Quando o Ruby exige um valor booleano, nil se comporta como False e qualquer valor diferente de
nil ou False se comporta como True.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Symbols - Ruby 1.9.2]]></title>
    <link href="http://rrmartins.github.com/blog/2012/05/16/symbols-ruby-1-dot-9-2/"/>
    <updated>2012-05-16T21:37:00-03:00</updated>
    <id>http://rrmartins.github.com/blog/2012/05/16/symbols-ruby-1-dot-9-2</id>
    <content type="html"><![CDATA[<p>Continuando os estudos de Ruby, e a leitura do livro The Ruby Programming Language</p>




<p>Hoje vamos continuar falando de Symbol, é hora de nos aprofundar.</p>




<h2>Symbol</h2>


<p>Uma implementação típica de um interpretador Ruby mantém um símbolo em tabela
que ele armazena os nomes de todas as classes, métodos e variáveis ​​que ele conhece.
Isso permite que tal intérprete evite mais comparações de string: refere-se a nomes de métodos (por exemplo) pelo sua
posição na presente tabela de símbolos. Isso transforma uma string relativamente pesada em uma certa operação, e relativamente leve com operação de números inteiro.</p>

<!--more-->


<p>Esses símbolos não são puramente interno para o intérprete, pois eles podem também ser usado por
programas Ruby. Um objeto de Symbol refere-se a um símbolo. Um símbolo literal é escrito prefixando um identificador ou uma string com um
dois pontos:</p>

<figure class='code'><figcaption><span>Symbol</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">:symbol</span> <span class="c1"># Symbol Um literal</span>
</span><span class='line'><span class="ss">:&quot;symbol&quot;</span> <span class="c1"># O mesmo literal</span>
</span><span class='line'><span class="ss">:&#39;another long symbol&#39;</span> <span class="s2">&quot;# são úteis para símbolos com espaços</span>
</span><span class='line'><span class="s2">s = &quot;</span><span class="n">string</span><span class="s2">&quot;</span>
</span><span class='line'><span class="s2">sym = :&quot;</span><span class="c1">#{s}&quot; # O Symbol :string</span>
</span></code></pre></td></tr></table></div></figure>


<p>Símbolos têm também uma sintaxe literal %s que permite delimitadores arbitrários da mesma maneira
que %q e %Q pode ser usado para strings:</p>

<figure class='code'><figcaption><span>Symbol</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sx">%s[&quot;]</span> <span class="c1"># O mesmo que: &#39;&quot;&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Os símbolos são usados ​​frequentemente para se referir a nomes de métodos no reflexivo
código. Por exemplo, suponha que queremos para saber se algum objeto tem um método each:</p>

<figure class='code'><figcaption><span>Symbol</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">o</span><span class="o">.</span><span class="n">respond_to?</span> <span class="ss">:each</span>
</span></code></pre></td></tr></table></div></figure>


<p>Aqui está outro exemplo. Ele testa se um determinado objeto responde a um método especificado, e, em caso afirmativo, invoca o método:</p>

<figure class='code'><figcaption><span>Symbol</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">nome</span> <span class="o">=</span> <span class="ss">:size</span>
</span><span class='line'><span class="k">if</span> <span class="n">o</span><span class="o">.</span><span class="n">respond_to?</span> <span class="n">nome</span>
</span><span class='line'>  <span class="n">o</span><span class="o">.</span><span class="n">send</span> <span class="p">(</span><span class="n">nome</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Você pode converter uma String para um Symbol utilizando os métodos intern ou to_sym. E você pode converter um Symbol de volta para uma String com o método to_s ou sue alias id2name:</p>

<figure class='code'><figcaption><span>Symbol</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">str</span> <span class="o">=</span> <span class="s2">&quot;string&quot;</span> <span class="c1"># Comece com uma string</span>
</span><span class='line'><span class="n">sym</span> <span class="o">=</span> <span class="n">str</span><span class="o">.</span><span class="n">intern</span>  <span class="c1"># Converter para um símbolo</span>
</span><span class='line'><span class="n">sym</span> <span class="o">=</span> <span class="n">str</span><span class="o">.</span><span class="n">to_sym</span> <span class="c1"># Outra maneira de fazer a mesma coisa</span>
</span><span class='line'><span class="n">str</span> <span class="o">=</span> <span class="n">sym</span><span class="o">.</span><span class="n">to_s</span> <span class="c1"># converter de volta para uma string</span>
</span><span class='line'><span class="n">str</span> <span class="o">=</span> <span class="n">sym</span><span class="o">.</span><span class="n">id2name</span> <span class="c1"># Outra maneira de fazê-lo</span>
</span></code></pre></td></tr></table></div></figure>


<p>Duas seqüências podem ter o mesmo conteúdo e ainda ser completamente de objetos distintos. Este nunca é o caso com símbolos.
Duas strings com o mesmo conteúdo irá tanto converter para exatamente o mesmo objeto symbol. Dois objetos distintos Symbols terá sempre conteúdo diferente.</p>

<p>Sempre que você escrever código que usa string não para o seu conteúdo textual,
mas como uma espécie de identificador único, considere o uso de symbols em vez disso.
Ao invés de escrever um método que espera um argumento para ser ou a string de &#8220;AM&#8221; ou &#8220;PM&#8221;, por exemplo, você poderia escrevê-lo para
esperar o símbolo :AM ou o símbolo :PM. Comparando-se dois objetos Symbols de igualdade, é muito mais rápido
de comparar duas strings para a igualdade. Por esta razão, os símbolos são geralmente preferido para strings como chaves de hash.</p>

<p>No Ruby 1.9, a classe símbolo define um número de métodos String, como length, o size, os operadores de comparação, e mesmo os operadores
[] e =~. Isto faz com que os símbolos sejam um pouco permutável com string e permite a sua utilização como uma espécie de imutável
(E não garbage-collected) string.</p>

<p>É isso ai amigos até a proxima.. :D</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testando Associações em Range - Part II]]></title>
    <link href="http://rrmartins.github.com/blog/2012/05/15/testando-associacoes-em-range/"/>
    <updated>2012-05-15T21:49:00-03:00</updated>
    <id>http://rrmartins.github.com/blog/2012/05/15/testando-associacoes-em-range</id>
    <content type="html"><![CDATA[<p>Continuando os estudos de Ruby, e a leitura do livro The Ruby Programming Language</p>




<p>Hoje vamos continuar falando de Range, é hora de nos aprofundar.</p>




<h2>Teste Associação em um intervalo</h2>


<p>A classe Range define métodos para determinar se um valor arbitrário é um membro de (isto é, está incluído no) um Range. Antes de entrar em
detalhes sobre estes métodos, é necessário explicar que associaçãoem range pode ser definido de duas maneiras diferentes que estão relacionadas com a diferença entre os intervalos contínuos e discretos. Um valor x é um membro do range entre begin..end pela primeira definição se:</p>

<figure class='code'><figcaption><span>Range</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">begin</span> <span class="o">&lt;=</span> <span class="n">x</span> <span class="o">&lt;=</span> <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<!--more-->


<p>E X é um membro do range begin&#8230;end (com três pontos), se:</p>

<figure class='code'><figcaption><span>Range</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">begin</span> <span class="o">&lt;=</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Todos os valores de ponto de extremidade deve implementar o operador &lt;=>, assim que esta definição de associação funciona para qualquer objeto Range e não requer um ponto final para implementar o método succ. Esse é o teste de associação contínua.</p>

<p>A segunda definição de filiação discreta independe succ. Ele trata um intervalo begin..end como um conjunto que inclui begin, begin.succ, begin.succ.succ, e assim por diante. Por esta definição, a associação do Range é ajustada a associação, e um valor de x está incluído numa range apenas se for um valor retornado por uma das invocações de succ. Observe que os testes de associação discreta é potencialmente
uma operação muito mais cara do que os testes de associação contínua.</p>

<p>Com isso de fundo, podemos descrever os métodos de distribuição para testar a associação. Ruby 1.8 suporta dois métodos, include?
e member?. Eles são sinônimos, e ambos usam a associação contínua, teste:</p>

<figure class='code'><figcaption><span>Range</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">r</span> <span class="o">=</span> <span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="mi">100</span> <span class="c1"># O intervalo de números inteiros de 0 a 99</span>
</span><span class='line'><span class="n">r</span><span class="o">.</span><span class="n">member?</span> <span class="mi">50</span> <span class="c1"># =&gt; verdadeira: 50 é um membro da range</span>
</span><span class='line'><span class="n">r</span><span class="o">.</span><span class="n">include?</span> <span class="mi">100</span> <span class="c1"># =&gt; falso: 100 está excluída a partir do intervalo</span>
</span><span class='line'><span class="n">r</span><span class="o">.</span><span class="n">include?</span> <span class="mi">99</span><span class="o">.</span><span class="mi">9</span> <span class="c1"># =&gt; verdadeira: 99,9 é inferior a 100</span>
</span></code></pre></td></tr></table></div></figure>


<p>A situação é diferente no Ruby 1.9. Essa versão da linguagem introduz um novo método, cover?, que
funciona como include? e member? do Ruby 1.8, ele sempre usa o teste de associação contínua.
include? e member? ainda são sinônimos no Ruby 1.9. Se os pontos finais do intervalo são números, estes métodos utilizam o
teste de associação contínua, assim como eles fizeram no Ruby 1.8. Se os desfechos não são numéricas, no entanto, eles ao invés de
usar o teste de associação discreta. Podemos ilustrar estas mudanças com um Range discreto de Srintgs (você pode querer usar ri entender como String.succ funciona):</p>

<figure class='code'><figcaption><span>ri String.succ</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">=</span> <span class="nb">String</span><span class="o">.</span><span class="n">succ</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="n">from</span> <span class="n">ruby</span> <span class="n">site</span><span class="p">)</span>
</span><span class='line'><span class="o">------------------------------------------------------------------------------</span>
</span><span class='line'>  <span class="n">str</span><span class="o">.</span><span class="n">succ</span>   <span class="o">-&gt;</span> <span class="n">new_str</span>
</span><span class='line'>  <span class="n">str</span><span class="o">.</span><span class="n">next</span>   <span class="o">-&gt;</span> <span class="n">new_str</span>
</span><span class='line'>
</span><span class='line'><span class="o">------------------------------------------------------------------------------</span>
</span><span class='line'>
</span><span class='line'><span class="no">Returns</span> <span class="n">the</span> <span class="n">successor</span> <span class="n">to</span> <span class="n">str</span><span class="o">.</span> <span class="no">The</span> <span class="n">successor</span> <span class="n">is</span> <span class="n">calculated</span> <span class="n">by</span>
</span><span class='line'><span class="n">incrementing</span> <span class="n">characters</span> <span class="n">starting</span> <span class="n">from</span> <span class="n">the</span> <span class="n">rightmost</span> <span class="n">alphanumeric</span> <span class="p">(</span><span class="ow">or</span> <span class="n">the</span>
</span><span class='line'><span class="n">rightmost</span> <span class="n">character</span> <span class="k">if</span> <span class="n">there</span> <span class="n">are</span> <span class="n">no</span> <span class="n">alphanumerics</span><span class="p">)</span> <span class="k">in</span> <span class="n">the</span> <span class="n">string</span><span class="o">.</span> <span class="no">Incrementing</span>
</span><span class='line'><span class="n">a</span> <span class="n">digit</span> <span class="n">always</span> <span class="n">results</span> <span class="k">in</span> <span class="n">another</span> <span class="n">digit</span><span class="p">,</span> <span class="ow">and</span> <span class="n">incrementing</span> <span class="n">a</span> <span class="n">letter</span> <span class="n">results</span> <span class="k">in</span>
</span><span class='line'><span class="n">another</span> <span class="n">letter</span> <span class="n">of</span> <span class="n">the</span> <span class="n">same</span> <span class="k">case</span><span class="o">.</span> <span class="no">Incrementing</span> <span class="n">nonalphanumerics</span> <span class="n">uses</span> <span class="n">the</span>
</span><span class='line'><span class="n">underlying</span> <span class="n">character</span> <span class="n">set</span><span class="s1">&#39;s collating sequence.</span>
</span><span class='line'>
</span><span class='line'><span class="s1">If the increment generates a ``carry,&#39;</span><span class="err">&#39;</span> <span class="n">the</span> <span class="n">character</span> <span class="n">to</span> <span class="n">the</span> <span class="n">left</span> <span class="n">of</span> <span class="n">it</span> <span class="n">is</span>
</span><span class='line'><span class="n">incremented</span><span class="o">.</span> <span class="no">This</span> <span class="n">process</span> <span class="n">repeats</span> <span class="k">until</span> <span class="n">there</span> <span class="n">is</span> <span class="n">no</span> <span class="n">carry</span><span class="p">,</span> <span class="n">adding</span> <span class="n">an</span>
</span><span class='line'><span class="n">additional</span> <span class="n">character</span> <span class="k">if</span> <span class="n">necessary</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'>  <span class="s2">&quot;abcd&quot;</span><span class="o">.</span><span class="n">succ</span>        <span class="c1">#=&gt; &quot;abce&quot;</span>
</span><span class='line'>  <span class="s2">&quot;THX1138&quot;</span><span class="o">.</span><span class="n">succ</span>     <span class="c1">#=&gt; &quot;THX1139&quot;</span>
</span><span class='line'>  <span class="s2">&quot;&lt;&lt;koala&gt;&gt;&quot;</span><span class="o">.</span><span class="n">succ</span>   <span class="c1">#=&gt; &quot;&lt;&lt;koalb&gt;&gt;&quot;</span>
</span><span class='line'>  <span class="s2">&quot;1999zzz&quot;</span><span class="o">.</span><span class="n">succ</span>     <span class="c1">#=&gt; &quot;2000aaa&quot;</span>
</span><span class='line'>  <span class="s2">&quot;ZZZ9999&quot;</span><span class="o">.</span><span class="n">succ</span>     <span class="c1">#=&gt; &quot;AAAA0000&quot;</span>
</span><span class='line'>  <span class="s2">&quot;***&quot;</span><span class="o">.</span><span class="n">succ</span>         <span class="c1">#=&gt; &quot;**+&quot;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">END</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Range</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">triplica</span> <span class="o">=</span> <span class="s2">&quot;AAA&quot;</span><span class="o">.</span><span class="n">.</span><span class="s2">&quot;ZZZ&quot;</span>
</span><span class='line'><span class="n">triplica</span><span class="o">.</span><span class="n">include?</span> <span class="s2">&quot;ABC&quot;</span> <span class="c1"># verdade, rápido em 1.8 e lento em 1.9</span>
</span><span class='line'><span class="n">triplica</span><span class="o">.</span><span class="n">include?</span> <span class="s2">&quot;ABCD&quot;</span> <span class="c1"># verdadeira em 1.8, false em 1.9</span>
</span><span class='line'><span class="n">triplica</span><span class="o">.</span><span class="n">cover?</span> <span class="s2">&quot;ABCD&quot;</span> <span class="c1"># verdadeiro e rápido em 1.9</span>
</span><span class='line'><span class="n">triplica</span><span class="o">.</span><span class="n">to_a</span><span class="o">.</span><span class="n">include?</span> <span class="s2">&quot;ABCD&quot;</span> <span class="c1"># false e lento em 1.8 e 1.9</span>
</span></code></pre></td></tr></table></div></figure>


<p>Na prática, a maioria dos Ranges têm pontos de extremidade numéricos, e o Range de mudanças na API entre Ruby 1.8
e 1.9 têm pouco impacto.</p>

<p>É isso ai, até a proxima&#8230; :D</p>

<p>E bons estudos..</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ranges - Ruby 1.9.2 - Part I ]]></title>
    <link href="http://rrmartins.github.com/blog/2012/05/13/ranges-ruby-1-dot-9-2-part-i/"/>
    <updated>2012-05-13T02:16:00-03:00</updated>
    <id>http://rrmartins.github.com/blog/2012/05/13/ranges-ruby-1-dot-9-2-part-i</id>
    <content type="html"><![CDATA[<p>Continuando os estudos de Ruby, e a leitura do livro The Ruby Programming Language</p>




<p>Hoje vamos falar um pouco de Range, é hora de nos aprofundar.</p>




<h2>Ranges</h2>


<p>Um objeto Range representa os valores entre um valor de início e um valor final. Range literais são escritas pela colocação de dois ou três pontos entre o início e o valor fim. Se dois pontos são usados, então o intervalo é inclusivo e o valor final é parte do intervalo. Se três pontos são usados, então o intervalo é exclusiva e o valor final não é parte do range:</p>

<figure class='code'><figcaption><span>Range</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">10</span> <span class="c1"># Os números inteiros de 1 a 10, incluindo 10</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="mi">10</span> <span class="c1"># Os números entre 1 e 10, excluindo-se 10</span>
</span></code></pre></td></tr></table></div></figure>


<p>Testar se um valor está incluído em um intervalo com o método include? (mas ver abaixo para uma discussão de alternativas):</p>

<figure class='code'><figcaption><span>Range</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">cold_war</span> <span class="o">=</span> <span class="mi">1945</span> <span class="o">.</span><span class="n">.</span> <span class="mi">1989</span>
</span><span class='line'><span class="n">cold_war</span><span class="o">.</span><span class="n">include?</span> <span class="no">DateTime</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">year</span>
</span></code></pre></td></tr></table></div></figure>


<p>O que esta implícita na definição de um intervalo é a noção de ordem. Se um intervalo são os valores entre dois pontos,
há, obviamente, deve ser alguma forma para comparar os valores para os pontos de extremidade. Em Ruby, isso é feito
com o operador de comparação &lt;=>, que compara seus dois operandos e avalia a -1, 0 ou 1, dependendo da sua ordem relativa
(ou igualdade). Classes, tais como números e strings que têm uma ordenação definir o operador &lt;=>. o
valor só pode ser utilizado como um ponto de extremidade do intervalo se ele responde a esta
operador. Os pontos de extremidade de um intervalo e os valores &#8220;em&#8221; range são
tipicamente, todos da mesma classe. Tecnicamente, no entanto, qualquer valor que é
compatível com o &lt;=> operador do ponto da extremidade do range pode ser considerado um membro do intervalo.</p>

<p>O objetivo primário para os ranges é comparação: para ser capaz de determinar se um valor está dentro ou fora do range. Um importante
objetivo secundário é a iteração: se a classe dos parâmetros de um range definido um método succ (por sucessor), então existe um conjunto discreto de membros de intervalo, e eles podem
ser repetido a cada passo, e métodos de Enumerable. Considere o intervalo &#8216;A&#8217; .. &#8216;c&#8217;, por exemplo:</p>

<figure class='code'><figcaption><span>Range</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">r</span> <span class="o">=</span> <span class="s1">&#39;a&#39;</span> <span class="o">.</span><span class="n">.</span> <span class="s1">&#39;c&#39;</span>
</span><span class='line'><span class="n">r</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">l</span><span class="o">|</span> <span class="nb">print</span> <span class="s2">&quot;[</span><span class="si">#{</span><span class="n">l</span><span class="si">}</span><span class="s2">]&quot;</span><span class="p">}</span> <span class="c1"># imprime &quot;[a] [b] [c]&quot;</span>
</span><span class='line'><span class="n">r</span><span class="o">.</span><span class="n">step</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span><span class="n">l</span><span class="o">|</span> <span class="nb">print</span> <span class="s2">&quot;[</span><span class="si">#{</span><span class="n">l</span><span class="si">}</span><span class="s2">]&quot;</span><span class="p">}</span> <span class="c1"># imprime &quot;[a] [c]&quot;</span>
</span><span class='line'><span class="n">r</span><span class="o">.</span><span class="n">to_a</span> <span class="c1"># =&gt; [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]: Enumerable define to_a</span>
</span></code></pre></td></tr></table></div></figure>


<p>A razão pela qual isto funciona é que a classe String define um método succ e &#8216;a&#8217;.succ é &#8216;b&#8217; e &#8216;b&#8217;.succ é &#8216;c&#8217;. Intervalos que
podem ser iterados como este, são intervalos discretos. Faixas cuja ponto final não definem um método succ não pode ser iterada,
e assim eles podem ser chamadas de contínua. Note-se que os intervalos com terminais inteiros são discretos, mas números de ponto flutuante como ponto final são contínuas.</p>

<p>Faixas com terminais inteiros são os mais comuns de serem usados ​​em programas típicos de Ruby. Porque eles são discretos, os ranges inteiros podem sasurusados para cordas de índice e matrizes. Eles são também uma forma conveniente para
representam uma coleção enumerável de valores ascendentes. Observe que o código atribui um range literal a uma variável, e
em seguida, chama métodos no intervalo através da variável. Se você quiser ou
invocar diretamente em uma ampla literal, você deve colocar parênteses o literal, ou a invocação do método é na verdade sobre o ponto final da variavel, em vez de o objecto range em si:</p>

<figure class='code'><figcaption><span>Range</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span> <span class="o">.</span><span class="n">.</span> <span class="mi">3</span><span class="o">.</span><span class="n">to_a</span> <span class="c1"># tenta chamar to_a sobre o número 3</span>
</span><span class='line'><span class="p">(</span><span class="mi">1</span> <span class="o">.</span><span class="n">.</span> <span class="mi">3</span><span class="p">)</span><span class="o">.</span> <span class="no">To_a</span> <span class="c1"># =&gt; [1,2,3]</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Até a proxima!!!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[O Mundo Hash no Ruby 1.9.2 - Parte III - Hashs Codes]]></title>
    <link href="http://rrmartins.github.com/blog/2012/05/10/o-mundo-hash-no-ruby-1-dot-9-2-parte-iii-hashs-codes/"/>
    <updated>2012-05-10T13:01:00-03:00</updated>
    <id>http://rrmartins.github.com/blog/2012/05/10/o-mundo-hash-no-ruby-1-dot-9-2-parte-iii-hashs-codes</id>
    <content type="html"><![CDATA[<p>Continuando os estudos de Ruby, e a leitura do livro The Ruby Programming Language</p>


<p>Hoje vamos falar um pouco mais de Hash, é hora de nos aprofundar.</p>




<h3>Códigos de Hash, Igualdade e mutáveis ​​Chaves</h3>


<p>Hashs[1] de Ruby são implementadas, sem surpresa, com um conjunto de dados de
estrutura conhecida como uma tabela hash. Objetos usados como chaves em um hash deve ter um método chamado de hash que retorna <a href="http://www.ruby-doc.org/core-1.9.2/Fixnum.html">Fixnum</a> hashcode para a chave. Se duas chaves são iguais, elas devem ter o mesmo
hashcode. Chaves desiguais também pode ter a mesma hashcode, mas hash&#8217;s de tabelas são mais eficientes quando hashcodes duplicados são raros.</p>

<p>A classe Hash compara chaves igualdade com o método <a href="http://www.ruby-doc.org/core-1.9.2/Hash.html#method-i-eql-3F">eql?</a>. Para
outras classes Ruby, eql? obras como o operador == . Se você definir uma nova classe que
substitui o método eql?, você deve também substituir o método <a href="http://www.ruby-doc.org/core-1.9.2/Hash.html#method-i-hash">hash</a>, ou se não as instâncias de sua classe não vam funcionar como chaves em um hash.</p>

<p>Se você definir uma classe e não sobreescrever o método eql?, em seguida, as instâncias dessa classe são
comparadas com a identidade do objeto quando usado como chave de hash. Duas instâncias distintas de sua classe são distintas chaves de hash mesmo que eles representam o mesmo conteúdo. Neste caso, o método padrão hash é apropriado: retorna a única object_id do objeto.</p>

<p>Note-se que objetos mutáveis ​​são problemáticos como chaves de hash. Mudar o conteúdo de um objeto geralmente muda seu hashcode. Se você usar um objeto como uma chave e então alterar esse objeto, a tabela de hash ficará corrompida, e o hash não funciona corretamente.</p>

<p>Porque strings são mutáveis, mas comumente usamos chaves de hash, Ruby trata eles como um caso especial e faz cópias privadas de todas as cadeias utilizadas como chaves. Este é o único caso especial, no entanto, você deve ser muito cuidado ao usar qualquer outro objeto mutável como uma chave hash. Considera fazendo uma cópia privada ou chamando o método <a href="http://ruby-doc.org/core-1.9.2/Object.html#method-i-freeze">freeze</a>.
Se você deve usar chaves de hash mutável, chame o método <a href="http://www.ruby-doc.org/core-1.9.2/Hash.html#method-i-rehash">rehash</a> do Hash cada vez que você alterar uma chave.</p>

<p>-> <a href="http://www.ruby-doc.org/core-1.9.2/Hash.html">Hash</a></p>

<p>Até a proxima!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[O Mundo Hash no Ruby 1.9.2 - Parte II - Hashs Literais]]></title>
    <link href="http://rrmartins.github.com/blog/2012/05/08/o-mundo-hash-no-ruby-1-dot-9-2-parte-ii-hashs-literais/"/>
    <updated>2012-05-08T22:28:00-03:00</updated>
    <id>http://rrmartins.github.com/blog/2012/05/08/o-mundo-hash-no-ruby-1-dot-9-2-parte-ii-hashs-literais</id>
    <content type="html"><![CDATA[<p>Continuando os estudos de Ruby, e a leitura do livro The Ruby Programming Language</p>


<p>Na primeira parte eu fiz uma introdução do Hash:
-> <a href="http://rrmartins.github.com/blog/2012/05/08/o-mundo-hash-no-ruby-1-dot-9-2/">O Mundo Hash no Ruby 1.9.2 - Parte I</a></p>

<p>Vamos lá!</p>

<p>Um literal de hash é escrita como uma lista separada por vírgulas de chave/valor de
pares, colocados dentro de chaves. Chaves e valores são separados
com um caractere de dois &#8220;arrow&#8221;: &#8216;=>&#8217;. O objeto Hash criado anteriormente também pode ser
criado com o literal seguinte:</p>

<!--more-->




<figure class='code'><figcaption><span>Hash Literal</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">n</span><span class="err">ú</span><span class="n">meros</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&quot;um&quot;</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span> <span class="s2">&quot;dois&quot;</span> <span class="o">=&gt;</span> <span class="mi">2</span><span class="p">,</span> <span class="s2">&quot;três&quot;</span> <span class="o">=&gt;</span> <span class="mi">3</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Em geral, objetos <a href="http://www.ruby-doc.org/core-1.9.2/Symbol.html">Símbolos</a> trabalham mais eficientemente como chaves de hash de strings, fazem assim:</p>

<figure class='code'><figcaption><span>Hash Literal</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">n</span><span class="err">ú</span><span class="n">meros</span> <span class="o">=</span> <span class="p">{</span><span class="ss">:um</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span><span class="ss">:dois</span> <span class="o">=&gt;</span> <span class="mi">2</span><span class="p">,</span><span class="ss">:tr</span><span class="err">ê</span><span class="n">s</span> <span class="o">=&gt;</span> <span class="mi">3</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Os <a href="http://www.ruby-doc.org/core-1.9.2/Symbol.html">Símbolos</a> são imutáveis, escrito como
prefixados identificadores, que serão explicados em maior detalhe em um outro post.</p>

<p>Ruby 1.8 permite vírgulas em lugar de setas, mas isso não teve a sintaxe substituída, mais suportado no Ruby 1.9:</p>

<figure class='code'><figcaption><span>Hash Literal</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="n">numeros</span> <span class="o">=</span> <span class="p">{</span><span class="ss">:um</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">:dois</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="ss">:tres</span><span class="p">,</span> <span class="mi">3</span><span class="p">}</span> <span class="c1"># Igual, mas mais difícil de ler</span>
</span></code></pre></td></tr></table></div></figure>


<p>Tanto Ruby 1.8 quanto no Ruby 1.9 permite uma única vírgula à direita do
final da lista de chave / valor:</p>

<figure class='code'><figcaption><span>Hash Literal</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">n</span><span class="err">ú</span><span class="n">meros</span> <span class="o">=</span> <span class="p">{:</span> <span class="n">um</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,:</span> <span class="n">dois</span> <span class="o">=&gt;</span> <span class="mi">2</span><span class="p">}</span> <span class="c1"># vírgula extra ignorado</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ruby 1.9 suporta muito útil e sucinto a sintaxe literal de Hash
quando as chaves são símbolos. Neste caso, move-se para o fim da chave de hash e substitui a seta:</p>

<figure class='code'><figcaption><span>Hash Literal</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">n</span><span class="err">ú</span><span class="n">meros</span> <span class="o">=</span> <span class="p">{</span><span class="n">um</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="n">dois</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="n">tres</span><span class="p">:</span> <span class="mi">3</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note-se que pode não haver qualquer espaço entre a chave Hash
identificador e dos dois pontos.</p>

<p>Até breve!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[O Mundo Hash no Ruby 1.9.2 - Parte I]]></title>
    <link href="http://rrmartins.github.com/blog/2012/05/08/o-mundo-hash-no-ruby-1-dot-9-2/"/>
    <updated>2012-05-08T21:27:00-03:00</updated>
    <id>http://rrmartins.github.com/blog/2012/05/08/o-mundo-hash-no-ruby-1-dot-9-2</id>
    <content type="html"><![CDATA[<p>Continuando os estudos de Ruby, e a leitura do livro The Ruby Programming Language</p>


<p>Um hash é uma estrutura de dados que mantém um conjunto de objetos conhecidos
como chaves, e associa um valor com cada chave. Hashs são também conhecidos como mapas porque mapeam as chaves para
valores. Eles às vezes são chamados de matrizes associativas, porque eles
associam valores com cada uma das chaves, e pode ser pensado como matrizes
em que o índice da matriz pode ser qualquer objeto em vez de um inteiro. um
exemplo torna isso mais claro:</p>

<figure class='code'><figcaption><span>Hash</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Este hash irá mapear os nomes dos dígitos para os dígitos se</span>
</span><span class='line'><span class="n">n</span><span class="err">ú</span><span class="n">meros</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span> <span class="c1"># Criar um novo objeto, vazio de hash</span>
</span><span class='line'><span class="n">n</span><span class="err">ú</span><span class="n">meros</span><span class="o">[</span><span class="s2">&quot;um&quot;</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1</span> <span class="c1"># Mapa do String &quot;um&quot; para o Fixnum 1</span>
</span><span class='line'><span class="n">n</span><span class="err">ú</span><span class="n">meros</span><span class="o">[</span><span class="s2">&quot;dois&quot;</span><span class="o">]</span> <span class="o">=</span> <span class="mi">2</span> <span class="c1"># Note que estamos usando a notação de matriz aqui</span>
</span><span class='line'><span class="n">n</span><span class="err">ú</span><span class="n">meros</span><span class="o">[</span><span class="s2">&quot;três&quot;</span><span class="o">]</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class='line'>
</span><span class='line'><span class="n">soma</span> <span class="o">=</span> <span class="n">n</span><span class="err">ú</span><span class="n">meros</span><span class="o">[</span><span class="s2">&quot;um&quot;</span><span class="o">]</span> <span class="o">+</span> <span class="n">n</span><span class="err">ú</span><span class="n">meros</span><span class="o">[</span><span class="s2">&quot;dois&quot;</span><span class="o">]</span> <span class="c1"># soma os valores e resulta em &quot;3&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Esta introdução à sintaxe hashes de hash documentos Ruby literal
e explica os requisitos para um objeto a ser usado como uma chave hash.
Mais informações sobre a API definida pela classe Hash é fornecido em <a href="http://www.ruby-doc.org/core-1.9.2/Hash.html">Hashes</a>.</p>

<p>Em breve, mais conteudo de Hash!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Um pouco de Array no Ruby]]></title>
    <link href="http://rrmartins.github.com/blog/2012/05/07/um-pouco-de-array-no-ruby/"/>
    <updated>2012-05-07T13:02:00-03:00</updated>
    <id>http://rrmartins.github.com/blog/2012/05/07/um-pouco-de-array-no-ruby</id>
    <content type="html"><![CDATA[<p>Continuando os estudos de Ruby, e a leitura do livro The Ruby Programming Language</p>


<p>Um Array é uma seqüência de valores que permite que os valores serem acessados ​​por sua posição, ou índice, na seqüência. Em Ruby, o primeiro valor em um array tem índice 0. Os métodos size e length, retornam o número de elementos em um Array. O último
elemento do Array é no índice de size-1. Valores de índice negativo contar a partir do
final do Array, de modo que o último elemento de uma Array também pode ser acessado
com um índice de -1. O segundo ao último tem um índice de -2,
e assim por diante. Se você tentar ler um elemento além do final de uma Array
(Com um index >= size), ou antes
o início de um Array (com um index &lt; size), Ruby simplesmente retorna nil e não lançará uma exceção.</p>

<!--more-->


<p>Arrays de Ruby não são tipados e mutáveis. Os elementos de um Array
não precisam de ser todos da mesma classe, e eles podem ser alterados em qualquer momento.
Além disso, os Arrays são dinamicamente redimensionáveis, você pode acrescentar elementos
a eles e crescer conforme necessário. Se você atribuir um valor a um elemento
além do final do Array, a Array é automaticamente prorrogado com
elementos nil. (É um erro, No entanto, para atribuir um valor para um elemento antes do início de um
Array.)</p>

<p>Uma Array literal é uma lista separada por vírgulas de valores, dentro de
parênteses:</p>

<figure class='code'><figcaption><span>Arrays Literal</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span> <span class="c1"># Uma Array que contém três objetos Fixnum</span>
</span><span class='line'><span class="o">[-</span><span class="mi">10</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span> <span class="o">.</span><span class="n">.</span> <span class="mi">10</span><span class="p">,</span><span class="o">]</span> <span class="c1"># Uma Array de duas faixas; vírgulas extras são permitidos</span>
</span><span class='line'><span class="o">[[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="mi">5</span><span class="o">]]</span> <span class="c1"># Uma Array de Arrayes aninhadas</span>
</span><span class='line'><span class="o">[</span><span class="n">X</span> <span class="o">+</span> <span class="n">y</span><span class="p">,</span> <span class="n">xy</span><span class="p">,</span> <span class="n">x</span> <span class="o">*</span> <span class="n">y</span><span class="o">]</span> <span class="c1"># array os elementos podem ser expressões arbitrárias</span>
</span><span class='line'><span class="o">[]</span> <span class="c1"># O array vazio tem o tamanho 0</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ruby inclui uma sintaxe especial, no caso para expressar literais de Array
cujos elementos são seqüências curtas sem espaços:</p>

<figure class='code'><figcaption><span>Arrays</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">palavras</span> <span class="o">=</span> <span class="sx">%w[este é um teste]</span> <span class="c1"># O mesmo que: [&#39;este&#39;, &#39;é&#39;, &#39;um&#39;, &#39;teste&#39;]</span>
</span><span class='line'><span class="n">aberto</span> <span class="o">=</span> <span class="sx">%w| ( [ { &lt; |</span> <span class="c1"># O mesmo que: [&#39;(&#39;, &#39;[&#39;, &#39;{&#39;, &#39;&lt;&#39;]</span>
</span><span class='line'><span class="n">branco</span> <span class="o">=</span> <span class="sx">%W(</span><span class="se">\s</span><span class="sx"> </span><span class="se">\t</span><span class="sx"> </span><span class="se">\r</span><span class="sx"> </span><span class="se">\n</span><span class="sx">)</span> <span class="c1"># O mesmo que: [&quot;\ s&quot;, &quot;\ t&quot;, &quot;\ r&quot;, &quot;\ n&quot;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>%w e %W introduzir uma Array literal, bem como %q e %Q introduzir uma string literal. Em
particular, as regras delimitadores para %w e %W são as mesmos que para %q e %Q. Dentro dos delimitadores, sem aspas
são necessários em torno das cadeias de elementos do array, e sem vírgulas são
requerido entre os elementos. Elementos do Array são delimitados por espaço em branco.</p>

<p>Você também pode criar Arrays com o construtor Array.new, e isso proporciona
opções de programação inicializando os elementos de Array:</p>

<figure class='code'><figcaption><span>Initiallize Array</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">vazio</span> <span class="o">=</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span> <span class="c1"># []: retorna um novo array vazio</span>
</span><span class='line'><span class="n">nils</span> <span class="o">=</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="c1"># [nil, nil, nil]: nova Array com 3 elementos nulos</span>
</span><span class='line'><span class="n">zeros</span> <span class="o">=</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="c1"># [0, 0, 0, 0]: nova Array com 4 elementos 0</span>
</span><span class='line'><span class="n">c</span><span class="err">ó</span><span class="n">pia</span> <span class="o">=</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">nils</span><span class="p">)</span> <span class="c1"># Faça uma nova cópia de uma Array existente</span>
</span><span class='line'><span class="n">count</span> <span class="o">=</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span> <span class="n">i</span> <span class="o">|</span> <span class="n">i</span> <span class="o">+</span><span class="mi">1</span><span class="p">}</span> <span class="c1"># [1,2,3]: 3 elementos calculado a partir do índice</span>
</span></code></pre></td></tr></table></div></figure>


<p>Para obter o valor de um elemento do Array, use um único número inteiro
entre colchetes:</p>

<figure class='code'><figcaption><span>Valores com Array</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="o">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">16</span><span class="o">]</span> <span class="c1"># O Array mantém os quadrados dos índices</span>
</span><span class='line'><span class="n">a</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="c1"># primeiro elemento é 0</span>
</span><span class='line'><span class="n">a</span><span class="o">[-</span><span class="mi">1</span><span class="o">]</span> <span class="c1"># O ultimo elemento é de 16</span>
</span><span class='line'><span class="n">a</span><span class="o">[-</span><span class="mi">2</span><span class="o">]</span> <span class="c1"># segundo ao último elemento é 9</span>
</span><span class='line'><span class="n">a</span><span class="o">[</span><span class="n">a</span><span class="o">.</span><span class="n">size</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span> <span class="c1"># Outra forma de consultar o último elemento</span>
</span><span class='line'><span class="n">a</span><span class="o">[-</span><span class="n">a</span><span class="o">.</span><span class="n">size</span><span class="o">]</span> <span class="c1"># Outra forma de consultar o primeiro elemento</span>
</span><span class='line'><span class="n">a</span><span class="o">[</span><span class="mi">8</span><span class="o">]</span> <span class="c1"># Consultando além do fim retorna nil</span>
</span><span class='line'><span class="n">a</span><span class="o">[-</span><span class="mi">8</span><span class="o">]</span> <span class="c1"># Consultando antes do início retorna nil, também</span>
</span></code></pre></td></tr></table></div></figure>


<p>Todas as expressões acima, exceto para a última, pode também ser
utilizado no lado esquerdo de uma atribuição:</p>

<figure class='code'><figcaption><span>Arrays</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;zero&quot;</span> <span class="c1"># a é [&quot;zero&quot;, 1, 4, 9, 16]</span>
</span><span class='line'><span class="n">a</span><span class="o">[-</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">16</span> <span class="c1"># a é [&quot;zero&quot;, 1, 4, 9, 1 .. 16]</span>
</span><span class='line'><span class="n">a</span><span class="o">[</span><span class="mi">8</span><span class="o">]</span> <span class="o">=</span> <span class="mi">64</span> <span class="c1"># a é [&quot;zero&quot;, 1, 4, 9, 1 .. 16, nil, nil, nil, 64]</span>
</span><span class='line'><span class="n">a</span><span class="o">[-</span><span class="mi">10</span><span class="o">]</span> <span class="o">=</span> <span class="mi">100</span> <span class="c1"># erro: não é possível atribuir antes do início de um array</span>
</span></code></pre></td></tr></table></div></figure>


<p>Como strings, Arrayes também podem ser indexados com dois números inteiros que
representam um índice de partida e um número de elementos, ou um objeto de intervalo. Em qualquer caso, a expressão
retorna o sub-array especificado:</p>

<figure class='code'><figcaption><span>Array</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="o">.</span><span class="n">.</span><span class="s1">&#39;e&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">to_a</span> <span class="c1"># Faixa convertido para [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;]</span>
</span><span class='line'><span class="n">a</span><span class="o">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="o">]</span> <span class="c1"># []: este subarray tem zero elementos</span>
</span><span class='line'><span class="n">a</span><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="o">]</span> <span class="c1"># [&#39;b&#39;]: uma Array de um elemento</span>
</span><span class='line'><span class="n">a</span><span class="o">[-</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="o">]</span> <span class="c1"># [&#39;d&#39;, &#39;e&#39;]: os últimos dois elementos do array</span>
</span><span class='line'><span class="n">a</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="mi">2</span><span class="o">]</span> <span class="c1"># [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]: os primeiros três elementos</span>
</span><span class='line'><span class="n">a</span><span class="o">[-</span><span class="mi">2</span> <span class="o">.</span><span class="n">.</span> <span class="o">-</span><span class="mi">1</span><span class="o">]</span> <span class="c1"># [&#39;d&#39;, &#39;e&#39;]: os últimos dois elementos do array</span>
</span><span class='line'><span class="n">a</span> <span class="o">[</span><span class="mi">0</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span> <span class="o">-</span><span class="mi">1</span><span class="o">]</span> <span class="c1"># [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;]: a totalidade, mas o último elemento</span>
</span></code></pre></td></tr></table></div></figure>


<p>Quando utilizado no lado esquerdo de uma atribuição, um sub-array pode ser
substituído pelos elementos do Array do lado direito. Esta básica
operação funciona para inserções e exclusões, bem como:</p>

<figure class='code'><figcaption><span>Arrays</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span><span class="o">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="o">]</span> <span class="o">=</span> <span class="o">[</span><span class="s1">&#39;A&#39;</span><span class="p">,</span> <span class="s1">&#39;B&#39;</span><span class="o">]</span> <span class="c1"># se torna [&#39;A&#39;, &#39;B&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;]</span>
</span><span class='line'><span class="n">a</span><span class="o">[</span><span class="mi">2</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span> <span class="mi">5</span><span class="o">]</span> <span class="o">=</span> <span class="o">[</span><span class="s1">&#39;C&#39;</span><span class="p">,</span> <span class="s1">&#39;D&#39;</span><span class="p">,</span> <span class="s1">&#39;E&#39;</span><span class="o">]</span> <span class="c1"># se torna [&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;, &#39;E&#39;]</span>
</span><span class='line'><span class="n">a</span><span class="o">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">]</span> <span class="c1"># Inserir elementos no início de a</span>
</span><span class='line'><span class="n">a</span><span class="o">[</span><span class="mi">0</span> <span class="o">.</span><span class="n">.</span> <span class="mi">2</span><span class="o">]</span> <span class="o">=</span> <span class="o">[]</span> <span class="c1"># Excluir os elementos</span>
</span><span class='line'><span class="n">a</span><span class="o">[-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="o">[</span><span class="s1">&#39;Z&#39;</span><span class="o">]</span> <span class="c1"># Substitua último elemento com outro</span>
</span><span class='line'><span class="n">a</span><span class="o">[-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;Z&#39;</span> <span class="c1"># Para os elementos individuais, a Array é opcional</span>
</span><span class='line'><span class="n">a</span><span class="o">[-</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="o">]</span> <span class="o">=</span> <span class="kp">nil</span> <span class="c1"># Excluir últimos 2 elementos em 1,8; substituir com nil em 1,9</span>
</span></code></pre></td></tr></table></div></figure>


<p>Além disso para o operador colchete para indexar um Array,
a classe Array define uma série de outros operadores úteis. Use + para
concatenar dois Arrays:</p>

<figure class='code'><figcaption><span>Concatenar Arrays</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span> <span class="o">+</span> <span class="o">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="o">]</span> <span class="c1"># [1, 2, 3, 4, 5]</span>
</span><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="o">[[</span><span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="o">]]</span> <span class="c1"># [1, 2, 3, 4, 5, [6, 7, 8]]</span>
</span><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="mi">9</span> <span class="c1"># erro: lado direito deve ser um array</span>
</span></code></pre></td></tr></table></div></figure>


<p>O operador + cria um novo Array que contém os elementos de ambos os seus operandos. Use &lt;&lt; para acrescentar um elemento para o final de um
Array existente, e usar a concat anexar os elementos de um array:</p>

<figure class='code'><figcaption><span>Array + e concat</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="o">[]</span> <span class="c1"># Comece com uma Array vazia</span>
</span><span class='line'><span class="n">a</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span> <span class="c1"># a é [1]</span>
</span><span class='line'><span class="n">a</span> <span class="o">&lt;&lt;</span> <span class="mi">2</span> <span class="o">&lt;&lt;</span> <span class="mi">3</span> <span class="c1"># a é [1, 2, 3]</span>
</span><span class='line'><span class="n">a</span> <span class="o">&lt;&lt;</span> <span class="o">[</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="o">]</span> <span class="c1"># a é [1, 2, 3, [4, 5, 6]]</span>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">concat</span> <span class="o">[</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="o">]</span> <span class="c1"># a é [1, 2, 3, [4, 5, 6], 7, 8]</span>
</span></code></pre></td></tr></table></div></figure>


<p>O operador - subtrai um Array do outro. Começa por fazer uma cópia de sua Array da esquerda,
e, em seguida, remove todos os elementos de que a cópia se que apareçam em qualquer
a Array do lado direito:</p>

<figure class='code'><figcaption><span>Array -</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="s1">&#39;A&#39;</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">,</span> <span class="s1">&#39;c&#39;</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">,</span> <span class="s1">&#39;a&#39;</span><span class="o">]</span> <span class="o">-</span> <span class="o">[</span><span class="s1">&#39;b&#39;</span><span class="p">,</span> <span class="s1">&#39;c&#39;</span><span class="p">,</span> <span class="s1">&#39;d&#39;</span><span class="o">]</span> <span class="c1"># [&#39;A&#39;, &#39;a&#39;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Como a classe String, Array também usa o operador de multiplicação
para a repetição:</p>

<figure class='code'><figcaption><span>Array *</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">*</span> <span class="mi">8</span> <span class="c1"># [0, 0, 0, 0, 0, 0, 0, 0]</span>
</span></code></pre></td></tr></table></div></figure>


<p>A classe Array contem tambem os Operadores booleanos (| , &amp;) e usa-los para a união e
interseção. | Concatena seu argumentos e, em seguida, remove todos os elementos repetidos no resultado.
&amp; retorna uma Array que contém elementos que aparecem em ambas as Arrayes de operando. A Array retornada
não contém elementos duplicados:</p>

<figure class='code'><figcaption><span>Array</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="o">]</span>
</span><span class='line'><span class="n">b</span> <span class="o">=</span> <span class="o">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="o">]</span>
</span><span class='line'><span class="n">a</span> <span class="o">|</span> <span class="n">b</span> <span class="c1"># [1, 2, 3, 4, 5]: duplicatas são removidas</span>
</span><span class='line'><span class="n">b</span> <span class="o">|</span> <span class="n">a</span> <span class="c1"># [5, 4, 3, 2, 1]: elementos são os mesmos, mas a ordem é diferente</span>
</span><span class='line'><span class="n">a</span> <span class="o">&amp;</span> <span class="n">b</span> <span class="c1"># [2, 3, 4]</span>
</span><span class='line'><span class="n">b</span> <span class="o">&amp;</span> <span class="n">a</span> <span class="c1"># [4, 3, 2]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note-se que estes operadores não são transitivos: a | b não é o mesmo que b | a, por exemplo. Se você ignorar o ordenamento
dos elementos, no entanto, e considerar os Arrays para ser ordenado os conjuntos,
então estes operadores fazem mais sentido. Note também que o algoritmo
que a união e intersecção são realizados não é especificado, e não
existem garantias sobre a ordem dos elementos no retornou dos
Arrays.</p>

<p>A classe Array define um bom número de alguns métodos úteis. O único que vamos discutir aqui é o iterador each, usada para loop através ds
elementos de um Array:</p>

<figure class='code'><figcaption><span>Array each</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="p">(</span><span class="s1">&#39;A&#39;</span> <span class="o">.</span><span class="n">.</span> <span class="s1">&#39;Z&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">to_a</span> <span class="c1"># Comece com uma série de cartas</span>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span> <span class="n">x</span> <span class="o">|</span> <span class="nb">print</span> <span class="n">x</span><span class="p">}</span> <span class="c1"># Imprimir o alfabeto, uma letra de cada vez</span>
</span></code></pre></td></tr></table></div></figure>


<p>Outros métodos do Array você pode deseja procurar,  incluindo: clear,
compact!, delete_if, each_index, empty?, fill, flatten!, include?, index, join, pop,
push, reverse, reverse_each, rindex, shift, sort, sort!, uniq!, e unshift.</p>

<p><a href="http://www.ruby-doc.org/core-1.9.2/Array.html">www.ruby-doc.org/core-1.9.2/Array.html</a></p>

<p>Até a proxima amigos&#8230; :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Desenvolvendo Um Chat com NodeJS]]></title>
    <link href="http://rrmartins.github.com/blog/2012/04/30/desenvolvendo-um-chat-com-nodejs/"/>
    <updated>2012-04-30T17:34:00-03:00</updated>
    <id>http://rrmartins.github.com/blog/2012/04/30/desenvolvendo-um-chat-com-nodejs</id>
    <content type="html"><![CDATA[<p>Olá Developers&#8230;</p>

<p>Vamos desenvolver um pequeno Chat em NodeJS&#8230; Estou começando com os estudos de NodeJS tambem, e tem sido de grande valia para mim&#8230;</p>

<p>Então, antes de mais nada, vamos fazer o download do NodeJS no link <a href="http://nodejs.org/#download">nodejs.org</a>, ou podemos instalar com o <a href="https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager">Node Package Manager (npm)</a>. Eu estou usando o npm, e indico a todos&#8230; :D</p>

<p>Vamos criar a aplicação, crie uma pasta com o nome da aplicação:</p>

<figure class='code'><figcaption><span>Criando Pasta </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir app_chat</span></code></pre></td></tr></table></div></figure>


<p>Agora vamos entrar na pasta do projeto, e criar o arquivo que será nosso servidor, nome exemplo: heloword_server.js.</p>

<p>Hora de começar a brincar com o servidor.</p>

<figure class='code'><figcaption><span>Criando o server</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;fs&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">server</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;http&#39;</span><span class="p">).</span><span class="nx">createServer</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">response</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span><span class="s1">&#39;helloworld.html&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">response</span><span class="p">.</span><span class="nx">writeHead</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="p">{</span><span class="s1">&#39;Content-Type&#39;</span><span class="o">:</span><span class="s1">&#39;text/html&#39;</span><span class="p">});</span>
</span><span class='line'>    <span class="nx">response</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">response</span><span class="p">.</span><span class="nx">end</span><span class="p">();</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Na linha 1, temos um require(&#8216;fs&#8217;), este é um framework do nodejs, que serve para trabalhar com arquivos.</p>

<p>Na linha 2, estamos instanciando e criando o server &#8216;http&#8217;.</p>

<p>Na linha 3, já dentro da função do createServer, temos a leitura do arquivo que será alimentado, e uma criação de função.</p>

<p>Na linha 4, estamos escrevendo o arquivo, lembrando que ele será do tipo HTML.</p>

<p>Na linha 5, temos a escrita no arquivo. E abaixo finalizamos.</p>

<p>Este processo de leitura do arquivo, ocorre sempre que alguem entra na aplicação.</p>

<p>Vamos continuar, agora vamos colocar uma porta para o servidor.</p>

<figure class='code'><figcaption><span>Criando uma porta e aplicando ao server</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">port</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">PORT</span> <span class="o">||</span> <span class="mi">3000</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">server</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="nx">port</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Listening on &quot;</span> <span class="o">+</span> <span class="nx">port</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Neste exemplo acima, pegamos o número da porta do processo, ou fica valendo a porta 3000.</p>

<p>Logo depois coloco a port no server, neste exemplo eu criei uma função, só para logar o numero da porta, logo nos logs do servidor estará o numero da porta, quando iniciar.</p>

<p>Vamos agora começar a escrever as funcionalidades do servidor. Vamos escrever as funções que tratam que esta entrando e quem esta saindo da app.</p>

<figure class='code'><figcaption><span>Function Connected e Disconnected</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">everyone</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;now&quot;</span><span class="p">).</span><span class="nx">initialize</span><span class="p">(</span><span class="nx">server</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">everyone</span><span class="p">.</span><span class="nx">connected</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Joined: &quot;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">now</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">everyone</span><span class="p">.</span><span class="nx">disconnected</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Left: &quot;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">now</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nesta função, instancio o framework &#8217;<a href="http://www.nowjs.com/">now</a>&#8217;, que voce pode esta instalando com o comando: npm install now</p>

<p>Dentro do &#8217;<a href="http://www.nowjs.com/">now</a>&#8217;, temos 2 funções, a <a href="http://www.nowjs.com/doc/symbols/nowjs#event:connect">connected</a> e a <a href="http://www.nowjs.com/doc/symbols/nowjs#event:disconnect">disconnected</a>, nessas funções, estou registrando quem esta se logando e quem esta saindo da aplicação.</p>

<p>Agora vem a parte legal, vamos criar em modo de execução 2 funções, só que uma dentro da outra, ou seja, vamos usar fortemente o conceito de <a href="http://lucastex.com.br/2009/10/21/nao-tenha-medo-das-closures/">closure</a>, mas por favor, não tenha medo disso, parece estranho no inicio, mas acredite o trem é legal&#8230;</p>

<figure class='code'><figcaption><span>Criando Funções dentro de Funções</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">everyone</span><span class="p">.</span><span class="nx">now</span><span class="p">.</span><span class="nx">distributeMessage</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">message</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;mensagem &quot;</span><span class="o">+</span><span class="nx">message</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">message</span> <span class="o">=</span> <span class="nx">message</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/(&lt;([^&gt;]+)&gt;)/ig</span><span class="p">,</span><span class="s2">&quot;&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">everyone</span><span class="p">.</span><span class="nx">now</span><span class="p">.</span><span class="nx">receiveMessage</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">now</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span> <span class="nx">message</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Neste bloco de codigos, estamos criando a função distributeMessage, que esta, receberá a mensagem.</p>

<p>Na linha 2, estou somente logando a mensagem que chegou.</p>

<p>Na liinha 3, estamos tratando com uma expressão regular, a mensagem que chega, para que ninguem possa trollar a app com codigo de javascript, e outras coisas&#8230;</p>

<p>Na linha 4, estamos fazendo a chamada da função que esta na view, e ela que imprimi a mensagem no DOM.</p>

<p>Logo o arquivo do helloword_server.js precisa ficar assim:</p>

<figure class='code'><figcaption><span>Arquivo do Server NodeJS (helloworld_server.js)</span> <a href='http://rrmartins.github.com/downloads/code/helloworld_server.js'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="err">﻿</span><span class="kd">var</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;fs&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">server</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;http&#39;</span><span class="p">).</span><span class="nx">createServer</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">response</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span><span class="s1">&#39;helloworld.html&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">response</span><span class="p">.</span><span class="nx">writeHead</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="p">{</span><span class="s1">&#39;Content-Type&#39;</span><span class="o">:</span><span class="s1">&#39;text/html&#39;</span><span class="p">});</span>
</span><span class='line'>    <span class="nx">response</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">response</span><span class="p">.</span><span class="nx">end</span><span class="p">();</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">port</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">PORT</span> <span class="o">||</span> <span class="mi">3000</span><span class="p">;</span>
</span><span class='line'><span class="nx">server</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="nx">port</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Listening on &quot;</span> <span class="o">+</span> <span class="nx">port</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">everyone</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;now&quot;</span><span class="p">).</span><span class="nx">initialize</span><span class="p">(</span><span class="nx">server</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">everyone</span><span class="p">.</span><span class="nx">connected</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Joined: &quot;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">now</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">everyone</span><span class="p">.</span><span class="nx">disconnected</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Left: &quot;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">now</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">everyone</span><span class="p">.</span><span class="nx">now</span><span class="p">.</span><span class="nx">distributeMessage</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">message</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;mensagem &quot;</span><span class="o">+</span><span class="nx">message</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">message</span> <span class="o">=</span> <span class="nx">message</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/(&lt;([^&gt;]+)&gt;)/ig</span><span class="p">,</span><span class="s2">&quot;&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">everyone</span><span class="p">.</span><span class="nx">now</span><span class="p">.</span><span class="nx">receiveMessage</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">now</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span> <span class="nx">message</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>




<h3>Criando a View</h3>


<p>A nossa view, será basicamente HTML, e um pouco de simples javascript, então, dessa vez será 0 de explicação.</p>

<figure class='code'><figcaption><span>View do Chat (helloworld.html)</span> <a href='http://rrmartins.github.com/downloads/code/helloworld.html'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'><span class="nt">&lt;title&gt;</span>nowjs test<span class="nt">&lt;/title&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;http://ajax.googleapis.com/ajax/libs/jquery/1.5.1/jquery.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;nowjs/now.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;script&gt;</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">empty</span><span class="p">(</span><span class="nx">v</span><span class="p">){</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">v</span><span class="o">==</span><span class="kc">null</span> <span class="o">||</span> <span class="nx">v</span><span class="o">==</span><span class="mi">0</span> <span class="o">||</span> <span class="nx">v</span><span class="o">==</span><span class="s1">&#39;&#39;</span> <span class="o">||</span> <span class="nx">v</span><span class="o">==</span><span class="s2">&quot;&quot;</span><span class="p">){</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">true</span>
</span><span class='line'><span class="p">}</span><span class="k">else</span> <span class="p">{</span><span class="k">return</span> <span class="kc">false</span><span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">now</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">prompt</span><span class="p">(</span><span class="s2">&quot;Qual seu Nome?&quot;</span><span class="p">,</span> <span class="s2">&quot;nome&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">now</span><span class="p">.</span><span class="nx">receiveMessage</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">message</span><span class="p">){</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">message</span><span class="p">.</span><span class="nx">length</span> <span class="o">&lt;</span> <span class="mi">1</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">alert</span><span class="p">(</span><span class="s2">&quot;mensagem vazia&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">empty</span><span class="p">(</span><span class="nx">message</span><span class="p">)){</span>
</span><span class='line'>  <span class="nx">alert</span><span class="p">(</span><span class="s2">&quot;mensagem vazia&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span><span class="k">else</span>  <span class="p">{</span>
</span><span class='line'>      <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#messages&quot;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span><span class="s2">&quot;&lt;br&gt;&quot;</span> <span class="o">+</span> <span class="nx">name</span> <span class="o">+</span> <span class="s2">&quot;: &quot;</span> <span class="o">+</span> <span class="nx">message</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#send-button&quot;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">now</span><span class="p">.</span><span class="nx">distributeMessage</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#text-input&quot;</span><span class="p">).</span><span class="nx">val</span><span class="p">());</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#text-input&quot;</span><span class="p">).</span><span class="nx">val</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;messages&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">id=</span><span class="s">&quot;text-input&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;button&quot;</span> <span class="na">value=</span><span class="s">&quot;Send&quot;</span> <span class="na">id=</span><span class="s">&quot;send-button&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Proximo, passo, só levantar o servidor:</p>

<figure class='code'><figcaption><span>Levantando o Servidor </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>node helloworld_server.js</span></code></pre></td></tr></table></div></figure>


<p>É isso ai amigos, segue o lick de como a aplicação ficou no heroku, e o lick do repositorio dela no github.</p>

<p>Heroku -> <a href="http://nodechat.herokuapp.com">nodechat.herokuapp.com</a></p>

<p>Github -> <a href="https://github.com/rrmartins/node_chat">Node Chat</a></p>

<p>Até a proxima..</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A classe Encoding]]></title>
    <link href="http://rrmartins.github.com/blog/2012/04/30/a-classe-encoding/"/>
    <updated>2012-04-30T10:04:00-03:00</updated>
    <id>http://rrmartins.github.com/blog/2012/04/30/a-classe-encoding</id>
    <content type="html"><![CDATA[<p>Continuando os estudos de Ruby, e a leitura do livro The Ruby Programming Language</p>




<p>A classe Encoding de Ruby 1.9 representa uma codificação de caracteres. Objetos de codificação para agir como identificadores opacos para uma codificação e não têm muitos métodos próprios. O nome do método retorna o nome de uma codificação. to_s é um sinônimo para o name, e inspect converte um objeto em uma seqüência de codificação de uma forma mais detalhada do que o name faz.</p>




<p>Ruby define uma constante para cada uma das codificações built-in&#8217;s que ele suporta, e estes são a maneira mais fácil de especificar uma codificação em seu programa. As constantes predefinidas incluem pelo menos o seguinte:</p>




<figure class='code'><figcaption><span>Encoding</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Encoding</span><span class="o">::</span><span class="no">ASCII_8BIT</span>     <span class="c1"># Also ::BINARY</span>
</span><span class='line'><span class="no">Encoding</span><span class="o">::</span><span class="no">UTF_8</span>          <span class="c1"># UTF-8-encoded Unicode characters</span>
</span><span class='line'><span class="no">Encoding</span><span class="o">::</span><span class="no">EUC_JP</span>         <span class="c1"># EUC-encoded Japanese</span>
</span><span class='line'><span class="no">Encoding</span><span class="o">::</span><span class="no">SHIFT_JIS</span>      <span class="c1"># Japanese: also ::SJIS, ::WINDOWS_31J, ::CP932</span>
</span></code></pre></td></tr></table></div></figure>


<!--more-->


<p>Observe que, como estas são constantes, eles devem ser escritos em letras maiúsculas e hífens nos nomes de codificação devem ser convertidos para sublinhados. Ruby 1.9 também suporta a codificação US-ASCII, as codificações européias ISO-8859-1 através da ISO-8859-15, e o Unicode UTF-16 e UTF-32 codificações em variantes big-endian e little-endian.</p>




<p>Se você tiver um nome de codificação como uma string e deseja obter o objeto de codificação correspondente, use o método de fábrica Encoding.find:</p>




<figure class='code'><figcaption><span>Encoding</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">encoding</span> <span class="o">=</span> <span class="no">Encoding</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s2">&quot;utf-8&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>
Usando Encoding.find faz com que a codificação passa a ser carregada dinamicamente, se necessário. Encoding.find aceita names de codificação que são qualquer maiúsculo ou minúsculo. Chame o método name de uma codificação para obter o nome da codificação como uma string.</p>




<p>Encoding.list retorna uma matriz de todos os objetos de codificação disponíveis. Encoding.name_list retorna um array de nomes (como strings) de todas as codificações disponíveis. Codificações muito têm mais de um nome de uso comum, e Encoding.aliases retorna um hash que mapeia aliases de codificação para os names de codificação oficial pelos quais são sinônimos. A matriz retornada por Encoding.name_list inclui os aliases nos Encoding.aliases hash.</p>




<figure class='code'><figcaption><span>Encoding.name_list</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Encoding</span><span class="o">.</span><span class="n">name_list</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="o">[</span><span class="s2">&quot;ASCII-8BIT&quot;</span><span class="p">,</span> <span class="s2">&quot;UTF-8&quot;</span><span class="p">,</span> <span class="s2">&quot;US-ASCII&quot;</span><span class="p">,</span> <span class="s2">&quot;Big5&quot;</span><span class="p">,</span> <span class="s2">&quot;Big5-HKSCS&quot;</span><span class="p">,</span> <span class="s2">&quot;Big5-UAO&quot;</span><span class="p">,</span> <span class="s2">&quot;CP949&quot;</span><span class="p">,</span> <span class="s2">&quot;Emacs-Mule&quot;</span><span class="p">,</span> <span class="s2">&quot;EUC-JP&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="s2">&quot;EUC-KR&quot;</span><span class="p">,</span> <span class="s2">&quot;EUC-TW&quot;</span><span class="p">,</span> <span class="s2">&quot;GB18030&quot;</span><span class="p">,</span> <span class="s2">&quot;GBK&quot;</span><span class="p">,</span> <span class="s2">&quot;ISO-8859-1&quot;</span><span class="p">,</span> <span class="s2">&quot;ISO-8859-2&quot;</span><span class="p">,</span> <span class="s2">&quot;ISO-8859-3&quot;</span><span class="p">,</span> <span class="s2">&quot;ISO-8859-4&quot;</span><span class="p">,</span> <span class="s2">&quot;ISO-8859-5&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="s2">&quot;ISO-8859-6&quot;</span><span class="p">,</span> <span class="s2">&quot;ISO-8859-7&quot;</span><span class="p">,</span> <span class="s2">&quot;ISO-8859-8&quot;</span><span class="p">,</span> <span class="s2">&quot;ISO-8859-9&quot;</span><span class="p">,</span> <span class="s2">&quot;ISO-8859-10&quot;</span><span class="p">,</span> <span class="s2">&quot;ISO-8859-11&quot;</span><span class="p">,</span> <span class="s2">&quot;ISO-8859-13&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="s2">&quot;ISO-8859-14&quot;</span><span class="p">,</span> <span class="s2">&quot;ISO-8859-15&quot;</span><span class="p">,</span> <span class="s2">&quot;ISO-8859-16&quot;</span><span class="p">,</span> <span class="s2">&quot;KOI8-R&quot;</span><span class="p">,</span> <span class="s2">&quot;KOI8-U&quot;</span><span class="p">,</span> <span class="s2">&quot;Shift_JIS&quot;</span><span class="p">,</span> <span class="s2">&quot;UTF-16BE&quot;</span><span class="p">,</span><span class="s2">&quot;UTF-16LE&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="s2">&quot;UTF-32BE&quot;</span><span class="p">,</span> <span class="s2">&quot;UTF-32LE&quot;</span><span class="p">,</span> <span class="s2">&quot;Windows-1251&quot;</span><span class="p">,</span> <span class="s2">&quot;BINARY&quot;</span><span class="p">,</span> <span class="s2">&quot;IBM437&quot;</span><span class="p">,</span> <span class="s2">&quot;CP437&quot;</span><span class="p">,</span> <span class="s2">&quot;IBM737&quot;</span><span class="p">,</span> <span class="s2">&quot;CP737&quot;</span><span class="p">,</span> <span class="s2">&quot;IBM775&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="s2">&quot;CP775&quot;</span><span class="p">,</span> <span class="s2">&quot;CP850&quot;</span><span class="p">,</span><span class="s2">&quot;IBM850&quot;</span><span class="p">,</span> <span class="s2">&quot;IBM852&quot;</span><span class="p">,</span> <span class="s2">&quot;CP852&quot;</span><span class="p">,</span> <span class="s2">&quot;IBM855&quot;</span><span class="p">,</span> <span class="s2">&quot;CP855&quot;</span><span class="p">,</span> <span class="s2">&quot;IBM857&quot;</span><span class="p">,</span> <span class="s2">&quot;CP857&quot;</span><span class="p">,</span> <span class="s2">&quot;IBM860&quot;</span><span class="p">,</span> <span class="s2">&quot;CP860&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="s2">&quot;IBM861&quot;</span><span class="p">,</span> <span class="s2">&quot;CP861&quot;</span><span class="p">,</span> <span class="s2">&quot;IBM862&quot;</span><span class="p">,</span> <span class="s2">&quot;CP862&quot;</span><span class="p">,</span> <span class="s2">&quot;IBM863&quot;</span><span class="p">,</span><span class="s2">&quot;CP863&quot;</span><span class="p">,</span> <span class="s2">&quot;IBM864&quot;</span><span class="p">,</span> <span class="s2">&quot;CP864&quot;</span><span class="p">,</span> <span class="s2">&quot;IBM865&quot;</span><span class="p">,</span> <span class="s2">&quot;CP865&quot;</span><span class="p">,</span> <span class="s2">&quot;IBM866&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="s2">&quot;CP866&quot;</span><span class="p">,</span> <span class="s2">&quot;IBM869&quot;</span><span class="p">,</span> <span class="s2">&quot;CP869&quot;</span><span class="p">,</span> <span class="s2">&quot;Windows-1258&quot;</span><span class="p">,</span> <span class="s2">&quot;CP1258&quot;</span><span class="p">,</span> <span class="s2">&quot;GB1988&quot;</span><span class="p">,</span><span class="s2">&quot;macCentEuro&quot;</span><span class="p">,</span> <span class="s2">&quot;macCroatian&quot;</span><span class="p">,</span> <span class="s2">&quot;macCyrillic&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="s2">&quot;macGreek&quot;</span><span class="p">,</span> <span class="s2">&quot;macIceland&quot;</span><span class="p">,</span> <span class="s2">&quot;macRoman&quot;</span><span class="p">,</span> <span class="s2">&quot;macRomania&quot;</span><span class="p">,</span> <span class="s2">&quot;macThai&quot;</span><span class="p">,</span> <span class="s2">&quot;macTurkish&quot;</span><span class="p">,</span><span class="s2">&quot;macUkraine&quot;</span><span class="p">,</span> <span class="s2">&quot;CP950&quot;</span><span class="p">,</span> <span class="s2">&quot;CP951&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="s2">&quot;stateless-ISO-2022-JP&quot;</span><span class="p">,</span> <span class="s2">&quot;eucJP&quot;</span><span class="p">,</span> <span class="s2">&quot;eucJP-ms&quot;</span><span class="p">,</span> <span class="s2">&quot;euc-jp-ms&quot;</span><span class="p">,</span> <span class="s2">&quot;CP51932&quot;</span><span class="p">,</span> <span class="s2">&quot;eucKR&quot;</span><span class="p">,</span> <span class="s2">&quot;eucTW&quot;</span><span class="p">,</span> <span class="s2">&quot;GB2312&quot;</span><span class="p">,</span><span class="s2">&quot;EUC-CN&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="s2">&quot;eucCN&quot;</span><span class="p">,</span> <span class="s2">&quot;GB12345&quot;</span><span class="p">,</span> <span class="s2">&quot;CP936&quot;</span><span class="p">,</span> <span class="s2">&quot;ISO-2022-JP&quot;</span><span class="p">,</span> <span class="s2">&quot;ISO2022-JP&quot;</span><span class="p">,</span> <span class="s2">&quot;ISO-2022-JP-2&quot;</span><span class="p">,</span> <span class="s2">&quot;ISO2022-JP2&quot;</span><span class="p">,</span> <span class="s2">&quot;CP50220&quot;</span><span class="p">,</span> <span class="s2">&quot;CP50221&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;ISO8859-1&quot;</span><span class="p">,</span> <span class="s2">&quot;Windows-1252&quot;</span><span class="p">,</span> <span class="s2">&quot;CP1252&quot;</span><span class="p">,</span> <span class="s2">&quot;ISO8859-2&quot;</span><span class="p">,</span> <span class="s2">&quot;Windows-1250&quot;</span><span class="p">,</span> <span class="s2">&quot;CP1250&quot;</span><span class="p">,</span> <span class="s2">&quot;ISO8859-3&quot;</span><span class="p">,</span> <span class="s2">&quot;ISO8859-4&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;ISO8859-5&quot;</span><span class="p">,</span> <span class="s2">&quot;ISO8859-6&quot;</span><span class="p">,</span><span class="s2">&quot;Windows-1256&quot;</span><span class="p">,</span> <span class="s2">&quot;CP1256&quot;</span><span class="p">,</span> <span class="s2">&quot;ISO8859-7&quot;</span><span class="p">,</span> <span class="s2">&quot;Windows-1253&quot;</span><span class="p">,</span> <span class="s2">&quot;CP1253&quot;</span><span class="p">,</span> <span class="s2">&quot;ISO8859-8&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;Windows-1255&quot;</span><span class="p">,</span> <span class="s2">&quot;CP1255&quot;</span><span class="p">,</span> <span class="s2">&quot;ISO8859-9&quot;</span><span class="p">,</span> <span class="s2">&quot;Windows-1254&quot;</span><span class="p">,</span> <span class="s2">&quot;CP1254&quot;</span><span class="p">,</span> <span class="s2">&quot;ISO8859-10&quot;</span><span class="p">,</span> <span class="s2">&quot;ISO8859-11&quot;</span><span class="p">,</span> <span class="s2">&quot;TIS-620&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;Windows-874&quot;</span><span class="p">,</span> <span class="s2">&quot;CP874&quot;</span><span class="p">,</span> <span class="s2">&quot;ISO8859-13&quot;</span><span class="p">,</span> <span class="s2">&quot;Windows-1257&quot;</span><span class="p">,</span> <span class="s2">&quot;CP1257&quot;</span><span class="p">,</span><span class="s2">&quot;ISO8859-14&quot;</span><span class="p">,</span> <span class="s2">&quot;ISO8859-15&quot;</span><span class="p">,</span> <span class="s2">&quot;ISO8859-16&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;CP878&quot;</span><span class="p">,</span> <span class="s2">&quot;SJIS&quot;</span><span class="p">,</span> <span class="s2">&quot;Windows-31J&quot;</span><span class="p">,</span> <span class="s2">&quot;CP932&quot;</span><span class="p">,</span> <span class="s2">&quot;csWindows31J&quot;</span><span class="p">,</span> <span class="s2">&quot;MacJapanese&quot;</span><span class="p">,</span> <span class="s2">&quot;MacJapan&quot;</span><span class="p">,</span><span class="s2">&quot;ASCII&quot;</span><span class="p">,</span> <span class="s2">&quot;ANSI_X3.4-1968&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;646&quot;</span><span class="p">,</span> <span class="s2">&quot;UTF-7&quot;</span><span class="p">,</span> <span class="s2">&quot;CP65000&quot;</span><span class="p">,</span> <span class="s2">&quot;CP65001&quot;</span><span class="p">,</span> <span class="s2">&quot;UTF8-MAC&quot;</span><span class="p">,</span> <span class="s2">&quot;UTF-8-MAC&quot;</span><span class="p">,</span> <span class="s2">&quot;UTF-8-HFS&quot;</span><span class="p">,</span> <span class="s2">&quot;UCS-2BE&quot;</span><span class="p">,</span> <span class="s2">&quot;UCS-4BE&quot;</span><span class="p">,</span><span class="s2">&quot;UCS-4LE&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;CP1251&quot;</span><span class="p">,</span> <span class="s2">&quot;UTF8-DoCoMo&quot;</span><span class="p">,</span> <span class="s2">&quot;SJIS-DoCoMo&quot;</span><span class="p">,</span> <span class="s2">&quot;UTF8-KDDI&quot;</span><span class="p">,</span> <span class="s2">&quot;SJIS-KDDI&quot;</span><span class="p">,</span> <span class="s2">&quot;ISO-2022-JP-KDDI&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;stateless-ISO-2022-JP-KDDI&quot;</span><span class="p">,</span><span class="s2">&quot;UTF8-SoftBank&quot;</span><span class="p">,</span> <span class="s2">&quot;SJIS-SoftBank&quot;</span><span class="p">,</span> <span class="s2">&quot;locale&quot;</span><span class="p">,</span> <span class="s2">&quot;external&quot;</span><span class="p">,</span> <span class="s2">&quot;filesystem&quot;</span><span class="p">,</span> <span class="s2">&quot;internal&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Encoding.aliases</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Encoding</span><span class="o">.</span><span class="n">aliases</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="p">{</span><span class="s2">&quot;BINARY&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;ASCII-8BIT&quot;</span><span class="p">,</span> <span class="s2">&quot;CP437&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;IBM437&quot;</span><span class="p">,</span> <span class="s2">&quot;CP737&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;IBM737&quot;</span><span class="p">,</span> <span class="s2">&quot;CP775&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;IBM775&quot;</span><span class="p">,</span> <span class="s2">&quot;IBM850&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;CP850&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;CP857&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;IBM857&quot;</span><span class="p">,</span> <span class="s2">&quot;CP860&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;IBM860&quot;</span><span class="p">,</span> <span class="s2">&quot;CP861&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;IBM861&quot;</span><span class="p">,</span> <span class="s2">&quot;CP862&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;IBM862&quot;</span><span class="p">,</span> <span class="s2">&quot;CP863&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;IBM863&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;CP864&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;IBM864&quot;</span><span class="p">,</span> <span class="s2">&quot;CP865&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;IBM865&quot;</span><span class="p">,</span> <span class="s2">&quot;CP866&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;IBM866&quot;</span><span class="p">,</span> <span class="s2">&quot;CP869&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;IBM869&quot;</span><span class="p">,</span> <span class="s2">&quot;CP1258&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;Windows-1258&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;CP950&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;Big5&quot;</span><span class="p">,</span> <span class="s2">&quot;CP951&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;Big5-HKSCS&quot;</span><span class="p">,</span> <span class="s2">&quot;eucJP&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;EUC-JP&quot;</span><span class="p">,</span> <span class="s2">&quot;euc-jp-ms&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;eucJP-ms&quot;</span><span class="p">,</span> <span class="s2">&quot;eucKR&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;EUC-KR&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;eucTW&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;EUC-TW&quot;</span><span class="p">,</span> <span class="s2">&quot;EUC-CN&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;GB2312&quot;</span><span class="p">,</span> <span class="s2">&quot;eucCN&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;GB2312&quot;</span><span class="p">,</span> <span class="s2">&quot;CP936&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;GBK&quot;</span><span class="p">,</span> <span class="s2">&quot;ISO2022-JP&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;ISO-2022-JP&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;ISO2022-JP2&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;ISO-2022-JP-2&quot;</span><span class="p">,</span> <span class="s2">&quot;ISO8859-1&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;ISO-8859-1&quot;</span><span class="p">,</span> <span class="s2">&quot;CP1252&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;Windows-1252&quot;</span><span class="p">,</span> <span class="s2">&quot;ISO8859-2&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;ISO-8859-2&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;CP1250&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;Windows-1250&quot;</span><span class="p">,</span> <span class="s2">&quot;ISO8859-3&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;ISO-8859-3&quot;</span><span class="p">,</span> <span class="s2">&quot;ISO8859-4&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;ISO-8859-4&quot;</span><span class="p">,</span> <span class="s2">&quot;ISO8859-5&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;ISO-8859-5&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;ISO8859-6&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;ISO-8859-6&quot;</span><span class="p">,</span> <span class="s2">&quot;CP1256&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;Windows-1256&quot;</span><span class="p">,</span> <span class="s2">&quot;ISO8859-7&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;ISO-8859-7&quot;</span><span class="p">,</span> <span class="s2">&quot;CP1253&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;Windows-1253&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;ISO8859-8&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;ISO-8859-8&quot;</span><span class="p">,</span> <span class="s2">&quot;CP1255&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;Windows-1255&quot;</span><span class="p">,</span> <span class="s2">&quot;ISO8859-9&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;ISO-8859-9&quot;</span><span class="p">,</span> <span class="s2">&quot;CP1254&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;Windows-1254&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;ISO8859-10&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;ISO-8859-10&quot;</span><span class="p">,</span> <span class="s2">&quot;ISO8859-11&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;ISO-8859-11&quot;</span><span class="p">,</span> <span class="s2">&quot;CP874&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;Windows-874&quot;</span><span class="p">,</span> <span class="s2">&quot;ISO8859-13&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;ISO-8859-13&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;CP1257&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;Windows-1257&quot;</span><span class="p">,</span> <span class="s2">&quot;ISO8859-14&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;ISO-8859-14&quot;</span><span class="p">,</span> <span class="s2">&quot;ISO8859-15&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;ISO-8859-15&quot;</span><span class="p">,</span> <span class="s2">&quot;ISO8859-16&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;ISO-8859-16&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;CP878&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;KOI8-R&quot;</span><span class="p">,</span> <span class="s2">&quot;SJIS&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;Shift_JIS&quot;</span><span class="p">,</span> <span class="s2">&quot;CP932&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;Windows-31J&quot;</span><span class="p">,</span> <span class="s2">&quot;csWindows31J&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;Windows-31J&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;MacJapan&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;MacJapanese&quot;</span><span class="p">,</span> <span class="s2">&quot;ASCII&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;US-ASCII&quot;</span><span class="p">,</span> <span class="s2">&quot;ANSI_X3.4-1968&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;US-ASCII&quot;</span><span class="p">,</span> <span class="s2">&quot;646&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;US-ASCII&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;CP65000&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;UTF-7&quot;</span><span class="p">,</span> <span class="s2">&quot;CP65001&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;UTF-8&quot;</span><span class="p">,</span> <span class="s2">&quot;UTF-8-MAC&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;UTF8-MAC&quot;</span><span class="p">,</span> <span class="s2">&quot;UTF-8-HFS&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;UTF8-MAC&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;UCS-2BE&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;UTF-16BE&quot;</span><span class="p">,</span> <span class="s2">&quot;UCS-4BE&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;UTF-32BE&quot;</span><span class="p">,</span> <span class="s2">&quot;UCS-4LE&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;UTF-32LE&quot;</span><span class="p">,</span> <span class="s2">&quot;CP1251&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;Windows-1251&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;locale&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;UTF-8&quot;</span><span class="p">,</span> <span class="s2">&quot;external&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;UTF-8&quot;</span><span class="p">,</span> <span class="s2">&quot;filesystem&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;UTF-8&quot;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<p>Use Encoding.default_external e Encoding.default_internal para obter os objetos de codificação que representam os padrões externos e internos de codificação padrão. Para obter a codificação para o local atual, chame Encoding.locale_charmap e passar a seqüência resultante para Encoding.find.</p>




<figure class='code'><figcaption><span>Encoding.default_external</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Encoding</span><span class="o">.</span><span class="n">default_external</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="c1">#&lt;Encoding:UTF-8&gt; </span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Encoding.default_internal</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Encoding</span><span class="o">.</span><span class="n">default_internal</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="kp">nil</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Encoding.locale_charmap</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Encoding</span><span class="o">.</span><span class="n">locale_charmap</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="s2">&quot;UTF-8&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<p>A maioria dos métodos que esperam um objeto Encoding também aceitará um nome de codificação maiúsculas e minúsculas (como ascii, binário, UTF-8, EUC-JP, ou sjis) no lugar de um objeto de codificação.</p>


<p>É isso ai&#8230; até a proxima&#8230; :D</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Caracteres multibyte no Ruby 1.9]]></title>
    <link href="http://rrmartins.github.com/blog/2012/04/25/caracteres-multibyte-no-ruby-1-dot-9/"/>
    <updated>2012-04-25T22:27:00-03:00</updated>
    <id>http://rrmartins.github.com/blog/2012/04/25/caracteres-multibyte-no-ruby-1-dot-9</id>
    <content type="html"><![CDATA[<p>Continuando os estudos de Ruby, e a leitura do livro The Ruby Programming Language</p>




<p>A classe String foi reescrita no Ruby 1.9 para estar ciente e para
lidar corretamente com caracteres multibyte. Embora o apoio de vários bytes é
a maior mudança no Ruby 1,9, não é uma mudança altamente visível:
código que usa string multibyte simplesmente funciona. Vale a pena
entender por que ele funciona, no entanto, e esta seção explica o
detalhes.</p>




<p>Se uma string contém caracteres de vários bytes, então o número de
bytes não corresponde ao número de caracteres. No Ruby 1.9,
o comprimento ea
métodos tamanho retornar o número de
caracteres em uma seqüência, eo método novo tamanho byte
retorna o número de bytes. [] E [] = operadores permitem consultar e definir
os caracteres de uma string, e os novos métodos e getByte setbyte permitem que você
para consultar e definir bytes individuais (embora você não deve muitas vezes precisam
para fazer isso):</p>




<figure class='code'><figcaption><span>Encode</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># - * - Coding: utf-8 - * - # Especifique Unicode UTF-8 caracteres</span>
</span><span class='line'><span class="c1"># Esta é uma string literal contendo uma personagem multiplicação multibyte</span>
</span><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="s2">&quot;2 × 2 = 4&quot;</span>
</span><span class='line'><span class="c1"># A seqüência contém 6 bytes que codificam 5 caracteres</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">bytesize</span> <span class="c1"># =&gt; 6</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">bytesize</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span><span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">s</span><span class="o">.</span><span class="n">getbyte</span><span class="p">(</span><span class="n">i</span><span class="p">),</span> <span class="s2">&quot;&quot;</span><span class="p">}</span> <span class="c1"># Mostra &quot;50 195 151 50 61 52&quot;</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">length</span> <span class="c1"># =&gt; 5</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">length</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span><span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="nb">print</span> <span class="n">s</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">}</span> <span class="c1"># imprime &quot;2 × 2 = 4&quot;</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">setbyte</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="n">s</span><span class="o">.</span><span class="n">getbyte</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span> <span class="o">+</span><span class="mi">1</span><span class="p">);</span> <span class="c1"># s é agora &quot;2 × 2 = 5&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<p>Note-se que a primeira linha deste código é um comentário de codificação que define a codificação de origem (consulte Especificando Encoding Program) para UTF-8. Sem este comentário, o Ruby intérprete não saberia como decodificar a seqüência de bytes
na seqüência literal em uma seqüência de caracteres.</p>




<p>Quando uma string contém caracteres codificados com números variados
de bytes, já não é possível mapear diretamente do personagem
índice para deslocamento de byte na seqüência. Na seqüência acima, para
exemplo, o segundo carácter começa no segundo byte. Mas o
terceiro personagem começa no quarto byte. Isto significa que você
não pode assumir que o acesso aleatório a caracteres arbitrários dentro de um
string é uma operação rápida. Quando você usa o operador [], como
fizemos no código acima, para acessar um caractere ou substring dentro
uma string multibyte, a implementação de Ruby deve internamente iterar
sequencialmente na cadeia para encontrar o índice do caractere desejado.
Em geral, portanto, você deve tentar fazer o seu processamento de cadeia
utilizando algoritmos seqüenciais, quando possível. Ou seja: usar o iterator each_char quando possível, em vez
de chamadas repetidas para o []
operador. Por outro lado, não é geralmente necessário se preocupar
muito sobre isso. Implementações Ruby otimizar os casos que
pode ser otimizado, e se uma string é composta inteiramente de 1 byte
personagens, o acesso aleatório a esses personagens vão ser eficiente. Se
você quiser tentar suas próprias otimizações, você pode usar a instância
método ascii_only? para determinar
se uma seqüência consiste inteiramente de 7-bit ASCII.</p>




<p>A classe String no Ruby 1.9
define uma codificação
método que retorna a codificação de uma string (o retorno
valor é um objeto de codificação,
o qual é descrito em baixo):</p>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># - * - Coding: utf-8 - * -</span>
</span><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="s2">&quot;2 × 2 = 4&quot;</span> <span class="c1"># caráter multiplicação #  Note multibyte</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">encoding</span> <span class="c1"># =&gt; &lt;Encoding: UTF-8&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<p>A codificação de strings é sempre o mesmo que o
codificação de origem do arquivo, exceto que os literais que contêm
Escapes \u sempre são codificados em
UTF-8, independentemente da fonte de codificação.</p>




<p>Determinadas operações de corda, tais como concatenação e padrão
correspondência, exigem que duas strings (ou uma corda e um regular
expressão) possuem uma codificação compatíveis. Se você concatenar um ASCII
string com uma string UTF-8, por exemplo, obter uma string UTF-8.
Não é possível, no entanto, para concatenar uma string UTF-8 e um
SJIS string: as codificações não são compatíveis, e uma exceção será
ser levantada. Você pode testar se duas strings (ou uma corda e um
expressão regular) possuem uma codificação compatíveis usando a classe
método Encoding.compatible?.
Se as codificações dos dois argumentos são compatíveis,
retorna a uma que é o superconjunto do outro. Se o
codificações são incompatíveis, ela retorna nil.</p>




<p>Você pode definir explicitamente a codificação de uma string com force_encoding. Isso é útil se você tiver
uma seqüência de bytes (leia-se de um fluxo de I / O, talvez) e quer
dizer Ruby como eles devem ser interpretados como caracteres. Ou, se você
ter uma seqüência de caracteres de vários bytes, mas você deseja indexar
bytes individuais com []:</p>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">text</span> <span class="o">=</span> <span class="n">stream</span><span class="o">.</span><span class="n">readline</span><span class="o">.</span><span class="n">force_encoding</span><span class="p">(</span><span class="s2">&quot;utf-8&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">bytes</span> <span class="o">=</span> <span class="n">text</span><span class="o">.</span><span class="n">dup</span><span class="o">.</span><span class="n">force_encoding</span><span class="p">(</span><span class="s2">&quot;binário&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<p>
<b>force_encoding</b>
não fazer uma cópia de seu receptor, que modifica o
codificação da string e retorna a string. Este método não
que qualquer caractere conversão dos bytes subjacentes da cadeia são
não mudou, apenas a interpretação de Ruby deles é alterado. O
argumento para force_encoding pode ser
o nome de uma codificação ou um objeto de codificação.
</p>




<p>O force_encoding não faz validação, mas não verifica se os bytes subjacentes do
cadeia de representar uma seqüência válida de caracteres especificada no
de codificação. Use valid_encoding? para
executar a validação. Este método de instância não tem argumentos e verifica se
os bytes de uma cadeia pode ser interpretada como uma seqüência válida de
caracteres usando codificação da seqüência:</p>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="se">\xa4</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">force_encoding</span> <span class="p">(</span><span class="s2">&quot;utf-8&quot;</span><span class="p">)</span> <span class="c1"># Este não é um UTF-8 válido cadeia</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">valid_encoding?</span> <span class="c1"># =&gt; False</span>
</span></code></pre></td></tr></table></div></figure>




<p>O método de codificar de uma string é bastante
diferente da force_encoding. Ele retorna uma string que representa a mesma seqüência de caracteres como
seu receptor, mas usando uma codificação diferente. A fim de alterar o
codificação de ou-transcodificar uma string como esta,
o método de codificar deve alterar o
bytes subjacentes que compõem a cadeia. Aqui está um exemplo:
</p>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># - * - Coding: utf-8 - * -</span>
</span><span class='line'><span class="no">EURO1</span> <span class="o">=</span> <span class="s2">&quot;\u20AC&quot;</span> <span class="c1"># Comece com o personagem Euro Unicode</span>
</span><span class='line'><span class="nb">puts</span> <span class="no">EURO1</span> <span class="c1"># Imprime &quot;€&quot;</span>
</span><span class='line'><span class="n">euro1</span><span class="o">.</span><span class="n">encoding</span> <span class="c1"># =&gt; &lt;Encoding:UTF-8&gt;</span>
</span><span class='line'><span class="n">euro1</span><span class="o">.</span><span class="n">bytesize</span> <span class="c1"># =&gt; 3</span>
</span><span class='line'>
</span><span class='line'><span class="n">euro2</span> <span class="o">=</span> <span class="n">euro1</span><span class="o">.</span><span class="n">encode</span> <span class="p">(</span><span class="s2">&quot;iso-8859-15&quot;</span><span class="p">)</span> <span class="c1"># transcode para a América-15</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">euro2</span><span class="o">.</span><span class="n">inspect</span> <span class="c1"># Imprime &quot;\xA4&quot;</span>
</span><span class='line'><span class="n">euro2</span><span class="o">.</span><span class="n">encoding</span> <span class="c1"># =&gt; &lt;Encoding:iso-8859-15&gt;</span>
</span><span class='line'><span class="n">euro2</span><span class="o">.</span><span class="n">bytesize</span> <span class="c1"># =&gt; 1</span>
</span><span class='line'>
</span><span class='line'><span class="n">euro3</span> <span class="o">=</span> <span class="n">euro2</span><span class="o">.</span><span class="n">encode</span> <span class="p">(</span><span class="s2">&quot;utf-8&quot;</span><span class="p">)</span> <span class="c1"># transcode de volta para UTF-8</span>
</span><span class='line'><span class="no">EURO1</span> <span class="o">==</span> <span class="n">euro3</span> <span class="c1"># =&gt; true</span>
</span></code></pre></td></tr></table></div></figure>




<p>Note que você não deve muitas vezes precisa usar o método de codificação. O tempo mais comum para
transcode cordas é antes de escrevê-las em um arquivo ou enviá-los
através de uma conexão de rede. E, como veremos em Streams e codificações, classes Ruby I/O, apoiar o
transcodificação automática de texto quando ele é gravado.</p>




<p>Se a seqüência que você está chamando de codificar consiste de bytes não codificados, vocês
precisa especificar a codificação, que para interpretar esses bytes
antes de transcodificação-los para outra codificação. Faça isso passando dois
argumentos para codificar. O primeiro
argumento é a codificação desejada, eo segundo argumento é o
codificação atual da cadeia. Por exemplo:</p>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Interpretar um byte como um codepoint iso-8859-15, e transcodificar para UTF-8</span>
</span><span class='line'><span class="n">byte</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="se">\xA4</span><span class="s2">&quot;</span>
</span><span class='line'><span class="n">char</span> <span class="o">=</span> <span class="n">byte</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s2">&quot;utf-8&quot;</span><span class="p">,</span> <span class="s2">&quot;iso-8859-15&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<p>Isto é, as duas seguintes linhas de código tem o mesmo efeito:</p>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">text</span> <span class="o">=</span> <span class="n">bytes</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="n">to</span><span class="p">,</span> <span class="n">from</span><span class="p">)</span>
</span><span class='line'><span class="n">text</span> <span class="o">=</span> <span class="n">bytes</span><span class="o">.</span><span class="n">dup</span><span class="o">.</span><span class="n">force_encoding</span><span class="p">(</span><span class="n">from</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="n">to</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<p>Se você ligar para codificar sem
argumentos, ele transcodifica seu receptor para o padrão interno
codificação, caso tenha sido definido com o E-ou-U opções intérprete (ver Opções de codificação). Isso permite que os módulos de biblioteca (por
exemplo) para transcodificar suas constantes de cadeias públicas para um comum
codifica para a interoperabilidade.</p>




<p>Codificações de caracteres diferentes não só no seu mapeamento de
bytes para caracteres, mas no conjunto de caracteres que podem
representam. Unicode (também conhecido como UCS-o Universal Character Set) tenta
permitir que todos os personagens, mas codificações de caracteres não baseadas em Unicode
só pode representar um subconjunto de caracteres. Não é possível,
portanto, para transcodificar todos os UTF-8 cordas para EUC-JP (por exemplo);
Caracteres Unicode que não são nem latim, nem japonês não pode ser
traduzida.</p>




<p>Se a codificar ou codificar! método encontra um personagem que não pode transcodificar, ele gera uma exceção:</p>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="s2">&quot;\U20AC&quot;</span><span class="o">.</span><span class="n">Encode</span><span class="p">(</span><span class="s2">&quot;iso-8859-1&quot;</span><span class="p">)</span> <span class="c1"># Nenhum sinal de euros em Latin-1, para levantar exceção</span>
</span></code></pre></td></tr></table></div></figure>




<p>codificar e codificar! aceitar um hash de transcodificação
opções como seu argumento final. No momento da redação deste texto, o
Nome de opção só é definido: inválido, eo único valor definido para
essa chave é :ignore. &#8220;ri
String.encode &#8220;dará mais detalhes quando as opções são mais
implementadas.
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Codificações de String e Caracteres multibyte]]></title>
    <link href="http://rrmartins.github.com/blog/2012/04/24/codificacoes-de-string-e-caracteres-multibyte/"/>
    <updated>2012-04-24T00:04:00-03:00</updated>
    <id>http://rrmartins.github.com/blog/2012/04/24/codificacoes-de-string-e-caracteres-multibyte</id>
    <content type="html"><![CDATA[<p>Olá&#8230; Resolvi começar a escrever alguma coisa também de <a href="http://www.ruby-lang.org/pt/">Ruby</a>&#8230; Vamos começar com um pouco do inicio da classe <a href="http://www.ruby-doc.org/core-1.9.3/String.html">String</a>.</p>




<h2>Codificações de <a href="http://www.ruby-doc.org/core-1.9.3/String.html">String</a> e Caracteres multibyte</h2>




<p>
<a href="http://www.ruby-doc.org/core-1.9.3/String.html">String</a> são fundamentalmente diferentes em <a href="http://www.ruby-doc.org/core-1.8.7/">Ruby 1.8</a> e <a href="http://www.ruby-doc.org/core-1.9.3/">Ruby 1.9</a>:
</p>


<p>
No <a href="http://www.ruby-doc.org/core-1.8.7/">Ruby 1.8</a>, <a href="http://www.ruby-doc.org/core-1.9.3/String.html">String</a> são uma seqüência de bytes. quando cadeias
são usados ​​para representar texto (em vez de dados binários), cada byte da 
cadeia é considerada para representar um único caractere ASCII. no <a href="http://www.ruby-doc.org/core-1.8.7/">Ruby 1.8</a>, os elementos individuais de uma <a href="http://www.ruby-doc.org/core-1.9.3/String.html">String</a> não são caracteres, mas
números, o valor de byte real ou codificação de caracteres.
</p>


<p>
Em <a href="http://www.ruby-doc.org/core-1.9.3/">Ruby 1.9</a>, por outro lado, as cadeias são sequências verdadeiras
de caracteres, e esses caracteres não necessitam de ser confinado à
Conjunto de caracteres ASCII. Em <a href="http://www.ruby-doc.org/core-1.9.3/">Ruby 1.9</a>, os elementos individuais de uma cadeia
são caracteres representados como cadeias de tamanho igual a 1 - em vez de
inteiros códigos de caracteres. Cada <a href="http://www.ruby-doc.org/core-1.9.3/String.html">String</a> tem uma codificação que
especifica a correspondência entre os bytes na cadeia e
os caracteres representam os bytes. Codificações, como o UTF-8
codificação de caracteres Unicode utilizam número variável de bytes para
cada carácter, e não há mais uma 1-para-1 (nem mesmo uma correspondência 2-para-1)
entre bytes e subseções de caracteres. As subseções que seguem, explicam a codificação relacionada de
características de strings em <a href="http://www.ruby-doc.org/core-1.9.3/">Ruby 1.9</a>, e também demonstram de forma rudimentar o 
suporte para caracteres multibyte no <a href="http://www.ruby-doc.org/core-1.8.7/">Ruby 1.8</a> usando a biblioteca jcode.
</p>


<p>Até o proximo.. :D</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Agricultura de Software: Acréscimo no Sistema]]></title>
    <link href="http://rrmartins.github.com/blog/2012/04/22/agricultura-software-acrescimo-sistema/"/>
    <updated>2012-04-22T20:31:00-03:00</updated>
    <id>http://rrmartins.github.com/blog/2012/04/22/agricultura-software-acrescimo-sistema</id>
    <content type="html"><![CDATA[<h2>Agricultura de Software: Acréscimo no Sistema</h2>


<p>Às vezes as pessoas falam sobre crescimento de software, quando eles realmente querem dizer software
<a href="http://pt.wikipedia.org/wiki/Acre%C3%A7%C3%A3o">acreção</a>. As duas metáforas são intimamente relacionados, mas acréscimo de software é a
imagem mais esclarecedora. &#8220;Acréscimo&#8221;, no caso de você não ter um dicionário à mão,
significa qualquer crescimento ou aumento em tamanho por uma adição gradual externo ou inclusão.
Acréscimo descreve a maneira como uma ostra faz uma pérola, por adicionando gradualmente pequenas
quantidades de carbonato de cálcio. Em geologia, &#8220;acreção&#8221; significa uma adição lenta
terra pelo depósito de sedimentos pela água. Em termos jurídicos, &#8220;acreção&#8221; significa um
aumentar de terra ao longo das margens de um corpo de água através do depósito de vias de sedimentos navegáveis.
</p>


<!--more-->


<p>
Isso não significa que você tem que aprender a tornar o código de sedimentos pela água;
isso significa que você tem que aprender a adicionar aos seus sistemas de software uma pequena quantidade
de cada vez. Outras palavras intimamente relacionadas com a deposição são &#8220;incremental&#8221;, &#8220;interativo&#8221;,
&#8220;adaptativa&#8221; e &#8220;evolutivo&#8221;. A incremental concepção, construção e testes são
alguns dos mais poderosos conceitos de desenvolvimento de software disponíveis.</p>


<p>
No desenvolvimento incremental, você primeiro faz a versão mais simples possível do sistema
que será executado. Não tem que aceitar a entrada de dados realista, ele não tem que executar
manipulações realistas sobre dados, ele não tem de produzir uma saída realista -
ele só tem que ser um esqueleto forte o suficiente para manter o sistema real como ele é desenvolvido.
Pode chamar classes simulando a partir de cada uma das funções básicas que você identificou.
Este princípio básico é como início da ostra, uma pérola com um pequeno grão de areia.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[#FLISOL_ES 2012 - Um evento Latino-Americano]]></title>
    <link href="http://rrmartins.github.com/blog/2012/04/22/number-flisol-2012-um-evento-latino-americano/"/>
    <updated>2012-04-22T09:26:00-03:00</updated>
    <id>http://rrmartins.github.com/blog/2012/04/22/number-flisol-2012-um-evento-latino-americano</id>
    <content type="html"><![CDATA[<h2>
    <a href="http://flisol-es.heroku.com/">FLISOL - ES</a> # Um evento Latino-Americano
</h2>


<p><img class="center" src="http://rrmartins.github.com/images/flisol.png" title="FLISOL" ><br/></p>

<p> Olá amigos&#8230;</p>


<p>Semana que vem, no dia 28/04, irá acontecer em Vitória-ES, um dos maiores eventos de Tecnologia da
<a href="http://softwarelivre.org/">Comunidade de Software Livre</a>, o <a href="http://flisol.net/">FLISOL</a>
é um evento que acontece simultaneamente em varios locais da America Latina. </p>


<p>A grade completa você pode conferir <a href="http://flisol-es.heroku.com/schedule">AQUI</a>.</p>


<!-- more -->


<p>Tentando descrever o evento com poucas palavras, copiarei um trecho do site do FLISOL&#8230;</p>


<pre><code>O FLISOL (Festival Latinoamericano de Instalação de Software Livre) é o maior evento de divulgação de 
Software Livre da América Latina. Ele acontece desde 2005 e seu principal objetivo é promover o uso de 
software livre, apresentando sua filosofia, seu alcance, avanços e desenvolvimento ao público em geral.
Com esta finalidade, diversas comunidades locais de software livre 
(em cada país, em cada cidade/localidade), 
organizam simultaneamente eventos em que se instala gratuitamente e totalmente legal, 
software livre nos computadores 
levados pelos participantes. Também, paralelamente, são oferecidas apresentações, palestras e oficinas, 
sobre temas locais, nacionais e latinoamericanos sobre Software Livre, 
com toda sua variedade de expressões: artística, acadêmica, empresarial e social.
O FLISOL 2012 acontece no dia 28 de Abril em diversas cidades.
</code></pre>

<p>Será um evento muito bom. Estará lá grandes nomes da <a href="http://www.tux-es.org/portal/">Comunidade Local , TUX-ES</a>.</p>




<p>Como o <a href="http://www.leohackin.com.br/2012/04/flisoles-212-e-pomodoros/">&#8220;Mestre&#8221; Leo Hackin</a> disse:</p>


<pre><code>"Será um dia de muitas instalações de Linux, muita nerdisse, bate papo, 
networking e muita troca de experiência."
</code></pre>

<p>E é isso ai galera&#8230; o evento terá muitas paradas legais.. :D</p>




<p>E eu estarei palestrando sobre <a href="http://flisol-es.heroku.com/ruby">&#8220;Ruby, Simples e Expressivo!&#8221;</a>,<br/>
estarei falando um pouco de <a href="http://www.ruby-lang.org/">Ruby</a>, como uma linguagem de uma facil e rapida aprendizagem.<br/> 
Hoje trabalho com <a href="http://www.ruby-lang.org/">Ruby</a> na veia, e a cada dia eu e os membros do #TEAMFLEXA estamos evoluindo<br/>
na tecnologia com todo o apoio desta forte ferramenta.</p>




<p>Além da minha palestra, que irá abrir o evento, terá outras palestras muito legais, confira a grade do evento: <a href="http://flisol-es.heroku.com/schedule">Programação do FLISOL</a></p>




<p>Galera é isso ai&#8230; </p>




<p>Não poderia de deixar de parabenizar aos organizadores do Evento, <a href="http://twitter.com/#!/m3nd3s">Almir M3nd3s</a> e <a href="http://twitter.com/#!/jvrmaia">João Víctor</a>, <br/>
Parabens amigos&#8230; Bora fazer outros eventos, para fazer a tecnologia crescer no ES. :D</p>




<p>Bora Codar e apreender.. :D</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Caligrafia de Software: Escrevendo Códigos]]></title>
    <link href="http://rrmartins.github.com/blog/2012/04/07/caligrafia-de-software-escrevendo-codigos/"/>
    <updated>2012-04-07T19:22:00-03:00</updated>
    <id>http://rrmartins.github.com/blog/2012/04/07/caligrafia-de-software-escrevendo-codigos</id>
    <content type="html"><![CDATA[<p>Olá amigos, vai ai um mais dos estudos de Metricas, neste momento, vamos brincar com
a Caligrafia das Codigos.</p>

<p><b>Caligrafia de Software: Escrevendo Códigos</b></p>

<p>A metáfora mais primitiva para desenvolvimento de software, cresce fora da expressão
&#8220;código escrito&#8221;. A metáfora da escrita sugere que o desenvolvimento de um programa
é como escrever uma carta ocasional - Você se senta com caneta, tinta, papel e
vai escrevendo a partir do início ao fim. Não exige planejamento formal, e você
vai descobrindo o que você quer dizer com o andamento da escrita.</p>

<!-- more -->


<p>Muitas idéias derivam da metáfora escrita. Jon Bentley diz que você deve ser
capaz de se sentar perto da lareira com um copo de conhaque, um bom charuto, e seu
cão de caça favorito para desfrutar de um &#8220;programa de alfabetizado&#8221; a maneira como
você faria um bom romance. Brian Kernighan e PJ Plauger nomeou seu livro de programação
de Os Elementos de Estilo da Programação (1978), depois que o livro escrito em
estilo de The Elements of Style (Strunk e White 2000). Os programadores muitas vezes falam de &#8220;leitura do programa.&#8221;</p>

<p>Para o trabalhos de um indivíduo ou para projetos de pequena escala, uma pequena
metáfora escrita, funciona adequadamente, mas para outros fins que deixa a brincadeira
a desejar, e não descreve o desenvolvimento de software totalmente ou adequadamente.
A escrita é geralmente um uma pessoa em atividade, enquanto um projeto de software
provavelmente irá envolver muitas pessoas com muitas responsabilidades diferentes.
Quando você terminar de escrever um conjunto de códigos, você coloca-lo em um arquivo e salva.
Você não irá mudá-lo mais, e para todos os efeitos, ele é completo.
Software não é tão difícil mudar e quase nunca é totalmente completo. Tanto quanto 90% do desenvolvimento de
esforço em um sistema típico de software vem após o seu lançamento inicial, com
dois terços sendo típico (Pigoski 1997). Na escrita, um prémio mais elevado é colocado em
originalidade. Na construção de software, tentando criar uma obra verdadeiramente original é
muitas vezes menos eficaz do que com foco no reuso de idéias do projeto, código e teste
de casos de projetos anteriores. Em suma, a metáfora da escrita implica um
processo de desenvolvimento de software que é muito simples e rígida para ser saudável.</p>

<p>Infelizmente, a metáfora da letra-escrita foi perpetuado por um dos
livros de software mais populares no planeta Fred Brook The Mythical Man-Month
(Brooks, 1995). Brooks diz: &#8220;Planeje jogar algo fora, você vai de qualquer maneira.&#8221;
Isso evoca uma imagem de uma pilha de meio-escritas rascunhos jogados em um
cesto de lixo.</p>

<p>A metáfora epistolar sugere que o processo de software se baseia em
julgamento mais caro e errado, em vez de um planejamento cuidadoso e de bom design.</p>

<p>&#8220;Planeje jogar algo fora, você vai jogar de qualquer maneira.&#8221;
- Fred Brooks, diz:</p>

<pre><code>Se você pretende jogar algo fora, você vai jogar fora o caro e o errado.
</code></pre>

<p>-Craig Zerouni</p>

<pre><code>Planejamento para jogar algo fora pode ser prático quando você está escrevendo 
um código fácil de se ler. Mas estender a metáfora da "escrita" de software
para um plano de jogar algo fora é mau conselho para desenvolvimento de software, 
onde um sistema principal já custa tanto quanto um prédio de escritórios de 10 andares. 
É fácil pegar o anel de latão se você pode dar ao luxo de sentar no seu
pônei de madeira favorita para um número ilimitado de rodadas ao redor do carrossel.
O truque é colocá-lo na primeira vez ou se arriscar de varios modos
quando é mais barato. Outras metáforas de iluminar melhor as formas de alcançar
tais objetivos.
</code></pre>

<p>Até a proxima galera&#8230;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Como usar metáforas de software?]]></title>
    <link href="http://rrmartins.github.com/blog/2012/03/24/como-usar-metaforas-de-software/"/>
    <updated>2012-03-24T10:23:00-03:00</updated>
    <id>http://rrmartins.github.com/blog/2012/03/24/como-usar-metaforas-de-software</id>
    <content type="html"><![CDATA[<p>Olá amigos, após ler um pouco sobre Metaforas de Construção de Software&#8230;</p>


<p> Vamos descrever agora como usar Metaforas..</p>


<ol>
    <li>
        <a href="http://rrmartins.github.com/blog/2012/03/05/metaforas-de-desenvolvimento-de-software/">Metaforas de Desenvolvimento de Software</a>
    </li>
    <li>
        <a href="http://rrmartins.github.com/blog/2012/03/05/a-importancia-das-metaforas/">A Importancia das Metaforas - Part I</a>
    </li>
    <li>
        <a href="http://rrmartins.github.com/blog/2012/03/11/a-importancia-das-metaforas-parte-ii/">A Importancia das Metaforas - Part II</a>
    </li>
</ol>


<p><b>-> Como usar metáforas de software</b></p>

<p>Uma metáfora software é mais como um holofote de um mapa rodoviário. Ele não diz
onde encontrar a resposta, ela diz-lhe como olhar para ele. A metáfora serve
mais como uma heurística do que como um algoritmo.</p>

<!-- more -->


<p>Um algoritmo é um conjunto de instruções bem definidas para a realização de uma determinada
tarefa. Um algoritmo é previsível, determinista, e não está sujeita ao acaso.
Um algoritmo diz-lhe como ir do ponto A, ao ponto B sem desvios
sem viagens colaterais para pontos D, E e F, e não parando para cheirar as rosas ou
tome uma xícara de café. A heurística é uma técnica que ajuda você a procurar uma
responder. Seus resultados estão sujeitos a chance porque uma heurística telles você
apenas a forma de olhar, não o que encontrar. Ele não lhe diz como chegar diretamente
do ponto A ao ponto B, ele pode até não saber onde o ponto A eo ponto B são.
Com efeito, uma heurística é um algoritmo em uma roupa de palhaço. É menos previsível,
é mais divertido, e ele vem sem um de 30 dias, garantia de devolução do dinheiro.</p>

<p>Aqui é um algoritmo para dirigir a casa de alguém: Take Highway 167 sul
para Puyallup. Pegue a saída Sul Shopping Hill e conduzir 4,5 milhas até a colina.
Vire à direita na luz pelo supermercado, e depois tome a primeira à esquerda.
Vire para a garagem da casa grande tan à esquerda, na 714 Norte Cedar.</p>

<p>Aqui está uma heurística para chegar a casa de alguém? Encontre a última letra
nós lhe enviado. Conduza até a cidade no endereço de retorno. Quando você chegar à cidade,
perguntar a alguém onde é nossa casa. Todo mundo nos conhece alguém, será feliz para
ajudá-lo. Se você não consegue encontrar ninguém, chamar-nos de um telefone público, e
nós vamos buscá-la.</p>

<p>A diferença entre um algoritmo e uma heurística é sutil, e os dois
termos se sobrepõem ligeiramente. Para os propósitos deste livro, a principal diferença
entre os dois é o nível de engano a partir da solução.
Um algoritmo dá-lhe as instruções diretamente. Uma heurística diz-lhe
como descobrir as instruções para você mesmo, ou pelo menos onde procurar
para eles.</p>

<p>Tendo direções que disse-lhe exatamente como resolver seus problemas de programação
certamente facilitar a programação e os resultados mais previsíveis.
Mas a ciência programação ainda não está avançado e que não pode nunca ser.
A parte mais desafiadora de programação é conceituar o problema,
e muitos erros de programação são erros conceituais. Porque cada programa
é conceitualmente único, é dificil ou impossível criar um conjunto geral de
direcções que levam a uma solução em cada caso. Assim, saber como abordar
problemas, em geral, é pelo menos tão valioso como sabendo soluções specifc para
problemas específicos.</p>

<p>Como você usa metáforas de software? Use-os para lhe dar uma visão em sua
problemas de programação e processos. Use-os para ajudá-lo a pensar sobre o seu
programação das actividades e para ajudá-lo a imaginar maneiras melhores de fazer as coisas.
Você não será capaz de olhar para uma linha de código e dizer que ela viola a de
as metáforas descritas neste capítulo. Com o tempo, porém, a pessoa que
usa metáforas para iluminar o processo de desenvolvimento de software será percebido
como alguém que tem uma compreensão melhor da programação e produz um código melhor
mais rápido do que pessoas que não os utilizam.</p>

<p>Até a proxima galera.. ! :D</p>
]]></content>
  </entry>
  
</feed>
