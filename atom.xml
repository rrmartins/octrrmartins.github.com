<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Rodrigo Martins]]></title>
  <link href="http://rrmartins.github.com/atom.xml" rel="self"/>
  <link href="http://rrmartins.github.com/"/>
  <updated>2012-04-07T20:28:29-03:00</updated>
  <id>http://rrmartins.github.com/</id>
  <author>
    <name><![CDATA[Rodrigo Martins]]></name>
    <email><![CDATA[rodrigo@rrmartins.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Caligrafia de Software: Escrevendo Códigos]]></title>
    <link href="http://rrmartins.github.com/blog/2012/04/07/caligrafia-de-software-escrevendo-codigos/"/>
    <updated>2012-04-07T19:22:00-03:00</updated>
    <id>http://rrmartins.github.com/blog/2012/04/07/caligrafia-de-software-escrevendo-codigos</id>
    <content type="html"><![CDATA[<p>Olá amigos, vai ai um mais dos estudos de Metricas, neste momento, vamos brincar com
a Caligrafia das Codigos.</p>

<p><b>Caligrafia de Software: Escrevendo Códigos</b></p>

<p>A metáfora mais primitiva para desenvolvimento de software, cresce fora da expressão
&#8220;código escrito&#8221;. A metáfora da escrita sugere que o desenvolvimento de um programa
é como escrever uma carta ocasional - Você se senta com caneta, tinta, papel e
vai escrevendo a partir do início ao fim. Não exige planejamento formal, e você
vai descobrindo o que você quer dizer com o andamento da escrita.</p>

<!-- more -->


<p>Muitas idéias derivam da metáfora escrita. Jon Bentley diz que você deve ser
capaz de se sentar perto da lareira com um copo de conhaque, um bom charuto, e seu
cão de caça favorito para desfrutar de um &#8220;programa de alfabetizado&#8221; a maneira como
você faria um bom romance. Brian Kernighan e PJ Plauger nomeou seu livro de programação
de Os Elementos de Estilo da Programação (1978), depois que o livro escrito em
estilo de The Elements of Style (Strunk e White 2000). Os programadores muitas vezes falam de &#8220;leitura do programa.&#8221;</p>

<p>Para o trabalho de um indivídual ou para projetos de pequena escala, uma pequena
metáfora escrita, funciona adequadamente, mas para outros fins que deixa a brincadeira
a desejar, e não descreve o desenvolvimento de software totalmente ou adequadamente.
A escrita é geralmente um uma pessoa em atividade, enquanto um projeto de software
provavelmente irá envolver muitas pessoas com muitas responsabilidades diferentes.
Quando você terminar de escrever um conjunto de códigos, você coloca-lo em um arquivo e salva.
Você não irá mudá-lo mais, e para todos os efeitos, ele é completo.
Software não é tão difícil mudar e quase nunca é totalmente completo. Tanto quanto 90% do desenvolvimento de
esforço em um sistema típico de software vem após o seu lançamento inicial, com
dois terços sendo típico (Pigoski 1997). Na escrita, um prémio mais elevado é colocado em
originalidade. Na construção de software, tentando criar uma obra verdadeiramente original é
muitas vezes menos eficaz do que com foco no reuso de idéias do projeto, código e teste
de casos de projetos anteriores. Em suma, a metáfora da escrita implica um
processo de desenvolvimento de software que é muito simples e rígida para ser saudável.</p>

<p>Infelizmente, a metáfora da letra-escrita foi perpetuado por um dos
livros de software mais populares no planeta Fred Brook The Mythical Man-Month
(Brooks, 1995). Brooks diz: &#8220;Planeje jogar algo fora, você vai de qualquer maneira.&#8221;
Isso evoca uma imagem de uma pilha de meio-escritas rascunhos jogados em um
cesto de lixo.</p>

<p>A metáfora epistolar sugere que o processo de software se baseia em
julgamento mais caro e errado, em vez de um planejamento cuidadoso e de bom design.</p>

<p>&#8220;Planeje jogar algo fora, você vai jogar de qualquer maneira.&#8221;
- Fred Brooks, diz:</p>

<pre><code>Se você pretende jogar algo fora, você vai jogar fora o caro e o errado.
</code></pre>

<p>-Craig Zerouni</p>

<pre><code>Planejamento para jogar algo fora pode ser prático quando você está escrevendo 
um código fácil de se ler. Mas estender a metáfora da "escrita" de software
para um plano de jogar algo fora é mau conselho para desenvolvimento de software, 
onde um sistema principal já custa tanto quanto um prédio de escritórios de 10 andares. 
É fácil pegar o anel de latão se você pode dar ao luxo de sentar no seu
pônei de madeira favorita para um número ilimitado de rodadas ao redor do carrossel.
O truque é colocá-lo na primeira vez ou se arriscar de varios modos
quando é mais barato. Outras metáforas de iluminar melhor as formas de alcançar
tais objetivos.
</code></pre>

<p>Até a proxima galera&#8230;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Como usar metáforas de software?]]></title>
    <link href="http://rrmartins.github.com/blog/2012/03/24/como-usar-metaforas-de-software/"/>
    <updated>2012-03-24T10:23:00-03:00</updated>
    <id>http://rrmartins.github.com/blog/2012/03/24/como-usar-metaforas-de-software</id>
    <content type="html"><![CDATA[<p>Olá amigos, após ler um pouco sobre Metaforas de Construção de Software&#8230;</p>


<p> Vamos descrever agora como usar Metaforas..</p>


<ol>
    <li>
        <a href="http://rrmartins.github.com/blog/2012/03/05/metaforas-de-desenvolvimento-de-software/">Metaforas de Desenvolvimento de Software</a>
    </li>
    <li>
        <a href="http://rrmartins.github.com/blog/2012/03/05/a-importancia-das-metaforas/">A Importancia das Metaforas - Part I</a>
    </li>
    <li>
        <a href="http://rrmartins.github.com/blog/2012/03/11/a-importancia-das-metaforas-parte-ii/">A Importancia das Metaforas - Part II</a>
    </li>
</ol>


<p><b>-> Como usar metáforas de software</b></p>

<p>Uma metáfora software é mais como um holofote de um mapa rodoviário. Ele não diz
onde encontrar a resposta, ela diz-lhe como olhar para ele. A metáfora serve
mais como uma heurística do que como um algoritmo.</p>

<!-- more -->


<p>Um algoritmo é um conjunto de instruções bem definidas para a realização de uma determinada
tarefa. Um algoritmo é previsível, determinista, e não está sujeita ao acaso.
Um algoritmo diz-lhe como ir do ponto A, ao ponto B sem desvios
sem viagens colaterais para pontos D, E e F, e não parando para cheirar as rosas ou
tome uma xícara de café. A heurística é uma técnica que ajuda você a procurar uma
responder. Seus resultados estão sujeitos a chance porque uma heurística telles você
apenas a forma de olhar, não o que encontrar. Ele não lhe diz como chegar diretamente
do ponto A ao ponto B, ele pode até não saber onde o ponto A eo ponto B são.
Com efeito, uma heurística é um algoritmo em uma roupa de palhaço. É menos previsível,
é mais divertido, e ele vem sem um de 30 dias, garantia de devolução do dinheiro.</p>

<p>Aqui é um algoritmo para dirigir a casa de alguém: Take Highway 167 sul
para Puyallup. Pegue a saída Sul Shopping Hill e conduzir 4,5 milhas até a colina.
Vire à direita na luz pelo supermercado, e depois tome a primeira à esquerda.
Vire para a garagem da casa grande tan à esquerda, na 714 Norte Cedar.</p>

<p>Aqui está uma heurística para chegar a casa de alguém? Encontre a última letra
nós lhe enviado. Conduza até a cidade no endereço de retorno. Quando você chegar à cidade,
perguntar a alguém onde é nossa casa. Todo mundo nos conhece alguém, será feliz para
ajudá-lo. Se você não consegue encontrar ninguém, chamar-nos de um telefone público, e
nós vamos buscá-la.</p>

<p>A diferença entre um algoritmo e uma heurística é sutil, e os dois
termos se sobrepõem ligeiramente. Para os propósitos deste livro, a principal diferença
entre os dois é o nível de engano a partir da solução.
Um algoritmo dá-lhe as instruções diretamente. Uma heurística diz-lhe
como descobrir as instruções para você mesmo, ou pelo menos onde procurar
para eles.</p>

<p>Tendo direções que disse-lhe exatamente como resolver seus problemas de programação
certamente facilitar a programação e os resultados mais previsíveis.
Mas a ciência programação ainda não está avançado e que não pode nunca ser.
A parte mais desafiadora de programação é conceituar o problema,
e muitos erros de programação são erros conceituais. Porque cada programa
é conceitualmente único, é dificil ou impossível criar um conjunto geral de
direcções que levam a uma solução em cada caso. Assim, saber como abordar
problemas, em geral, é pelo menos tão valioso como sabendo soluções specifc para
problemas específicos.</p>

<p>Como você usa metáforas de software? Use-os para lhe dar uma visão em sua
problemas de programação e processos. Use-os para ajudá-lo a pensar sobre o seu
programação das actividades e para ajudá-lo a imaginar maneiras melhores de fazer as coisas.
Você não será capaz de olhar para uma linha de código e dizer que ela viola a de
as metáforas descritas neste capítulo. Com o tempo, porém, a pessoa que
usa metáforas para iluminar o processo de desenvolvimento de software será percebido
como alguém que tem uma compreensão melhor da programação e produz um código melhor
mais rápido do que pessoas que não os utilizam.</p>

<p>Até a proxima galera.. ! :D</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A importância das metáforas - Parte II]]></title>
    <link href="http://rrmartins.github.com/blog/2012/03/11/a-importancia-das-metaforas-parte-ii/"/>
    <updated>2012-03-11T16:33:00-03:00</updated>
    <id>http://rrmartins.github.com/blog/2012/03/11/a-importancia-das-metaforas-parte-ii</id>
    <content type="html"><![CDATA[<p>Olá amigos nerd&#8217;s&#8230; Continuando os estudos&#8230;</p>


<p><strong> A importância das metáforas - Parte II </strong></p>

<!-- more -->


<p>Considere o exemplo de uma pedra pesada oscila para frente e para trás em uma corda.
Antes de Galileu, um aristotélico olhar para a pedra balançando pensei que um
objeto pesado passou naturalmente a partir de uma posição mais elevada para uma estatística de descanso em uma menor
 uma. A aristotélica poderia pensar que o que a pedra estava realmente fazendo era
 caindo com dificuldade. Quando Galileu viu a pedra oscilante, ele viu um pêndulo.
 Ele pensou que o que a pedra estava realmente fazendo estava repetindo o mesmo movimento
 uma e outra vez, quase que perfeitamente.</p>

<p>Os poderes sugestivos dos dois modelos são bem diferentes. A aristotélica
que viu a pedra balançando como um objeto em queda seria observar o peso da pedra,
a altura a que tinha sido levantada, e o tempo que levou a vir para descansar.
Para o modelo de Galileu pêndulo, os fatores proeminentes eram diferentes.
Galileu observou peso da pedra, o raio de balanço do pêndulo,
o deslocamento angular, e o tempo de balanço. Galileu descobriu as leis do
Aristotélicos não conseguiram descobrir porque seu modelo levou-os a olhar diferente
fenômenos e fazer perguntas diferentes.</p>

<p>Metáforas contribuir para uma compreensão greate de desenvolvimento de software questões
da mesma forma que contribuam para uma maior compreensão do conhecimento científico
perguntas. Em sua palestra Prêmio Turing 1973, Charles Bachman descreveu o
mudar a partir do ponto de vista predominante earthcentered do universo a uma visão encontrada.
Modelo de Ptolomeu, centrado na Terra, durou sem grande desafio para 1400 anos.
Então, em 1543, Copérnico introduziu a teoria heliocêntrica, a idéia de que
o sol antes que a Terra era o centro do universo. Esta mudança na
modelos mentais levou finalmente à descoberta de novos planetas, a reclassificação
da Lua como um satélite, e não como um planeta, e uma compreensão diferente
do lugar da humanidade no universo.</p>

<p>Bachman comparou a mudança ptolomaico-to-copernicana em astronomia para a mudança na
programação de computadores no início de 1970. Quando Bachman fez a comparação, em 1973,
processamento de dados estava mudando de uma visão centrada no computador de sistemas de informação
a uma vista do banco de dados centralizada. Bachman apontou que os antigos de dados
processamento queria ver todos os dados como um fluxo seqüencial de cartões de fluxo
através de um computador (a visão centrada no computador). A mudança foi para se concentrar em um
conjunto de dados em que o computador passou a agir (uma visão de banco de dados-oriented).</p>

<p>O valor das metáforas não deve ser subestimado. Metáforas têm a virtude
de um comportamento esperado que seja compreendida por todos. Comunicação desnecessária e
mal-entendidos são reduzido. Apreendizado e educação são mais rápidos. Com efeito,
metáforas são uma forma de internalizar e abstrair conceitos, permitindo que um de pensamento estar em um plano superior e os erros de baixo nível que devem ser evitadas.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A importância das metáforas]]></title>
    <link href="http://rrmartins.github.com/blog/2012/03/05/a-importancia-das-metaforas/"/>
    <updated>2012-03-05T22:47:00-03:00</updated>
    <id>http://rrmartins.github.com/blog/2012/03/05/a-importancia-das-metaforas</id>
    <content type="html"><![CDATA[<p>Olá amigos nerd&#8217;s&#8230; Continuando os estudos&#8230;</p>


<p><strong> A importância das metáforas! </strong></p>

<!-- more -->


<p>Desenvolvimentos importantes com freqüência, surgir de analogias. Ao comparar tópico
você entende mal a algo similar você entender melhor,
você pode vir acima com idéias que resultaria em uma melhor compreensão do
lessfamiliar tópico. Este uso da metáfora é chamada de &#8220;modelagem&#8221;.
A história da ciência está cheia de descobertas baseada na exploração
o poder das metáforas. O químico Kekulé teve um sonho em que viu
uma cobra agarrar a cauda em sua boca. Quando ele acordou, percebeu que um
estrutura molecular com base em forma de anel semelhante seria responsável por
as propriedades de benzeno. Experimentação mais
confirmou a hipótese (Barbour 1966).</p>

<p>A teoria cinética dos gases foi baseada em um modelo de &#8220;sinuca&#8221;.
As moléculas de gás foram pensados ​​para ter massa e colidem elasticamente,
como fazer bolas de bilhar, e muitos teoremas úteis foram desenvolvidos a partir deste modelo.</p>

<p>A teoria ondulatória da luz foi desenvolvido em grande parte por explorar
semelhanças entre luz e som. Luz e som tem amplitude (brilho,
Sonoridade), freqüência (cor, altura), e outras propriedades em comum.
A comparação entre as teorias de ondas de som e luz foi tão produtivo
scientista que passou um grande esforço à procura de um meio que
se propagar o som se propaga via aérea luz. Eles ainda lhe deram um nome
- &#8220;Éter&#8221; - mas nunca encontraram o meio. A analogia foi tão frutífera
em algumas formas provou ser enganosa neste caso.</p>

<p>Em geral, o poder dos modelos é que eles estão vivas e pode ser apreendido como
conjuntos conceituais. Eles sugerem propriedades, relações e adicionais
áreas de investigação. Às vezes, um modelo sugere áreas de investigação que são enganosas,
caso em que a metáfora tem sido sobrecarregados. Quando o cientista parecia
para o éter, que seu modelo sobrecarregado.</p>

<p>Como você poderia esperar, algumas metáforas são melhores que outros.
Uma boa metáfora é simples, se relaciona bem com metáfora relevantes,
e explica grande parte das evidências experimentais e outros fenômenos observados.</p>

<p>Aguardem&#8230; Em breve novos conteudos!!!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Metáforas de Desenvolvimento de Software]]></title>
    <link href="http://rrmartins.github.com/blog/2012/03/05/metaforas-de-desenvolvimento-de-software/"/>
    <updated>2012-03-05T20:53:00-03:00</updated>
    <id>http://rrmartins.github.com/blog/2012/03/05/metaforas-de-desenvolvimento-de-software</id>
    <content type="html"><![CDATA[<p>Olá amigos nerd&#8217;s&#8230; Continuando os estudos&#8230;</p>


<p><strong> Metáforas para uma compreensão mais rica de Desenvolvimento de Software </strong></p>

<!-- more -->


<p>Ciência da Computação tem uma parte da linguagem mais colorida de qualquer campo.
Em que outro campo você pode andar em uma sala estéril, cuidadosamente controlada no
20° C, e encontrar os vírus, cavalos de Tróia, <a href="http://cartilha.cert.br/malware/sec6.html" target=_blank>worms</a>, bugs, bombas, falha,
chamas, trocadores de sexo torcidas, e erros fatais?</p>

<p>Essas metáforas gráficas descrevem fenômenos de software específicos.
Igualmente metáforas vivas descrevem fenômenos mais amplos, e você pode usá-los
para melhorar a sua compreensão do processo de desenvolvimento de software.</p>

<p>O resto do livro não dependem diretamente da discussão de metáforas
neste capítulo. Ignorá-lo se você quiser chegar às sugestões práticas.
Leia-o se você quer pensar sobre desenvolvimento de software de forma mais clara.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Por que Construção de Software é Importante? - Parte 2]]></title>
    <link href="http://rrmartins.github.com/blog/2012/03/03/por-que-construcao-de-software-e-importante-parte-2/"/>
    <updated>2012-03-03T19:55:00-03:00</updated>
    <id>http://rrmartins.github.com/blog/2012/03/03/por-que-construcao-de-software-e-importante-parte-2</id>
    <content type="html"><![CDATA[<p>Olá amigos nerd&#8217;s&#8230; Continuando os estudos&#8230;</p>


<p><strong> Por que Construção de Software é Importante? - Parte 2</strong></p>

<!-- more -->


<p>
Com foco na construção, a produtividade do programador indivídual pode
  melhorar enormemente. Um estudo clássico de Sackman, Erikson e Grant mostrou
  que a produtividade dos programadores individuais variaram por um fator de 10 a 20
  durante a construção (1968). Desde o seu estudo, seus resultados têm
  se confirmado por numerosos outros estudos (&#8230;). Este livro, ajuda a todos os programadores
  aprender tecnicas que já são utilizados pelos melhores programadores.
</p>


<p>
  Produto de construção, o código-fonte, é muitas vezes a única
  descrição precisa do software. Em muitos projetos, a documentação só
  disponível para os programadores é o próprio código. Requisitos e especificações
  documentos de projeto pode ir fora da data, mas o código fonte é sempre atualizado.
  Consequentemente, é imperativo que o código fonte de ser o mais alto possível
  qualidade. A aplicação consistente de técnicas para melhoria do código-fonte
  faz a diferença entre um aparelho de Rube Goldberg e uma análise detalhada,
  corrigir, e um programa informativo portanto. Tais técnicas são mais
  efectivamente aplicado durante a construção.
 </p>


<p> <p>
  A construção é a única atividade que está garantido para ser feito.
  O projeto de software ideal passa por desenvolvimento de requisitos cuidadoso e
  projeto arquitetônico antes do início da construção. O projeto ideal
  sofre abrangente, o teste do sistema estatisticamente controlada após
  construção.
 </p>
 <p>
  Imperfeitos, projetos do mundo real, no entanto, muitas vezes ignorar exigências
  e design para pular para a construção. Eles deixam de testes, porque eles têm
  muitos erros para corrigir e eles ficar sem tempo.
  Mas não importa o quão apressado ou mal planejado um projeto é que você não pode
  cair de construção, é onde a borracha encontra a estrada.
 </p>
 <p>
  Melhorar a construção é, assim, uma forma de melhorar a qualquer desenvolvimento de software
  esforço, não importa o quão abreviado.
  </p></p>

<p>Texto retirado do livro Code Compile, de Steve McConnell.
Até a proxima amigos&#8230; :D</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pontos Chaves Para a Construção de Software!]]></title>
    <link href="http://rrmartins.github.com/blog/2012/03/01/pontos-chaves/"/>
    <updated>2012-03-01T13:31:00-03:00</updated>
    <id>http://rrmartins.github.com/blog/2012/03/01/pontos-chaves</id>
    <content type="html"><![CDATA[<p>
Pontos-chaves Para a Construção de Software!
</p>


<p>
-> Construção de software é a atividade central no desenvolvimento de software;
construção é a única atividade que está garantida a acontecer em cada projeto.
</p>


<p>
-> As atividades principais da construção estão detalhadas design, codificação,
depuração, integração e testes de desenvolvedor
(testes unitários e testes de integração).
</p>


<p>
-> Outros termos comuns para construção são &#8220;codificação&#8221; e &#8220;programação&#8221;.
</p>


<p>
-> A qualidade da construção afeta substancialmente
a qualidade do software.
</p>


<p>
-> Na análise final, o seu entendimento de como fazer construção determina
como um bom programador você é, e esse é o assunto do resto do livro.
</p>


<p>Texto retirado do livro Code Compile, de Steve McConnell.</p>

<p>&#8220;Conhecimento nunca é de mais!&#8221; (<a href="http://twitter.com/sfalsin">@sfalsin</a>)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Por que Construção de Software é Importante?]]></title>
    <link href="http://rrmartins.github.com/blog/2012/02/29/por-que-construcao-de-software-e-importante/"/>
    <updated>2012-02-29T23:46:00-03:00</updated>
    <id>http://rrmartins.github.com/blog/2012/02/29/por-que-construcao-de-software-e-importante</id>
    <content type="html"><![CDATA[<p>Olá amigos nerd&#8217;s&#8230; Continuando os estudos&#8230;</p>


<p>Agora vou falar um outro capitulo&#8230; Que é sobre:<br/>
<strong> Por que Construção de Software é Importante? </strong></p>

<!-- more -->


<p>
Uma vez que você está lendo este livro, provavelmente você concorda que a melhoria
  qualidade do software e a produtividade do desenvolvedor é importante. Muitos dos mais de hoje
  projetos interessantes usar software intensamente. A Internet,
  efeitos especiais de cinema, médicos de suporte de vida de sistemas, programas espaciais, aeronáutica,
  alta velocidade de análise financeira e pesquisa científica são alguns exemplos ao poucos.
  Esses projetos e mais projetos convetional podem se beneficiar
  melhores práticas, porque muitos dos fundamentos são os mesmos.
</p>


<p></p>

<p>
  Se você concorda que a melhoria de desenvolvimento de software é importante, em geral,
  a pergunta para você como leitor deste livro torna-se,
  Por que é a construção de um foco importante?
 </p>


<p> <p>
  Eis o porquê:
  Construção é uma grande parte do desenvolvimento mercadoria software.
  Dependendo do tamanho do projecto, a construção tipicamente
  leva 30 a 80 por cento do tempo total gasto em um projeto.
  Qualquer coisa que leva até que o tempo de projeto muito é obrigado a
  afetar o sucesso do projeto.
 </p>
 <p>
  A construção é a atividade central no desenvolvimento de software.
  Requisitos e arquitetura são feitas antes da construção
  de modo que você pode construção de forma eficaz. O teste do sistema (no estrito
  sensação de testes independentes) é feito após a construção para verificar
  que a construção verificar que a construção foi feito correctamente.
  Construção está no centro do processo de desenvolvimento de software.
</p></p>

<p>Vale a pena estudar&#8230; :D</p>

<br/>


<p>Até a proxima amigos&#8230; :D</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[O que é Software Construção? - Part 2]]></title>
    <link href="http://rrmartins.github.com/blog/2012/02/27/what-is-software-construction-part-2/"/>
    <updated>2012-02-27T21:12:00-03:00</updated>
    <id>http://rrmartins.github.com/blog/2012/02/27/what-is-software-construction-part-2</id>
    <content type="html"><![CDATA[<p>Olá amigos nerd&#8217;s&#8230; Continuando os estudos do livro Code Compile,</p>

<h1>
O que é Software Construção? - Parte 2
</h1>


<p>
Para quem ainda não leu o primeiro post sobre este assunto, segu o link abaixo:<br/>
- <a href="http://rrmartins.github.com/blog/2012/02/25/what-is-software-construction/">O que é Construção de Software ? Parte 1</a>
</p>


<p>
Aqui estão algumas das tarefas específicas envolvidas na construção:<br/>
  * Verificar se o projeto foi colocado de modo que
  construção pode avançar com sucesso;<br/>
  * Determinar como seu código será testado<br/>
  * Desenhando e escrevendo de Classes e Rotinas<br/>
  * Criar e nomear variáveis ​​e constantes nomeadas, sempre colocando nomes simples e expressivos.<br/>
  * Seleção de estruturas de controle e organização de blocos de instruções<br/>
  * O teste de unidade, testes de integração e depuração de seu próprio código<br/>
  * Revisão de baixo nível outros membros da equipe de projetos e códigos<br/>
  * Escrever o código cuidadosamente com formatação e comentando isso<br/>
  * Integração de componentes de software que foram criados separadamente<br/>
  * Sintonizar código para torná-lo mais rápido e usar menos recursos<br/>
</p>


<!-- more -->


<p>
 Para obter uma lista ainda mais cheia de atividades de construção,
  olhe através dos títulos dos capítulos na tabela de conteúdos. </p>


<p> <p>
  Com tantas atividades no trabalho na construção civil, pode-se dizer,
  &#8220;OK, Jack, quais as atividades não fazem parte da construção?&#8221; Essa é uma pergunta justa.
  Importantes atividades de construção não incluem a gestão,
  requisitos, desenvolvimento, arquitetura de software, design de interface do usuário,
  teste de sistema e manutenção. Cada uma destas atividades afeta o último
  sucesso de um projeto tanto quanto a construção - pelo menos o sucesso de qualquer
  projeto que exige mais do que uma ou duas pessoas e dura mais tempo do que
  algumas semanas.
</p></p>

<p>Apresentando os estudos aos poucos&#8230; Vamos evoluindo a cada dia&#8230; Até a proxima!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[O que é Construção de Software ? Parte 1]]></title>
    <link href="http://rrmartins.github.com/blog/2012/02/25/what-is-software-construction/"/>
    <updated>2012-02-25T23:27:00-03:00</updated>
    <id>http://rrmartins.github.com/blog/2012/02/25/what-is-software-construction</id>
    <content type="html"><![CDATA[<p>Amigos, estou lendo um livro muito bom.. E vou começar a compartilhar algumas partes dele com todos&#8230; Este é só o primeiro post de tradução.<br/></p>

<h1>
O que é Software Construção?
</h1>


<p>O desenvolvimento de software de computador pode ser um processo complicado, e nos últimos 25 anos,
  pesquisadores identificaram inúmeras atividades distintas que são para desenvolvimento de software. Eles incluem:
  <br/>
  * Definição do problema  <br/>
  * Requisitos de desenvolvimento  <br/>
<!-- more -->
  * Planejamento da construção  <br/>
  * Arquitetura de software, ou alto nível de design  <br/>
  * O projeto detalhado  <br/>
  * Codificação e depuração  <br/>
  * Teste de unidade  <br/>
  * Testes de integração  <br/>
  * Teste do sistema  <br/>
  * Manutenção corretiva  <br/>
 </p>


<p> <p>
  Se você trabalhou principalmente em projetos informais,
  você não poderia ter feito distinções entre as muitas atividades que são para
  criação de um produto de software. Mentalmente, você pode ter todas estas atividades agrupadas
 em conjunto, como &#8220;programação&#8221;. Se você trabalhar em projetos informais, as principais
  atividades que você pensa quando você pensa sobre a criação de software é, provavelmente,
  a atividade, os pesquisadores se referem como &#8220;construção&#8221;.
 </p>
 <p>
  Esta noção intuitiva de &#8220;construção&#8221; é bastante precisa, mas sofre
  de uma falta de perspectiva. Colocando construção no seu contexto com outras
  atividades ajuda a manter o foco nas tarefas certas durante a construção
  e o apropriadamente enfatiza importantes atividades que não serão construidas.</p>
  <br/>
  Em breve mais do livro abaixo.</p>

<p>  Fonte: Livro: Code Complete: A practical handbook of software construction (Autor: Steve McConnell)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Iniciando com o Octpress :D]]></title>
    <link href="http://rrmartins.github.com/blog/2012/02/15/iniciando-com-o-octpress-d/"/>
    <updated>2012-02-15T13:30:00-02:00</updated>
    <id>http://rrmartins.github.com/blog/2012/02/15/iniciando-com-o-octpress-d</id>
    <content type="html"><![CDATA[<p>Olá amigos nerd&#8217;s&#8230; <br/>
<img class="left" src="http://rrmartins.github.com/images/octopress.png" width="150" height="250" title="Octopress #3" >
Estou iniciando com o <a href="http://octopress.org/">Octopress</a>&#8230; e é muito MASSAA!! :D</p>

<br/>


<p>Indico a todos os Dev&#8217;s para estudar e iniciar com ele.. muito simples&#8230;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Criando Combobox com Rails 3]]></title>
    <link href="http://rrmartins.github.com/blog/2012/02/15/criando-combobox-com-rails-3/"/>
    <updated>2012-02-15T13:05:00-02:00</updated>
    <id>http://rrmartins.github.com/blog/2012/02/15/criando-combobox-com-rails-3</id>
    <content type="html"><![CDATA[<p>
Para todos aqueles que conhecem o <a href="http://api.rubyonrails.org/classes/ActionView/Helpers/FormHelper.html">Form_for</a>,
 e quem ainda não teve a oportunidade de vê-lo. Vamos estudar um pouco de <a href="http://api.rubyonrails.org/">Rails</a>, e 
 estudem logo, o mercado esta precisando de programadores bons.. :D
 </p>


<!-- more -->


<p>
Então, vamos ao contexto do post, para gerar um combo box semelhante a este abaixo: </p>


<p><select name="estado">
<option value="AL">AL</option>
<option value="AP">AP</option>
<option value="AM">AM</option>
<option value="BA">BA</option>
<option value="CE">CE</option>
<option value="ES">ES</option>
</select></p>

<p>
Faça assim:
</p>


<figure class='code'><figcaption><span>Criando Combobox em Rails</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">select</span> <span class="ss">:estado</span><span class="p">,</span> <span class="p">(</span><span class="o">[[</span><span class="s2">&quot;AC&quot;</span><span class="p">,</span> <span class="s2">&quot;AC&quot;</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="s2">&quot;AL&quot;</span><span class="p">,</span> <span class="s2">&quot;AL&quot;</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="s2">&quot;AP&quot;</span><span class="p">,</span> <span class="s2">&quot;AP&quot;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'><span class="o">[</span><span class="s2">&quot;AM&quot;</span><span class="p">,</span> <span class="s2">&quot;AM&quot;</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="s2">&quot;BA&quot;</span><span class="p">,</span> <span class="s2">&quot;BA&quot;</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="s2">&quot;CE&quot;</span><span class="p">,</span> <span class="s2">&quot;CE&quot;</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="s2">&quot;DF&quot;</span><span class="p">,</span> <span class="s2">&quot;DF&quot;</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="s2">&quot;ES&quot;</span><span class="p">,</span> <span class="s2">&quot;ES&quot;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'><span class="o">[</span><span class="s2">&quot;GO&quot;</span><span class="p">,</span> <span class="s2">&quot;GO&quot;</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="s2">&quot;MA&quot;</span><span class="p">,</span> <span class="s2">&quot;MA&quot;</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="s2">&quot;MT&quot;</span><span class="p">,</span> <span class="s2">&quot;MT&quot;</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="s2">&quot;MS&quot;</span><span class="p">,</span> <span class="s2">&quot;MS&quot;</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="s2">&quot;MG&quot;</span><span class="p">,</span> <span class="s2">&quot;MG&quot;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'><span class="o">[</span><span class="s2">&quot;PA&quot;</span><span class="p">,</span> <span class="s2">&quot;PA&quot;</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="s2">&quot;PB&quot;</span><span class="p">,</span> <span class="s2">&quot;PB&quot;</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="s2">&quot;PR&quot;</span><span class="p">,</span> <span class="s2">&quot;PR&quot;</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="s2">&quot;PE&quot;</span><span class="p">,</span> <span class="s2">&quot;PE&quot;</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="s2">&quot;PI&quot;</span><span class="p">,</span> <span class="s2">&quot;PI&quot;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'><span class="o">[</span><span class="s2">&quot;RJ&quot;</span><span class="p">,</span> <span class="s2">&quot;RJ&quot;</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="s2">&quot;RN&quot;</span><span class="p">,</span> <span class="s2">&quot;RN&quot;</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="s2">&quot;RS&quot;</span><span class="p">,</span> <span class="s2">&quot;RS&quot;</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="s2">&quot;RO&quot;</span><span class="p">,</span> <span class="s2">&quot;RO&quot;</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="s2">&quot;RR&quot;</span><span class="p">,</span> <span class="s2">&quot;RR&quot;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'><span class="o">[</span><span class="s2">&quot;SC&quot;</span><span class="p">,</span> <span class="s2">&quot;SC&quot;</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="s2">&quot;SP&quot;</span><span class="p">,</span> <span class="s2">&quot;SP&quot;</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="s2">&quot;SE&quot;</span><span class="p">,</span> <span class="s2">&quot;SE&quot;</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="s2">&quot;TO&quot;</span><span class="p">,</span> <span class="s2">&quot;TO&quot;</span><span class="o">]]</span><span class="p">)</span> <span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>
Até a próxima rubistas&#8230; :D

]]></content>
  </entry>
  
</feed>
